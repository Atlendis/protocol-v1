{
  "address": "0xa5A52023d313339969Ca819cd066aBc72685D2B3",
  "abi": [
    {
      "inputs": [],
      "name": "BP_BOND_ISSUANCE_ID_TOO_HIGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_BORROW_COOLDOWN_PERIOD_NOT_OVER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_BORROW_MAX_BORROWABLE_AMOUNT_EXCEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_BORROW_OUT_OF_BOUND_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_BORROW_UNSUFFICIENT_BORROWABLE_AMOUNT_WITHIN_BRACKETS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_EARLY_REPAY_NOT_ACTIVATED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_LOAN_ONGOING",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_MULTIPLE_BORROW_AFTER_MATURITY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_NO_DEPOSIT_TO_WITHDRAW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_OUT_OF_BOUND_MAX_RATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_OUT_OF_BOUND_MIN_RATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_POOL_CLOSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_POOL_DEFAULTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_POOL_NOT_ACTIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_RATE_SPACING",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_REPAY_NO_ACTIVE_LOAN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_TARGET_BOND_ISSUANCE_INDEX_EMPTY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_UNMATCHED_TOKEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MATH_ADDITION_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MATH_DIVISION_BY_ZERO",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MATH_MULTIPLICATION_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_BORROWER_ALREADY_AUTHORIZED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_DISALLOW_UNMATCHED_BORROWER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_ESTABLISHMENT_FEES_TOO_HIGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_NOT_ENOUGH_PROTOCOL_FEES",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_NO_ONGOING_LOAN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_POOL_ALREADY_CLOSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_POOL_ALREADY_SET_FOR_BORROWER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_POOL_DEFAULTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_POOL_NOT_ACTIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_POOL_TOKEN_NOT_SUPPORTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_RATE_SPACING_COMPLIANCE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_REPAYMENT_PERIOD_ONGOING",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_ZERO_POOL",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedBorrowedAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "establishmentFees",
          "type": "uint128"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "BorrowerAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "BorrowerDisallowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ClaimProtocolFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "remainingLiquidityRewards",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "addedAccruedFees",
          "type": "uint128"
        }
      ],
      "name": "CollectFeesForTick",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "distributedLiquidityRewards",
          "type": "uint128"
        }
      ],
      "name": "Default",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedRepayAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "repaymentFee",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedDepositsAfterRepay",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "nextLoanMinStart",
          "type": "uint128"
        }
      ],
      "name": "EarlyRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedBorrowedAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "establishmentFees",
          "type": "uint128"
        }
      ],
      "name": "FurtherBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedRepayAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "lateRepayFee",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "repaymentFee",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedDepositsAfterRepay",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "nextLoanMinStart",
          "type": "uint128"
        }
      ],
      "name": "LateRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "PoolActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "collectedLiquidityRewards",
          "type": "uint128"
        }
      ],
      "name": "PoolClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "contract ILendingPool",
              "name": "yieldProvider",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maxRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rateSpacing",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maxBorrowableAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "loanDuration",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "distributionRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "cooldownPeriod",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "repaymentPeriod",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lateRepayFeePerBondRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "establishmentFeeRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "repaymentFeeRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "liquidityRewardsActivationThreshold",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "earlyRepay",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct IPoolsController.PoolCreationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedRepayAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "repaymentFee",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedDepositsAfterRepay",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "nextLoanMinStart",
          "type": "uint128"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "establishmentRate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "SetEstablishmentFeeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "distributionRate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "SetLiquidityRewardsDistributionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "maxTokenDeposit",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "SetMaxBorrowableAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "repaymentFeeRate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "SetRepaymentFeeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedRemainingAmountReduction",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "loanedAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "unborrowedRatio",
          "type": "uint128"
        }
      ],
      "name": "TickBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        }
      ],
      "name": "TickInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedPendingDeposit",
          "type": "uint128"
        }
      ],
      "name": "TickLoanDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedAvailableDeposit",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        }
      ],
      "name": "TickNoLoanDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedPendingAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "poolBondIssuanceIndexIncremented",
          "type": "bool"
        }
      ],
      "name": "TickPendingDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedRemainingAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        }
      ],
      "name": "TickRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedAmountToWithdraw",
          "type": "uint128"
        }
      ],
      "name": "TickWithdrawPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedAmountToWithdraw",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "accruedFeesToWithdraw",
          "type": "uint128"
        }
      ],
      "name": "TickWithdrawRemaining",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedAmount",
          "type": "uint128"
        }
      ],
      "name": "TopUpLiquidityRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "allow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "loanAmount",
          "type": "uint128"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowerAuthorizedPools",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "closePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        }
      ],
      "name": "collectFeesForTick",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "contract ILendingPool",
              "name": "yieldProvider",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maxRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rateSpacing",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maxBorrowableAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "loanDuration",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "distributionRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "cooldownPeriod",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "repaymentPeriod",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lateRepayFeePerBondRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "establishmentFeeRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "repaymentFeeRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "liquidityRewardsActivationThreshold",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "earlyRepay",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolsController.PoolCreationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createNewPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "normalizedAmount",
          "type": "uint128"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "adjustedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "disallow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "normalizedBorrowedAmount",
          "type": "uint128"
        },
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "estimateLoanRate",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "estimatedRate",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "name": "getAmountRepartition",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "bondsQuantity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "normalizedDepositedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "getDefaultTimestamp",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "defaultTimestamp",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "getPoolAggregates",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "weightedAverageLendingRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedPendingDeposits",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "getPoolFeeRates",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "establishmentFeeRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "repaymentFeeRate",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "getPoolMaturity",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "poolCurrentMaturity",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "getPoolParameters",
      "outputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "minRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "maxRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rateSpacing",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "maxBorrowableAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "loanDuration",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "liquidityRewardsDistributionRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "cooldownPeriod",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "repaymentPeriod",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lateRepayFeePerBondRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "liquidityRewardsActivationThreshold",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "getPoolState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "defaulted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "closed",
          "type": "bool"
        },
        {
          "internalType": "uint128",
          "name": "currentMaturity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuedQuantity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "normalizedBorrowedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "normalizedAvailableDeposits",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lowerInterestRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "nextLoanMinStart",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "remainingAdjustedLiquidityRewardsReserve",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "yieldProviderLiquidityRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "currentBondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "getProtocolFees",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "earlyRepay",
          "type": "bool"
        }
      ],
      "name": "getRepayAmounts",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "normalizedRepayAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lateRepayFee",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "repaymentFees",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        }
      ],
      "name": "getTickAmounts",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "adjustedTotalAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedRemainingAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsQuantity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedPendingAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "accruedFees",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "pool",
          "type": "string"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        }
      ],
      "name": "getTickLastUpdate",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "lastFeeDistributionTimestamp",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        }
      ],
      "name": "getTickLiquidityRatio",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "liquidityRatio",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "name": "getWithdrawAmounts",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "adjustedAmountToWithdraw",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "depositedAmountToWithdraw",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "remainingBondsQuantity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsMaturity",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "isEarlyRepay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "earlyRepay",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "setDefault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "establishmentFeeRate",
          "type": "uint128"
        },
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "setEstablishmentFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "distributionRate",
          "type": "uint128"
        },
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "setLiquidityRewardsDistributionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "maxBorrowableAmount",
          "type": "uint128"
        },
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "setMaxBorrowableAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "repaymentFeeRate",
          "type": "uint128"
        },
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "setRepaymentFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "topUpLiquidityRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unfreezePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "adjustedAmount",
          "type": "uint128"
        },
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "oldRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "newRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "oldBondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "name": "updateRate",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "newAdjustedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "newBondsIssuanceIndex",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "normalizedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedAmountToWithdraw",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuanceIndex",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "normalizedDepositedAmountToWithdraw",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7872646efe8559aa951fde4aa95abbac3733c714754a5daf3504aea235004763",
  "receipt": {
    "to": null,
    "from": "0xB194467578492D7E928300e38ea8eE0Cf8E2D457",
    "contractAddress": "0xa5A52023d313339969Ca819cd066aBc72685D2B3",
    "transactionIndex": 43,
    "gasUsed": "5271263",
    "logsBloom": "0x
    "blockHash": "0xf2dbbd0b759d52235856bac9ee3b9525a3f1ddddcc989c123ea8d840cf000977",
    "transactionHash": "0x7872646efe8559aa951fde4aa95abbac3733c714754a5daf3504aea235004763",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 29238423,
        "transactionHash": "0x7872646efe8559aa951fde4aa95abbac3733c714754a5daf3504aea235004763",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b194467578492d7e928300e38ea8ee0cf8e2d457",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002f3b22e5c8574930000000000000000000000000000000000000000000000020d74d507b6023b50000000000000000000000000000000000000000000000c12d6af0e5b1a0c56b20000000000000000000000000000000000000000000000020a8122d9597cc6bd000000000000000000000000000000000000000000000c12d9a2c0897691cb45",
        "logIndex": 185,
        "blockHash": "0xf2dbbd0b759d52235856bac9ee3b9525a3f1ddddcc989c123ea8d840cf000977"
      }
    ],
    "blockNumber": 29238423,
    "cumulativeGasUsed": "15048904",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f9f3208b996c2ac392e8851f4d2c6f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BP_BOND_ISSUANCE_ID_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_BORROW_COOLDOWN_PERIOD_NOT_OVER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_BORROW_MAX_BORROWABLE_AMOUNT_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_BORROW_OUT_OF_BOUND_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_BORROW_UNSUFFICIENT_BORROWABLE_AMOUNT_WITHIN_BRACKETS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_EARLY_REPAY_NOT_ACTIVATED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_LOAN_ONGOING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_MULTIPLE_BORROW_AFTER_MATURITY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_NO_DEPOSIT_TO_WITHDRAW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_OUT_OF_BOUND_MAX_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_OUT_OF_BOUND_MIN_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_POOL_CLOSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_POOL_DEFAULTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_POOL_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_RATE_SPACING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_REPAY_NO_ACTIVE_LOAN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_TARGET_BOND_ISSUANCE_INDEX_EMPTY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_UNMATCHED_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MATH_ADDITION_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MATH_DIVISION_BY_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MATH_MULTIPLICATION_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_BORROWER_ALREADY_AUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_DISALLOW_UNMATCHED_BORROWER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_ESTABLISHMENT_FEES_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_NOT_ENOUGH_PROTOCOL_FEES\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_NO_ONGOING_LOAN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_POOL_ALREADY_CLOSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_POOL_ALREADY_SET_FOR_BORROWER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_POOL_DEFAULTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_POOL_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_POOL_TOKEN_NOT_SUPPORTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_RATE_SPACING_COMPLIANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_REPAYMENT_PERIOD_ONGOING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_ZERO_POOL\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedBorrowedAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"establishmentFees\",\"type\":\"uint128\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"BorrowerAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"BorrowerDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimProtocolFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"remainingLiquidityRewards\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"addedAccruedFees\",\"type\":\"uint128\"}],\"name\":\"CollectFeesForTick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"distributedLiquidityRewards\",\"type\":\"uint128\"}],\"name\":\"Default\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedRepayAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"repaymentFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedDepositsAfterRepay\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nextLoanMinStart\",\"type\":\"uint128\"}],\"name\":\"EarlyRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedBorrowedAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"establishmentFees\",\"type\":\"uint128\"}],\"name\":\"FurtherBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedRepayAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"lateRepayFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"repaymentFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedDepositsAfterRepay\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nextLoanMinStart\",\"type\":\"uint128\"}],\"name\":\"LateRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"PoolActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"collectedLiquidityRewards\",\"type\":\"uint128\"}],\"name\":\"PoolClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"yieldProvider\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rateSpacing\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxBorrowableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"loanDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"distributionRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cooldownPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lateRepayFeePerBondRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRewardsActivationThreshold\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"earlyRepay\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IPoolsController.PoolCreationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedRepayAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"repaymentFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedDepositsAfterRepay\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nextLoanMinStart\",\"type\":\"uint128\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"establishmentRate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"SetEstablishmentFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"distributionRate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"SetLiquidityRewardsDistributionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"maxTokenDeposit\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"SetMaxBorrowableAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"repaymentFeeRate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"SetRepaymentFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedRemainingAmountReduction\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"loanedAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"unborrowedRatio\",\"type\":\"uint128\"}],\"name\":\"TickBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"}],\"name\":\"TickInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedPendingDeposit\",\"type\":\"uint128\"}],\"name\":\"TickLoanDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedAvailableDeposit\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"}],\"name\":\"TickNoLoanDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedPendingAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"poolBondIssuanceIndexIncremented\",\"type\":\"bool\"}],\"name\":\"TickPendingDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedRemainingAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"}],\"name\":\"TickRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedAmountToWithdraw\",\"type\":\"uint128\"}],\"name\":\"TickWithdrawPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedAmountToWithdraw\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"accruedFeesToWithdraw\",\"type\":\"uint128\"}],\"name\":\"TickWithdrawRemaining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedAmount\",\"type\":\"uint128\"}],\"name\":\"TopUpLiquidityRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"loanAmount\",\"type\":\"uint128\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowerAuthorizedPools\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"collectFeesForTick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"yieldProvider\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rateSpacing\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxBorrowableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"loanDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"distributionRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cooldownPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lateRepayFeePerBondRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRewardsActivationThreshold\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"earlyRepay\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolsController.PoolCreationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createNewPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"normalizedAmount\",\"type\":\"uint128\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"adjustedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuanceIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"disallow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"normalizedBorrowedAmount\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"estimateLoanRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"estimatedRate\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuanceIndex\",\"type\":\"uint128\"}],\"name\":\"getAmountRepartition\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"bondsQuantity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"normalizedDepositedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"getDefaultTimestamp\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"defaultTimestamp\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"getPoolAggregates\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"weightedAverageLendingRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedPendingDeposits\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"getPoolFeeRates\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentFeeRate\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"getPoolMaturity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"poolCurrentMaturity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"getPoolParameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rateSpacing\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxBorrowableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"loanDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRewardsDistributionRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cooldownPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lateRepayFeePerBondRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRewardsActivationThreshold\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"getPoolState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"defaulted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"currentMaturity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuedQuantity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"normalizedBorrowedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"normalizedAvailableDeposits\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lowerInterestRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nextLoanMinStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"remainingAdjustedLiquidityRewardsReserve\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"yieldProviderLiquidityRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentBondsIssuanceIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"getProtocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"earlyRepay\",\"type\":\"bool\"}],\"name\":\"getRepayAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"normalizedRepayAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lateRepayFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentFees\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"getTickAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"adjustedTotalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedRemainingAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsQuantity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedPendingAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"accruedFees\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pool\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"getTickLastUpdate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastFeeDistributionTimestamp\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"getTickLiquidityRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityRatio\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuanceIndex\",\"type\":\"uint128\"}],\"name\":\"getWithdrawAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"adjustedAmountToWithdraw\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"depositedAmountToWithdraw\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"remainingBondsQuantity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsMaturity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"isEarlyRepay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"earlyRepay\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"setDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"setEstablishmentFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"distributionRate\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"setLiquidityRewardsDistributionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"maxBorrowableAmount\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"setMaxBorrowableAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"repaymentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"setRepaymentFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"topUpLiquidityRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreezePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"adjustedAmount\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"oldRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"oldBondsIssuanceIndex\",\"type\":\"uint128\"}],\"name\":\"updateRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"newAdjustedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newBondsIssuanceIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"normalizedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedAmountToWithdraw\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuanceIndex\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"normalizedDepositedAmountToWithdraw\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allow(address,bytes32)\":{\"params\":{\"borrowerAddress\":\"The address to allow\",\"poolHash\":\"The identifier of the pool*\"}},\"borrow(address,uint128)\":{\"params\":{\"loanAmount\":\"The total amount of the loan*\",\"to\":\"The address to which the borrowed funds should be sent.\"}},\"claimProtocolFees(bytes32,uint128,address)\":{\"params\":{\"amount\":\"The amount of tokens claimed\",\"poolHash\":\"The identifier of the pool\",\"to\":\"The address receiving the fees*\"}},\"closePool(bytes32,address)\":{\"params\":{\"poolHash\":\"The identifier of the pool*\"}},\"collectFees(bytes32)\":{\"params\":{\"poolHash\":\"The identifier of the pool*\"}},\"collectFeesForTick(bytes32,uint128)\":{\"params\":{\"poolHash\":\"The identifier of the pool*\"}},\"createNewPool((bytes32,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))\":{\"params\":{\"params\":\"The parameters of the new pool*\"}},\"deposit(uint128,bytes32,address,address,uint128)\":{\"params\":{\"normalizedAmount\":\"The amount of the given asset to deposit\",\"poolHash\":\"The identifier of the pool\",\"rate\":\"The rate at which to bid for a bond\",\"sender\":\"The lender address who calls the deposit function on the Position\",\"underlyingToken\":\"Contract' address of the token to be deposited\"},\"returns\":{\"adjustedAmount\":\"Deposited amount adjusted with current liquidity index\",\"bondsIssuanceIndex\":\"The identifier of the borrow group to which the deposit has been allocated*\"}},\"disallow(address,bytes32)\":{\"params\":{\"borrowerAddress\":\"The address to disallow\",\"poolHash\":\"The identifier of the pool*\"}},\"estimateLoanRate(uint128,bytes32)\":{\"params\":{\"normalizedBorrowedAmount\":\"The amount to be borrowed from the pool\",\"poolHash\":\"The identifier of the pool\"},\"returns\":{\"estimatedRate\":\"The estimated loan rate for the current state of the pool*\"}},\"getAmountRepartition(bytes32,uint128,uint128,uint128)\":{\"params\":{\"adjustedAmount\":\"Adjusted amount of tokens currently on third party yield provider\",\"bondsIssuanceIndex\":\"The identifier of the borrow group\",\"poolHash\":\"The identifier of the pool\",\"rate\":\"Tick's rate\"},\"returns\":{\"bondsQuantity\":\"Quantity of bonds held\",\"normalizedDepositedAmount\":\"Amount of deposit currently on third party yield provider*\"}},\"getDefaultTimestamp(bytes32)\":{\"returns\":{\"defaultTimestamp\":\"The timestamp at which the pool was defaulted*\"}},\"getPoolAggregates(bytes32)\":{\"params\":{\"poolHash\":\"The identifier of the pool\"},\"returns\":{\"adjustedPendingDeposits\":\"Amount of tokens deposited after bond issuance and currently on third party yield provider*\",\"weightedAverageLendingRate\":\"The average deposit bidding rate in the order book\"}},\"getPoolFeeRates(bytes32)\":{\"returns\":{\"establishmentFeeRate\":\"Amount of fees paid to the protocol at borrow time\",\"repaymentFeeRate\":\"Amount of fees paid to the protocol at repay time*\"}},\"getPoolMaturity(bytes32)\":{\"params\":{\"poolHash\":\"The identifier of the pool\"},\"returns\":{\"poolCurrentMaturity\":\"The pool's current maturity*\"}},\"getPoolParameters(bytes32)\":{\"params\":{\"poolHash\":\"The identifier of the pool\"},\"returns\":{\"cooldownPeriod\":\"Period after a loan during which a borrower cannot take another loan\",\"lateRepayFeePerBondRate\":\"Penalty a borrower has to pay when it repays late\",\"liquidityRewardsActivationThreshold\":\"Minimum amount of liqudity rewards a borrower has to deposit to active the pool*\",\"liquidityRewardsDistributionRate\":\"Rate at which liquidity rewards are distributed to lenders\",\"loanDuration\":\"Duration of a loan in the pool\",\"maxBorrowableAmount\":\"Maximum amount of tokens that can be borrowed from the pool\",\"maxRate\":\"Maximum rate of deposits accepted in the pool\",\"minRate\":\"Minimum rate of deposits accepted in the pool\",\"rateSpacing\":\"Difference between two rates in the pool\",\"repaymentPeriod\":\"Period after a loan end during which a borrower can repay without penalty\",\"underlyingToken\":\"Address of the underlying token of the pool\"}},\"getPoolState(bytes32)\":{\"params\":{\"poolHash\":\"The identifier of the pool\"},\"returns\":{\"active\":\"Signals if a pool is active and ready to accept deposits\",\"bondsIssuedQuantity\":\"Amount of bonds issued, to be repaid at maturity\",\"closed\":\"Signals if a pool was closed\",\"currentBondsIssuanceIndex\":\"Current borrow period identifier of the pool*\",\"currentMaturity\":\"End timestamp of current loan\",\"defaulted\":\"Signals if a pool was defaulted\",\"lowerInterestRate\":\"Minimum rate at which a deposit was made\",\"nextLoanMinStart\":\"Cool down period, minimum timestamp after which a new loan can be taken\",\"normalizedAvailableDeposits\":\"Actual amount of tokens available to be borrowed\",\"normalizedBorrowedAmount\":\"Actual amount of tokens that were borrowed\",\"remainingAdjustedLiquidityRewardsReserve\":\"Remaining liquidity rewards to be distributed to lenders\",\"yieldProviderLiquidityRatio\":\"Last recorded yield provider liquidity ratio\"}},\"getRepayAmounts(bytes32,bool)\":{\"params\":{\"poolHash\":\"The identifier of the pool\"},\"returns\":{\"normalizedRepayAmount\":\"Total repay amount*\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTickAmounts(bytes32,uint128)\":{\"params\":{\"poolHash\":\"The identifier of the pool\",\"rate\":\"The tick rate from which to get data\"},\"returns\":{\"accruedFees\":\"The total fees claimable in the current tick, either from yield provider interests or liquidity rewards accrual*\",\"adjustedPendingAmount\":\"Amount of deposit in tick deposited with the underlying yield provider that were deposited after bond issuance\",\"adjustedRemainingAmount\":\"Amount of tokens in tick deposited with the underlying yield provider that were deposited before bond issuance\",\"adjustedTotalAmount\":\"Total amount of deposit in the tick, excluding the pending amounts\",\"atlendisLiquidityRatio\":\"The liquidity ratio of the given tick\",\"bondsQuantity\":\"The quantity of bonds within the tick\"}},\"getTickLastUpdate(string,uint128)\":{\"params\":{\"pool\":\"The identifier of the pool pool\",\"rate\":\"The tick rate from which to get data\"},\"returns\":{\"lastFeeDistributionTimestamp\":\"Timestamp of the last fee's distribution to the tick*\"}},\"getTickLiquidityRatio(bytes32,uint128)\":{\"params\":{\"poolHash\":\"The identifier of the pool\",\"rate\":\"The tick rate from which to extract the liquidity ratio\"},\"returns\":{\"liquidityRatio\":\"The liquidity ratio of the given tick*\"}},\"getWithdrawAmounts(bytes32,uint128,uint128,uint128)\":{\"details\":\"This method is meant to be used exclusively with the withdraw() method Under certain circumstances, this method can return incorrect values, that would otherwise be rejected by the checks made in the withdraw() method\",\"params\":{\"adjustedAmount\":\"The amount of tokens in the position, adjusted to the deposit liquidity ratio\",\"bondsIssuanceIndex\":\"An index determining deposit timing\",\"poolHash\":\"The identifier of the pool\",\"rate\":\"The rate the position is bidding for\"},\"returns\":{\"adjustedAmountToWithdraw\":\"The amount of tokens to withdraw, adjuste for borrow pool use\",\"bondsMaturity\":\"The maturity of bonds remaining within the position after withdraw*\",\"depositedAmountToWithdraw\":\"The amount of tokens to withdraw, adjuste for position use\",\"remainingBondsQuantity\":\"The quantity of bonds remaining within the position\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isEarlyRepay(bytes32)\":{\"returns\":{\"earlyRepay\":\"Flag that signifies whether the early repay feature is activated or not*\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setDefault(bytes32)\":{\"params\":{\"poolHash\":\"The identifier of the pool to default*\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"topUpLiquidityRewards(uint128)\":{\"params\":{\"amount\":\"Amount of tokens that will be add up to the pool's liquidity rewards reserve*\"}},\"updateRate(uint128,bytes32,uint128,uint128,uint128)\":{\"params\":{\"adjustedAmount\":\"The adjusted balance of tokens of the given position\",\"newRate\":\"The new rate of the position\",\"oldBondsIssuanceIndex\":\"The identifier of the borrow group from the given position\",\"oldRate\":\"The current rate of the position\",\"poolHash\":\"The identifier of the pool\"},\"returns\":{\"newAdjustedAmount\":\"The updated amount of tokens of the position adjusted by the new tick's global liquidity ratio\",\"newBondsIssuanceIndex\":\"The new borrow group id to which the updated position is linked*\"}},\"withdraw(bytes32,uint128,uint128,uint128,address)\":{\"params\":{\"adjustedAmountToWithdraw\":\"The actual amount of tokens to withdraw from the position\",\"bondsIssuanceIndex\":\"An index determining deposit timing\",\"owner\":\"The address to which the withdrawns funds are sent\",\"poolHash\":\"The identifier of the pool\",\"rate\":\"The rate the position is bidding for\"},\"returns\":{\"normalizedDepositedAmountToWithdraw\":\"Actual amount of tokens withdrawn and sent to the lender*\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Borrow(bytes32,uint128,uint128)\":{\"notice\":\"Emitted after a successful borrow\"},\"BorrowerAllowed(address,bytes32)\":{\"notice\":\"Emitted after a borrower address was allowed to borrow from a pool\"},\"BorrowerDisallowed(address,bytes32)\":{\"notice\":\"Emitted after a borrower address was disallowed to borrow from a pool\"},\"ClaimProtocolFees(bytes32,uint128,address)\":{\"notice\":\"Emitted after governance claims the fees associated with a pool\"},\"CollectFeesForTick(bytes32,uint128,uint128,uint128)\":{\"notice\":\"Emitted when liquidity rewards are distributed to a tick\"},\"Default(bytes32,uint128)\":{\"notice\":\"Emitted when a pool defaults on its loan repayment\"},\"EarlyRepay(bytes32,uint128,uint128,uint128,uint128)\":{\"notice\":\"Emitted after a successful early repay\"},\"FurtherBorrow(bytes32,uint128,uint128)\":{\"notice\":\"Emitted after a successful further borrow\"},\"LateRepay(bytes32,uint128,uint128,uint128,uint128,uint128)\":{\"notice\":\"Emitted after a successful repay, made after the repayment period Includes a late repay fee\"},\"PoolActivated(bytes32)\":{\"notice\":\"Emitted when a pool is active, i.e. after the borrower deposits enough tokens in its pool liquidity rewards reserve as agreed before the pool creation\"},\"PoolClosed(bytes32,uint128)\":{\"notice\":\"Emitted after pool is closed\"},\"PoolCreated((bytes32,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))\":{\"notice\":\"Emitted after a pool was creted*\"},\"Repay(bytes32,uint128,uint128,uint128,uint128)\":{\"notice\":\"Emitted after a successful repay\"},\"SetEstablishmentFeeRate(uint128,bytes32)\":{\"notice\":\"Emitted after governance sets the establishment fee for a pool*\"},\"SetLiquidityRewardsDistributionRate(uint128,bytes32)\":{\"notice\":\"Emitted after governance sets the liquidity rewards distribution rate for a pool*\"},\"SetMaxBorrowableAmount(uint128,bytes32)\":{\"notice\":\"Emitted after governance sets the maximum borrowable amount for a pool*\"},\"SetRepaymentFeeRate(uint128,bytes32)\":{\"notice\":\"Emitted after governance sets the repayment fee for a pool*\"},\"TickBorrow(bytes32,uint128,uint128,uint128,uint128,uint128)\":{\"notice\":\"Emitted when a borrow successfully impacts a tick\"},\"TickInitialized(bytes32,uint128,uint128)\":{\"notice\":\"Emitted when a tick is initialized, i.e. when its first deposited in\"},\"TickLoanDeposit(bytes32,uint128,uint128)\":{\"notice\":\"Emitted after a deposit on a tick that was done during a loan\"},\"TickNoLoanDeposit(bytes32,uint128,uint128,uint128)\":{\"notice\":\"Emitted after a deposit on a tick that was done without an active loan\"},\"TickPendingDeposit(bytes32,uint128,uint128,bool)\":{\"notice\":\"Emitted when pending amounts are merged with the rest of the pool during a repay\"},\"TickRepay(bytes32,uint128,uint128,uint128)\":{\"notice\":\"Emitted when funds from a tick are repaid by the borrower\"},\"TickWithdrawPending(bytes32,uint128,uint128)\":{\"notice\":\"Emitted when a withdraw is done outside of a loan on the tick\"},\"TickWithdrawRemaining(bytes32,uint128,uint128,uint128,uint128)\":{\"notice\":\"Emitted when a withdraw is done during a loan on the tick\"},\"TopUpLiquidityRewards(bytes32,uint128)\":{\"notice\":\"Emitted after a borrower successfully deposits tokens in its pool liquidity rewards reserve\"}},\"kind\":\"user\",\"methods\":{\"allow(address,bytes32)\":{\"notice\":\"Allow an address to interact with a borrower pool\"},\"borrow(address,uint128)\":{\"notice\":\"Called by the borrower to sell bonds to the order book. The affected ticks get updated according the amount of bonds sold.\"},\"claimProtocolFees(bytes32,uint128,address)\":{\"notice\":\"Withdraws protocol fees to a target address\"},\"closePool(bytes32,address)\":{\"notice\":\"Flags the pool as closed\"},\"collectFees(bytes32)\":{\"notice\":\"Collect yield provider fees as well as liquidity rewards for the whole pool Iterates over all pool initialized ticks\"},\"collectFeesForTick(bytes32,uint128)\":{\"notice\":\"Collect yield provider fees as well as liquidity rewards for the target tick\"},\"createNewPool((bytes32,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))\":{\"notice\":\"Creates a new pool\"},\"deposit(uint128,bytes32,address,address,uint128)\":{\"notice\":\"Gets called within the Position.deposit() function and enables a lender to deposit assets into a given pool's order book. The lender specifies a rate (price) at which it is willing to lend out its assets (bid on the zero coupon bond). The full amount will initially be deposited on the underlying yield provider until the borrower sells bonds at the specified rate.\"},\"disallow(address,bytes32)\":{\"notice\":\"Remove borrower pool interaction rights from an address\"},\"estimateLoanRate(uint128,bytes32)\":{\"notice\":\"Estimates the lending rate corresponding to the input amount, depending on the current state of the pool\"},\"freezePool()\":{\"notice\":\"Stops all actions on all pools*\"},\"getAmountRepartition(bytes32,uint128,uint128,uint128)\":{\"notice\":\"Returns the token amount's repartition between bond quantity and normalized deposited amount currently placed on third party yield provider\"},\"getDefaultTimestamp(bytes32)\":{\"notice\":\"Returns the state of a pool\"},\"getPoolAggregates(bytes32)\":{\"notice\":\"Returns the current state of the pool's parameters\"},\"getPoolFeeRates(bytes32)\":{\"notice\":\"Returns the fee rates of a pool\"},\"getPoolMaturity(bytes32)\":{\"notice\":\"Returns the current maturity of the pool\"},\"getPoolParameters(bytes32)\":{\"notice\":\"Returns the parameters of a pool\"},\"getPoolState(bytes32)\":{\"notice\":\"Returns the state of a pool\"},\"getRepayAmounts(bytes32,bool)\":{\"notice\":\"Returns the total amount a borrower has to repay to a pool. Includes borrowed amount, late repay fees and protocol fees\"},\"getTickAmounts(bytes32,uint128)\":{\"notice\":\"Returns the repartition between bonds and deposits of the given tick.\"},\"getTickLastUpdate(string,uint128)\":{\"notice\":\"Returns the timestamp of the last fee distribution to the tick\"},\"getTickLiquidityRatio(bytes32,uint128)\":{\"notice\":\"Returns the liquidity ratio of a given tick in a pool's order book. The liquidity ratio is an accounting construct to deduce the accrued interest over time.\"},\"getWithdrawAmounts(bytes32,uint128,uint128,uint128)\":{\"notice\":\"Gets called within the Position.withdraw() function and enables a lender to evaluate the exact amount of tokens it is allowed to withdraw\"},\"isEarlyRepay(bytes32)\":{\"notice\":\"Returns the state of a pool\"},\"repay()\":{\"notice\":\"Repays a currently outstanding bonds of the given pool.*\"},\"setDefault(bytes32)\":{\"notice\":\"Flags the pool as defaulted\"},\"setEstablishmentFeeRate(uint128,bytes32)\":{\"notice\":\"Set the pool establishment protocol fee rate*\"},\"setLiquidityRewardsDistributionRate(uint128,bytes32)\":{\"notice\":\"Set the pool liquidity rewards distribution rate*\"},\"setMaxBorrowableAmount(uint128,bytes32)\":{\"notice\":\"Set the maximum amount of tokens that can be borrowed in the target pool*\"},\"setRepaymentFeeRate(uint128,bytes32)\":{\"notice\":\"Set the pool repayment protocol fee rate*\"},\"topUpLiquidityRewards(uint128)\":{\"notice\":\"Called by the borrower to top up liquidity rewards' reserve that is distributed to liquidity providers at the pre-defined distribution rate.\"},\"unfreezePool()\":{\"notice\":\"Cancel a freeze, makes actions available again on all pools*\"},\"updateRate(uint128,bytes32,uint128,uint128,uint128)\":{\"notice\":\"Gets called within Position.updateRate() and updates the order book ticks affected by the position updating its rate. This is only possible as long as there are no bonds in the position, i.e the full position currently lies with the yield provider\"},\"withdraw(bytes32,uint128,uint128,uint128,address)\":{\"notice\":\"Gets called within the Position.withdraw() function and enables a lender to withdraw assets that are deposited with the underlying yield provider\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BorrowerPools.sol\":\"BorrowerPools\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender ;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf03ccb734debc7cb7a5f87c4a9059e39d843f2873ab8df115586580c94a4f4cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/BorrowerPools.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IBorrowerPools.sol\\\";\\n\\nimport \\\"./extensions/AaveILendingPool.sol\\\";\\nimport \\\"./lib/Errors.sol\\\";\\nimport \\\"./lib/PoolLogic.sol\\\";\\nimport \\\"./lib/Scaling.sol\\\";\\nimport \\\"./lib/Types.sol\\\";\\nimport \\\"./lib/Uint128WadRayMath.sol\\\";\\n\\nimport \\\"./PoolsController.sol\\\";\\n\\ncontract BorrowerPools is PoolsController, IBorrowerPools {\\n  using PoolLogic for Types.Pool;\\n  using Scaling for uint128;\\n  using Uint128WadRayMath for uint128;\\n\\n  function initialize(address governance) public initializer {\\n    _initialize();\\n    if (governance == address(0)) {\\n      // Prevent setting governance to null account\\n      governance = _msgSender();\\n    }\\n    _grantRole(DEFAULT_ADMIN_ROLE, governance);\\n    _grantRole(Roles.GOVERNANCE_ROLE, governance);\\n    _setRoleAdmin(Roles.BORROWER_ROLE, Roles.GOVERNANCE_ROLE);\\n    _setRoleAdmin(Roles.POSITION_ROLE, Roles.GOVERNANCE_ROLE);\\n  }\\n\\n  // VIEW METHODS\\n\\n  /**\\n   * @notice Returns the liquidity ratio of a given tick in a pool's order book.\\n   * The liquidity ratio is an accounting construct to deduce the accrued interest over time.\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick rate from which to extract the liquidity ratio\\n   * @return liquidityRatio The liquidity ratio of the given tick\\n   **/\\n  function getTickLiquidityRatio(bytes32 poolHash, uint128 rate) public view override returns (uint128 liquidityRatio) {\\n    liquidityRatio = pools[poolHash].ticks[rate].atlendisLiquidityRatio;\\n    if (liquidityRatio == 0) {\\n      liquidityRatio = uint128(PoolLogic.RAY);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the repartition between bonds and deposits of the given tick.\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick rate from which to get data\\n   * @return adjustedTotalAmount Total amount of deposit in the tick, excluding\\n   * the pending amounts\\n   * @return adjustedRemainingAmount Amount of tokens in tick deposited with the\\n   * underlying yield provider that were deposited before bond issuance\\n   * @return bondsQuantity The quantity of bonds within the tick\\n   * @return adjustedPendingAmount Amount of deposit in tick deposited with the\\n   * underlying yield provider that were deposited after bond issuance\\n   * @return atlendisLiquidityRatio The liquidity ratio of the given tick\\n   * @return accruedFees The total fees claimable in the current tick, either from\\n   * yield provider interests or liquidity rewards accrual\\n   **/\\n  function getTickAmounts(bytes32 poolHash, uint128 rate)\\n    public\\n    view\\n    override\\n    returns (\\n      uint128 adjustedTotalAmount,\\n      uint128 adjustedRemainingAmount,\\n      uint128 bondsQuantity,\\n      uint128 adjustedPendingAmount,\\n      uint128 atlendisLiquidityRatio,\\n      uint128 accruedFees\\n    )\\n  {\\n    Types.Tick storage tick = pools[poolHash].ticks[rate];\\n    return (\\n      tick.adjustedTotalAmount,\\n      tick.adjustedRemainingAmount,\\n      tick.bondsQuantity,\\n      tick.adjustedPendingAmount,\\n      tick.atlendisLiquidityRatio,\\n      tick.accruedFees\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the timestamp of the last fee distribution to the tick\\n   * @param pool The identifier of the pool pool\\n   * @param rate The tick rate from which to get data\\n   * @return lastFeeDistributionTimestamp Timestamp of the last fee's distribution to the tick\\n   **/\\n  function getTickLastUpdate(string calldata pool, uint128 rate)\\n    public\\n    view\\n    override\\n    returns (uint128 lastFeeDistributionTimestamp)\\n  {\\n    Types.Tick storage tick = pools[keccak256(abi.encode(pool))].ticks[rate];\\n    return tick.lastFeeDistributionTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the current state of the pool's parameters\\n   * @param poolHash The identifier of the pool\\n   * @return weightedAverageLendingRate The average deposit bidding rate in the order book\\n   * @return adjustedPendingDeposits Amount of tokens deposited after bond\\n   * issuance and currently on third party yield provider\\n   **/\\n  function getPoolAggregates(bytes32 poolHash)\\n    external\\n    view\\n    override\\n    returns (uint128 weightedAverageLendingRate, uint128 adjustedPendingDeposits)\\n  {\\n    Types.Pool storage pool = pools[poolHash];\\n    Types.PoolParameters storage parameters = pools[poolHash].parameters;\\n\\n    adjustedPendingDeposits = 0;\\n\\n    if (pool.state.currentMaturity == 0) {\\n      weightedAverageLendingRate = estimateLoanRate(pool.parameters.MAX_BORROWABLE_AMOUNT, poolHash);\\n    } else {\\n      uint128 amountWeightedRate = 0;\\n      uint128 totalAmount = 0;\\n      uint128 rate = parameters.MIN_RATE;\\n      for (rate; rate != parameters.MAX_RATE + parameters.RATE_SPACING; rate += parameters.RATE_SPACING) {\\n        amountWeightedRate += pool.ticks[rate].normalizedLoanedAmount.wadMul(rate);\\n        totalAmount += pool.ticks[rate].normalizedLoanedAmount;\\n        adjustedPendingDeposits += pool.ticks[rate].adjustedPendingAmount;\\n      }\\n      weightedAverageLendingRate = amountWeightedRate.wadDiv(totalAmount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the current maturity of the pool\\n   * @param poolHash The identifier of the pool\\n   * @return poolCurrentMaturity The pool's current maturity\\n   **/\\n  function getPoolMaturity(bytes32 poolHash) public view override returns (uint128 poolCurrentMaturity) {\\n    return pools[poolHash].state.currentMaturity;\\n  }\\n\\n  /**\\n   * @notice Estimates the lending rate corresponding to the input amount,\\n   * depending on the current state of the pool\\n   * @param normalizedBorrowedAmount The amount to be borrowed from the pool\\n   * @param poolHash The identifier of the pool\\n   * @return estimatedRate The estimated loan rate for the current state of the pool\\n   **/\\n  function estimateLoanRate(uint128 normalizedBorrowedAmount, bytes32 poolHash)\\n    public\\n    view\\n    override\\n    returns (uint128 estimatedRate)\\n  {\\n    Types.Pool storage pool = pools[poolHash];\\n    Types.PoolParameters storage parameters = pool.parameters;\\n\\n    if (pool.state.currentMaturity > 0 || pool.state.defaulted || pool.state.closed || !pool.state.active) {\\n      return 0;\\n    }\\n\\n    if (normalizedBorrowedAmount > pool.parameters.MAX_BORROWABLE_AMOUNT) {\\n      normalizedBorrowedAmount = pool.parameters.MAX_BORROWABLE_AMOUNT;\\n    }\\n\\n    uint128 yieldProviderLiquidityRatio = uint128(\\n      parameters.YIELD_PROVIDER.getReserveNormalizedIncome(address(parameters.UNDERLYING_TOKEN))\\n    );\\n    uint128 rate = pool.parameters.MIN_RATE;\\n    uint128 normalizedRemainingAmount = normalizedBorrowedAmount;\\n    uint128 amountWeightedRate = 0;\\n    for (rate; rate != parameters.MAX_RATE + parameters.RATE_SPACING; rate += parameters.RATE_SPACING) {\\n      (uint128 atlendisLiquidityRatio, , , ) = pool.peekFeesForTick(rate, yieldProviderLiquidityRatio);\\n      uint128 tickAmount = pool.ticks[rate].adjustedRemainingAmount.wadRayMul(atlendisLiquidityRatio);\\n      if (tickAmount < normalizedRemainingAmount) {\\n        normalizedRemainingAmount -= tickAmount;\\n        amountWeightedRate += tickAmount.wadMul(rate);\\n      } else {\\n        amountWeightedRate += normalizedRemainingAmount.wadMul(rate);\\n        normalizedRemainingAmount = 0;\\n        break;\\n      }\\n    }\\n    if (normalizedBorrowedAmount == normalizedRemainingAmount) {\\n      return 0;\\n    }\\n    estimatedRate = amountWeightedRate.wadDiv(normalizedBorrowedAmount - normalizedRemainingAmount);\\n  }\\n\\n  /**\\n   * @notice Returns the token amount's repartition between bond quantity and normalized\\n   * deposited amount currently placed on third party yield provider\\n   * @param poolHash The identifier of the pool\\n   * @param rate Tick's rate\\n   * @param adjustedAmount Adjusted amount of tokens currently on third party yield provider\\n   * @param bondsIssuanceIndex The identifier of the borrow group\\n   * @return bondsQuantity Quantity of bonds held\\n   * @return normalizedDepositedAmount Amount of deposit currently on third party yield provider\\n   **/\\n  function getAmountRepartition(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  ) public view override returns (uint128 bondsQuantity, uint128 normalizedDepositedAmount) {\\n    Types.Pool storage pool = pools[poolHash];\\n    uint128 yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome(address(pool.parameters.UNDERLYING_TOKEN))\\n    );\\n\\n    if (bondsIssuanceIndex > pool.state.currentBondsIssuanceIndex) {\\n      return (0, adjustedAmount.wadRayMul(yieldProviderLiquidityRatio));\\n    }\\n\\n    uint128 adjustedDepositedAmount;\\n    (bondsQuantity, adjustedDepositedAmount) = pool.computeAmountRepartitionForTick(\\n      rate,\\n      adjustedAmount,\\n      bondsIssuanceIndex\\n    );\\n\\n    (uint128 atlendisLiquidityRatio, uint128 accruedFees, , ) = pool.peekFeesForTick(rate, yieldProviderLiquidityRatio);\\n    uint128 accruedFeesShare = pool.peekAccruedFeesShare(rate, adjustedDepositedAmount, accruedFees);\\n    normalizedDepositedAmount = adjustedDepositedAmount.wadRayMul(atlendisLiquidityRatio) + accruedFeesShare;\\n  }\\n\\n  /**\\n   * @notice Returns the total amount a borrower has to repay to a pool. Includes borrowed\\n   * amount, late repay fees and protocol fees\\n   * @param poolHash The identifier of the pool\\n   * @return normalizedRepayAmount Total repay amount\\n   **/\\n  function getRepayAmounts(bytes32 poolHash, bool earlyRepay)\\n    public\\n    view\\n    override\\n    returns (\\n      uint128 normalizedRepayAmount,\\n      uint128 lateRepayFee,\\n      uint128 repaymentFees\\n    )\\n  {\\n    uint128 preFeeRepayAmount = pools[poolHash].getRepayValue(earlyRepay);\\n    lateRepayFee = pools[poolHash].getLateRepayFeePerBond().wadMul(preFeeRepayAmount);\\n    repaymentFees = pools[poolHash].getRepaymentFees(preFeeRepayAmount + lateRepayFee);\\n    normalizedRepayAmount = preFeeRepayAmount + repaymentFees + lateRepayFee;\\n  }\\n\\n  // LENDER METHODS\\n\\n  /**\\n   * @notice Gets called within the Position.deposit() function and enables a lender to deposit assets\\n   * into a given pool's order book. The lender specifies a rate (price) at which it is willing to\\n   * lend out its assets (bid on the zero coupon bond). The full amount will initially be deposited\\n   * on the underlying yield provider until the borrower sells bonds at the specified rate.\\n   * @param normalizedAmount The amount of the given asset to deposit\\n   * @param rate The rate at which to bid for a bond\\n   * @param poolHash The identifier of the pool\\n   * @param underlyingToken Contract' address of the token to be deposited\\n   * @param sender The lender address who calls the deposit function on the Position\\n   * @return adjustedAmount Deposited amount adjusted with current liquidity index\\n   * @return bondsIssuanceIndex The identifier of the borrow group to which the deposit has been allocated\\n   **/\\n  function deposit(\\n    uint128 rate,\\n    bytes32 poolHash,\\n    address underlyingToken,\\n    address sender,\\n    uint128 normalizedAmount\\n  )\\n    public\\n    override\\n    whenNotPaused\\n    onlyRole(Roles.POSITION_ROLE)\\n    returns (uint128 adjustedAmount, uint128 bondsIssuanceIndex)\\n  {\\n    Types.Pool storage pool = pools[poolHash];\\n    if (pool.state.defaulted) {\\n      revert Errors.BP_POOL_DEFAULTED();\\n    }\\n    if (!pool.state.active) {\\n      revert Errors.BP_POOL_NOT_ACTIVE();\\n    }\\n    if (pool.state.closed) {\\n      revert Errors.BP_POOL_CLOSED();\\n    }\\n    if (underlyingToken != pool.parameters.UNDERLYING_TOKEN) {\\n      revert Errors.BP_UNMATCHED_TOKEN();\\n    }\\n    if (rate < pool.parameters.MIN_RATE) {\\n      revert Errors.BP_OUT_OF_BOUND_MIN_RATE();\\n    }\\n    if (rate > pool.parameters.MAX_RATE) {\\n      revert Errors.BP_OUT_OF_BOUND_MAX_RATE();\\n    }\\n    if ((rate - pool.parameters.MIN_RATE) % pool.parameters.RATE_SPACING != 0) {\\n      revert Errors.BP_RATE_SPACING();\\n    }\\n    adjustedAmount = 0;\\n    bondsIssuanceIndex = 0;\\n    (adjustedAmount, bondsIssuanceIndex) = pool.depositToTick(rate, normalizedAmount);\\n    pool.depositToYieldProvider(sender, normalizedAmount);\\n  }\\n\\n  /**\\n   * @notice Gets called within the Position.withdraw() function and enables a lender to\\n   * evaluate the exact amount of tokens it is allowed to withdraw\\n   * @dev This method is meant to be used exclusively with the withdraw() method\\n   * Under certain circumstances, this method can return incorrect values, that would otherwise\\n   * be rejected by the checks made in the withdraw() method\\n   * @param poolHash The identifier of the pool\\n   * @param rate The rate the position is bidding for\\n   * @param adjustedAmount The amount of tokens in the position, adjusted to the deposit liquidity ratio\\n   * @param bondsIssuanceIndex An index determining deposit timing\\n   * @return adjustedAmountToWithdraw The amount of tokens to withdraw, adjuste for borrow pool use\\n   * @return depositedAmountToWithdraw The amount of tokens to withdraw, adjuste for position use\\n   * @return remainingBondsQuantity The quantity of bonds remaining within the position\\n   * @return bondsMaturity The maturity of bonds remaining within the position after withdraw\\n   **/\\n  function getWithdrawAmounts(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  )\\n    public\\n    view\\n    override\\n    returns (\\n      uint128 adjustedAmountToWithdraw,\\n      uint128 depositedAmountToWithdraw,\\n      uint128 remainingBondsQuantity,\\n      uint128 bondsMaturity\\n    )\\n  {\\n    Types.Pool storage pool = pools[poolHash];\\n    if (!pool.state.active) {\\n      revert Errors.BP_POOL_NOT_ACTIVE();\\n    }\\n\\n    (remainingBondsQuantity, adjustedAmountToWithdraw) = pool.computeAmountRepartitionForTick(\\n      rate,\\n      adjustedAmount,\\n      bondsIssuanceIndex\\n    );\\n\\n    // return amount adapted to bond index\\n    depositedAmountToWithdraw = adjustedAmountToWithdraw.wadRayDiv(\\n      pool.getBondIssuanceMultiplierForTick(rate, bondsIssuanceIndex)\\n    );\\n    bondsMaturity = pool.state.currentMaturity;\\n  }\\n\\n  /**\\n   * @notice Gets called within the Position.withdraw() function and enables a lender to\\n   * withdraw assets that are deposited with the underlying yield provider\\n   * @param poolHash The identifier of the pool\\n   * @param rate The rate the position is bidding for\\n   * @param adjustedAmountToWithdraw The actual amount of tokens to withdraw from the position\\n   * @param bondsIssuanceIndex An index determining deposit timing\\n   * @param owner The address to which the withdrawns funds are sent\\n   * @return normalizedDepositedAmountToWithdraw Actual amount of tokens withdrawn and sent to the lender\\n   **/\\n  function withdraw(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 bondsIssuanceIndex,\\n    address owner\\n  ) public override whenNotPaused onlyRole(Roles.POSITION_ROLE) returns (uint128 normalizedDepositedAmountToWithdraw) {\\n    Types.Pool storage pool = pools[poolHash];\\n\\n    if (bondsIssuanceIndex > (pool.state.currentBondsIssuanceIndex + 1)) {\\n      revert Errors.BP_BOND_ISSUANCE_ID_TOO_HIGH();\\n    }\\n    bool isPendingDeposit = bondsIssuanceIndex > pool.state.currentBondsIssuanceIndex;\\n\\n    if (\\n      !((!(isPendingDeposit) && pool.ticks[rate].adjustedRemainingAmount > 0) ||\\n        (isPendingDeposit && pool.ticks[rate].adjustedPendingAmount > 0))\\n    ) {\\n      revert Errors.BP_TARGET_BOND_ISSUANCE_INDEX_EMPTY();\\n    }\\n    if (adjustedAmountToWithdraw <= 0) {\\n      revert Errors.BP_NO_DEPOSIT_TO_WITHDRAW();\\n    }\\n\\n    normalizedDepositedAmountToWithdraw = pool.withdrawDepositedAmountForTick(\\n      rate,\\n      adjustedAmountToWithdraw,\\n      bondsIssuanceIndex\\n    );\\n\\n    pool.parameters.YIELD_PROVIDER.withdraw(\\n      pool.parameters.UNDERLYING_TOKEN,\\n      normalizedDepositedAmountToWithdraw.scaleFromWad(pool.parameters.TOKEN_DECIMALS),\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets called within Position.updateRate() and updates the order book ticks affected by the position\\n   * updating its rate. This is only possible as long as there are no bonds in the position, i.e the full\\n   * position currently lies with the yield provider\\n   * @param adjustedAmount The adjusted balance of tokens of the given position\\n   * @param poolHash The identifier of the pool\\n   * @param oldRate The current rate of the position\\n   * @param newRate The new rate of the position\\n   * @param oldBondsIssuanceIndex The identifier of the borrow group from the given position\\n   * @return newAdjustedAmount The updated amount of tokens of the position adjusted by the\\n   * new tick's global liquidity ratio\\n   * @return newBondsIssuanceIndex The new borrow group id to which the updated position is linked\\n   **/\\n  function updateRate(\\n    uint128 adjustedAmount,\\n    bytes32 poolHash,\\n    uint128 oldRate,\\n    uint128 newRate,\\n    uint128 oldBondsIssuanceIndex\\n  )\\n    public\\n    override\\n    whenNotPaused\\n    onlyRole(Roles.POSITION_ROLE)\\n    returns (\\n      uint128 newAdjustedAmount,\\n      uint128 newBondsIssuanceIndex,\\n      uint128 normalizedAmount\\n    )\\n  {\\n    Types.Pool storage pool = pools[poolHash];\\n\\n    if (pool.state.closed) {\\n      revert Errors.BP_POOL_CLOSED();\\n    }\\n    // cannot update rate when being borrowed\\n    (uint128 bondsQuantity, ) = getAmountRepartition(poolHash, oldRate, adjustedAmount, oldBondsIssuanceIndex);\\n    if (bondsQuantity != 0) {\\n      revert Errors.BP_LOAN_ONGOING();\\n    }\\n    if (newRate < pool.parameters.MIN_RATE) {\\n      revert Errors.BP_OUT_OF_BOUND_MIN_RATE();\\n    }\\n    if (newRate > pool.parameters.MAX_RATE) {\\n      revert Errors.BP_OUT_OF_BOUND_MAX_RATE();\\n    }\\n    if ((newRate - pool.parameters.MIN_RATE) % pool.parameters.RATE_SPACING != 0) {\\n      revert Errors.BP_RATE_SPACING();\\n    }\\n\\n    // input amount adapted to bond index\\n    uint128 adjustedBondIndexAmount = adjustedAmount.wadRayMul(\\n      pool.getBondIssuanceMultiplierForTick(oldRate, oldBondsIssuanceIndex)\\n    );\\n    normalizedAmount = pool.withdrawDepositedAmountForTick(oldRate, adjustedBondIndexAmount, oldBondsIssuanceIndex);\\n    (newAdjustedAmount, newBondsIssuanceIndex) = pool.depositToTick(newRate, normalizedAmount);\\n  }\\n\\n  // BORROWER METHODS\\n\\n  /**\\n   * @notice Called by the borrower to sell bonds to the order book.\\n   * The affected ticks get updated according the amount of bonds sold.\\n   * @param to The address to which the borrowed funds should be sent.\\n   * @param loanAmount The total amount of the loan\\n   **/\\n  function borrow(address to, uint128 loanAmount) external override whenNotPaused onlyRole(Roles.BORROWER_ROLE) {\\n    bytes32 poolHash = borrowerAuthorizedPools[_msgSender()];\\n    Types.Pool storage pool = pools[poolHash];\\n    if (pool.state.closed) {\\n      revert Errors.BP_POOL_CLOSED();\\n    }\\n    if (pool.state.defaulted) {\\n      revert Errors.BP_POOL_DEFAULTED();\\n    }\\n    if (pool.state.currentMaturity > 0 && (block.timestamp > pool.state.currentMaturity)) {\\n      revert Errors.BP_MULTIPLE_BORROW_AFTER_MATURITY();\\n    }\\n\\n    uint128 normalizedLoanAmount = loanAmount.scaleToWad(pool.parameters.TOKEN_DECIMALS);\\n    uint128 normalizedEstablishmentFee = normalizedLoanAmount.wadMul(pool.parameters.ESTABLISHMENT_FEE_RATE);\\n    uint128 normalizedBorrowedAmount = normalizedLoanAmount - normalizedEstablishmentFee;\\n    if (pool.state.normalizedBorrowedAmount + normalizedLoanAmount > pool.parameters.MAX_BORROWABLE_AMOUNT) {\\n      revert Errors.BP_BORROW_MAX_BORROWABLE_AMOUNT_EXCEEDED();\\n    }\\n\\n    if (block.timestamp < pool.state.nextLoanMinStart) {\\n      revert Errors.BP_BORROW_COOLDOWN_PERIOD_NOT_OVER();\\n    }\\n    // collectFees should be called before changing pool global state as fee collection depends on it\\n    pool.collectFees();\\n\\n    if (normalizedLoanAmount > pool.state.normalizedAvailableDeposits) {\\n      revert Errors.BP_BORROW_OUT_OF_BOUND_AMOUNT();\\n    }\\n\\n    uint128 remainingAmount = normalizedLoanAmount;\\n    uint128 currentInterestRate = pool.state.lowerInterestRate - pool.parameters.RATE_SPACING;\\n    while (remainingAmount > 0 && currentInterestRate < pool.parameters.MAX_RATE) {\\n      currentInterestRate += pool.parameters.RATE_SPACING;\\n      if (pool.ticks[currentInterestRate].adjustedRemainingAmount > 0) {\\n        (uint128 bondsPurchasedQuantity, uint128 normalizedUsedAmountForPurchase) = pool\\n          .getBondsIssuanceParametersForTick(currentInterestRate, remainingAmount);\\n        pool.addBondsToTick(currentInterestRate, bondsPurchasedQuantity, normalizedUsedAmountForPurchase);\\n        remainingAmount -= normalizedUsedAmountForPurchase;\\n      }\\n    }\\n    if (remainingAmount != 0) {\\n      revert Errors.BP_BORROW_UNSUFFICIENT_BORROWABLE_AMOUNT_WITHIN_BRACKETS();\\n    }\\n    if (pool.state.currentMaturity == 0) {\\n      pool.state.currentMaturity = uint128(block.timestamp + pool.parameters.LOAN_DURATION);\\n      emit Borrow(poolHash, normalizedBorrowedAmount, normalizedEstablishmentFee);\\n    } else {\\n      emit FurtherBorrow(poolHash, normalizedBorrowedAmount, normalizedEstablishmentFee);\\n    }\\n\\n    protocolFees[poolHash] += normalizedEstablishmentFee;\\n    pool.state.normalizedBorrowedAmount += normalizedLoanAmount;\\n    pool.parameters.YIELD_PROVIDER.withdraw(\\n      pool.parameters.UNDERLYING_TOKEN,\\n      normalizedBorrowedAmount.scaleFromWad(pool.parameters.TOKEN_DECIMALS),\\n      to\\n    );\\n  }\\n\\n  /**\\n   * @notice Repays a currently outstanding bonds of the given pool.\\n   **/\\n  function repay() external override whenNotPaused onlyRole(Roles.BORROWER_ROLE) {\\n    bytes32 poolHash = borrowerAuthorizedPools[_msgSender()];\\n    Types.Pool storage pool = pools[poolHash];\\n    if (pool.state.defaulted) {\\n      revert Errors.BP_POOL_DEFAULTED();\\n    }\\n    if (pool.state.currentMaturity == 0) {\\n      revert Errors.BP_REPAY_NO_ACTIVE_LOAN();\\n    }\\n    bool earlyRepay = pool.state.currentMaturity > block.timestamp;\\n    if (earlyRepay && !pool.parameters.EARLY_REPAY) {\\n      revert Errors.BP_EARLY_REPAY_NOT_ACTIVATED();\\n    }\\n\\n    // collectFees should be called before changing pool global state as fee collection depends on it\\n    pool.collectFees();\\n\\n    uint128 lateRepayFee;\\n    bool bondsIssuanceIndexAlreadyIncremented = false;\\n    uint128 normalizedRepayAmount;\\n    uint128 lateRepayFeePerBond = pool.getLateRepayFeePerBond();\\n\\n    for (\\n      uint128 rate = pool.state.lowerInterestRate;\\n      rate <= pool.parameters.MAX_RATE;\\n      rate += pool.parameters.RATE_SPACING\\n    ) {\\n      (uint128 normalizedRepayAmountForTick, uint128 lateRepayFeeForTick) = pool.repayForTick(\\n        rate,\\n        lateRepayFeePerBond\\n      );\\n      normalizedRepayAmount += normalizedRepayAmountForTick + lateRepayFeeForTick;\\n      lateRepayFee += lateRepayFeeForTick;\\n      bool indexIncremented = pool.includePendingDepositsForTick(rate, bondsIssuanceIndexAlreadyIncremented);\\n      bondsIssuanceIndexAlreadyIncremented = indexIncremented || bondsIssuanceIndexAlreadyIncremented;\\n    }\\n\\n    uint128 repaymentFees = pool.getRepaymentFees(normalizedRepayAmount);\\n    normalizedRepayAmount += repaymentFees;\\n\\n    pool.depositToYieldProvider(_msgSender(), normalizedRepayAmount);\\n    pool.state.nextLoanMinStart = uint128(block.timestamp) + pool.parameters.COOLDOWN_PERIOD;\\n\\n    pool.state.bondsIssuedQuantity = 0;\\n    protocolFees[poolHash] += repaymentFees;\\n    pool.state.normalizedAvailableDeposits += normalizedRepayAmount;\\n\\n    if (block.timestamp > (pool.state.currentMaturity + pool.parameters.REPAYMENT_PERIOD)) {\\n      emit LateRepay(\\n        poolHash,\\n        normalizedRepayAmount,\\n        lateRepayFee,\\n        repaymentFees,\\n        pool.state.normalizedAvailableDeposits,\\n        pool.state.nextLoanMinStart\\n      );\\n    } else if (pool.state.currentMaturity > block.timestamp) {\\n      emit EarlyRepay(\\n        poolHash,\\n        normalizedRepayAmount,\\n        repaymentFees,\\n        pool.state.normalizedAvailableDeposits,\\n        pool.state.nextLoanMinStart\\n      );\\n    } else {\\n      emit Repay(\\n        poolHash,\\n        normalizedRepayAmount,\\n        repaymentFees,\\n        pool.state.normalizedAvailableDeposits,\\n        pool.state.nextLoanMinStart\\n      );\\n    }\\n\\n    // set global data for next loan\\n    pool.state.currentMaturity = 0;\\n    pool.state.normalizedBorrowedAmount = 0;\\n  }\\n\\n  /**\\n   * @notice Called by the borrower to top up liquidity rewards' reserve that\\n   * is distributed to liquidity providers at the pre-defined distribution rate.\\n   * @param amount Amount of tokens that will be add up to the pool's liquidity rewards reserve\\n   **/\\n  function topUpLiquidityRewards(uint128 amount) external override whenNotPaused onlyRole(Roles.BORROWER_ROLE) {\\n    Types.Pool storage pool = pools[borrowerAuthorizedPools[_msgSender()]];\\n    uint128 normalizedAmount = amount.scaleToWad(pool.parameters.TOKEN_DECIMALS);\\n\\n    pool.depositToYieldProvider(_msgSender(), normalizedAmount);\\n    uint128 yieldProviderLiquidityRatio = pool.topUpLiquidityRewards(normalizedAmount);\\n\\n    if (\\n      !pool.state.active &&\\n      pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(yieldProviderLiquidityRatio) >=\\n      pool.parameters.LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD\\n    ) {\\n      pool.state.active = true;\\n      emit PoolActivated(pool.parameters.POOL_HASH);\\n    }\\n\\n    emit TopUpLiquidityRewards(borrowerAuthorizedPools[_msgSender()], normalizedAmount);\\n  }\\n\\n  // PUBLIC METHODS\\n\\n  /**\\n   * @notice Collect yield provider fees as well as liquidity rewards for the target tick\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function collectFeesForTick(bytes32 poolHash, uint128 rate) external override whenNotPaused {\\n    Types.Pool storage pool = pools[poolHash];\\n    pool.collectFees(rate);\\n  }\\n\\n  /**\\n   * @notice Collect yield provider fees as well as liquidity rewards for the whole pool\\n   * Iterates over all pool initialized ticks\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function collectFees(bytes32 poolHash) external override whenNotPaused {\\n    Types.Pool storage pool = pools[poolHash];\\n    pool.collectFees();\\n  }\\n}\\n\",\"keccak256\":\"0xaaee70318641864e77b1675509e04bb9a0bf73e091413b5c729e7d5aed93e135\",\"license\":\"AGPL-3.0\"},\"src/PoolsController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {PoolLogic} from \\\"./lib/PoolLogic.sol\\\";\\nimport {Scaling} from \\\"./lib/Scaling.sol\\\";\\nimport {Uint128WadRayMath} from \\\"./lib/Uint128WadRayMath.sol\\\";\\n\\nimport \\\"./extensions/AaveILendingPool.sol\\\";\\nimport \\\"./extensions/IERC20PartialDecimals.sol\\\";\\nimport \\\"./lib/Errors.sol\\\";\\nimport \\\"./lib/Roles.sol\\\";\\nimport \\\"./lib/Types.sol\\\";\\n\\nimport \\\"./interfaces/IPoolsController.sol\\\";\\n\\nabstract contract PoolsController is AccessControlUpgradeable, PausableUpgradeable, IPoolsController {\\n  using PoolLogic for Types.Pool;\\n  using Scaling for uint128;\\n  using Uint128WadRayMath for uint128;\\n\\n  // borrower address to pool hash\\n  mapping(address => bytes32) public borrowerAuthorizedPools;\\n\\n  // interest rate pool\\n  mapping(bytes32 => Types.Pool) internal pools;\\n\\n  // protocol fees per pool\\n  mapping(bytes32 => uint128) internal protocolFees;\\n\\n  function _initialize() internal onlyInitializing {\\n    // both initializers below are called to comply with OpenZeppelin's\\n    // recommendations even if in practice they don't do anything\\n    __AccessControl_init();\\n    __Pausable_init_unchained();\\n  }\\n\\n  // VIEW FUNCTIONS\\n\\n  /**\\n   * @notice Returns the parameters of a pool\\n   * @param poolHash The identifier of the pool\\n   * @return underlyingToken Address of the underlying token of the pool\\n   * @return minRate Minimum rate of deposits accepted in the pool\\n   * @return maxRate Maximum rate of deposits accepted in the pool\\n   * @return rateSpacing Difference between two rates in the pool\\n   * @return maxBorrowableAmount Maximum amount of tokens that can be borrowed from the pool\\n   * @return loanDuration Duration of a loan in the pool\\n   * @return liquidityRewardsDistributionRate Rate at which liquidity rewards are distributed to lenders\\n   * @return cooldownPeriod Period after a loan during which a borrower cannot take another loan\\n   * @return repaymentPeriod Period after a loan end during which a borrower can repay without penalty\\n   * @return lateRepayFeePerBondRate Penalty a borrower has to pay when it repays late\\n   * @return liquidityRewardsActivationThreshold Minimum amount of liqudity rewards a borrower has to\\n   * deposit to active the pool\\n   **/\\n  function getPoolParameters(bytes32 poolHash)\\n    external\\n    view\\n    override\\n    returns (\\n      address underlyingToken,\\n      uint128 minRate,\\n      uint128 maxRate,\\n      uint128 rateSpacing,\\n      uint128 maxBorrowableAmount,\\n      uint128 loanDuration,\\n      uint128 liquidityRewardsDistributionRate,\\n      uint128 cooldownPeriod,\\n      uint128 repaymentPeriod,\\n      uint128 lateRepayFeePerBondRate,\\n      uint128 liquidityRewardsActivationThreshold\\n    )\\n  {\\n    Types.PoolParameters storage poolParameters = pools[poolHash].parameters;\\n    return (\\n      poolParameters.UNDERLYING_TOKEN,\\n      poolParameters.MIN_RATE,\\n      poolParameters.MAX_RATE,\\n      poolParameters.RATE_SPACING,\\n      poolParameters.MAX_BORROWABLE_AMOUNT,\\n      poolParameters.LOAN_DURATION,\\n      poolParameters.LIQUIDITY_REWARDS_DISTRIBUTION_RATE,\\n      poolParameters.COOLDOWN_PERIOD,\\n      poolParameters.REPAYMENT_PERIOD,\\n      poolParameters.LATE_REPAY_FEE_PER_BOND_RATE,\\n      poolParameters.LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the fee rates of a pool\\n   * @return establishmentFeeRate Amount of fees paid to the protocol at borrow time\\n   * @return repaymentFeeRate Amount of fees paid to the protocol at repay time\\n   **/\\n  function getPoolFeeRates(bytes32 poolHash)\\n    external\\n    view\\n    override\\n    returns (uint128 establishmentFeeRate, uint128 repaymentFeeRate)\\n  {\\n    Types.PoolParameters storage poolParameters = pools[poolHash].parameters;\\n    return (poolParameters.ESTABLISHMENT_FEE_RATE, poolParameters.REPAYMENT_FEE_RATE);\\n  }\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @param poolHash The identifier of the pool\\n   * @return active Signals if a pool is active and ready to accept deposits\\n   * @return defaulted Signals if a pool was defaulted\\n   * @return closed Signals if a pool was closed\\n   * @return currentMaturity End timestamp of current loan\\n   * @return bondsIssuedQuantity Amount of bonds issued, to be repaid at maturity\\n   * @return normalizedBorrowedAmount Actual amount of tokens that were borrowed\\n   * @return normalizedAvailableDeposits Actual amount of tokens available to be borrowed\\n   * @return lowerInterestRate Minimum rate at which a deposit was made\\n   * @return nextLoanMinStart Cool down period, minimum timestamp after which a new loan can be taken\\n   * @return remainingAdjustedLiquidityRewardsReserve Remaining liquidity rewards to be distributed to lenders\\n   * @return yieldProviderLiquidityRatio Last recorded yield provider liquidity ratio\\n   * @return currentBondsIssuanceIndex Current borrow period identifier of the pool\\n   **/\\n  function getPoolState(bytes32 poolHash)\\n    external\\n    view\\n    override\\n    returns (\\n      bool active,\\n      bool defaulted,\\n      bool closed,\\n      uint128 currentMaturity,\\n      uint128 bondsIssuedQuantity,\\n      uint128 normalizedBorrowedAmount,\\n      uint128 normalizedAvailableDeposits,\\n      uint128 lowerInterestRate,\\n      uint128 nextLoanMinStart,\\n      uint128 remainingAdjustedLiquidityRewardsReserve,\\n      uint128 yieldProviderLiquidityRatio,\\n      uint128 currentBondsIssuanceIndex\\n    )\\n  {\\n    Types.PoolState storage poolState = pools[poolHash].state;\\n    return (\\n      poolState.active,\\n      poolState.defaulted,\\n      poolState.closed,\\n      poolState.currentMaturity,\\n      poolState.bondsIssuedQuantity,\\n      poolState.normalizedBorrowedAmount,\\n      poolState.normalizedAvailableDeposits,\\n      poolState.lowerInterestRate,\\n      poolState.nextLoanMinStart,\\n      poolState.remainingAdjustedLiquidityRewardsReserve,\\n      poolState.yieldProviderLiquidityRatio,\\n      poolState.currentBondsIssuanceIndex\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @return earlyRepay Flag that signifies whether the early repay feature is activated or not\\n   **/\\n  function isEarlyRepay(bytes32 poolHash) external view override returns (bool earlyRepay) {\\n    return pools[poolHash].parameters.EARLY_REPAY;\\n  }\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @return defaultTimestamp The timestamp at which the pool was defaulted\\n   **/\\n  function getDefaultTimestamp(bytes32 poolHash) external view override returns (uint128 defaultTimestamp) {\\n    return pools[poolHash].state.defaultTimestamp;\\n  }\\n\\n  // PROTOCOL MANAGEMENT\\n\\n  function getProtocolFees(bytes32 poolHash) public view returns (uint128) {\\n    return protocolFees[poolHash].scaleFromWad(pools[poolHash].parameters.TOKEN_DECIMALS);\\n  }\\n\\n  /**\\n   * @notice Withdraws protocol fees to a target address\\n   * @param poolHash The identifier of the pool\\n   * @param amount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  function claimProtocolFees(\\n    bytes32 poolHash,\\n    uint128 amount,\\n    address to\\n  ) external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    uint128 normalizedAmount = amount.scaleToWad(pools[poolHash].parameters.TOKEN_DECIMALS);\\n    if (pools[poolHash].parameters.POOL_HASH != poolHash) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n\\n    if (normalizedAmount > protocolFees[poolHash]) {\\n      revert Errors.PC_NOT_ENOUGH_PROTOCOL_FEES();\\n    }\\n\\n    protocolFees[poolHash] -= normalizedAmount;\\n    pools[poolHash].parameters.YIELD_PROVIDER.withdraw(pools[poolHash].parameters.UNDERLYING_TOKEN, amount, to);\\n\\n    emit ClaimProtocolFees(poolHash, normalizedAmount, to);\\n  }\\n\\n  /**\\n   * @notice Stops all actions on all pools\\n   **/\\n  function freezePool() external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Cancel a freeze, makes actions available again on all pools\\n   **/\\n  function unfreezePool() external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    _unpause();\\n  }\\n\\n  // BORROWER MANAGEMENT\\n  /**\\n   * @notice Creates a new pool\\n   * @param params The parameters of the new pool\\n   **/\\n  function createNewPool(PoolCreationParams calldata params) external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    // run verifications on parameters value\\n    verifyPoolCreationParameters(params);\\n\\n    // initialize pool state and parameters\\n    pools[params.poolHash].parameters = Types.PoolParameters({\\n      POOL_HASH: params.poolHash,\\n      UNDERLYING_TOKEN: params.underlyingToken,\\n      TOKEN_DECIMALS: IERC20PartialDecimals(params.underlyingToken).decimals(),\\n      YIELD_PROVIDER: params.yieldProvider,\\n      MIN_RATE: params.minRate,\\n      MAX_RATE: params.maxRate,\\n      RATE_SPACING: params.rateSpacing,\\n      MAX_BORROWABLE_AMOUNT: params.maxBorrowableAmount,\\n      LOAN_DURATION: params.loanDuration,\\n      LIQUIDITY_REWARDS_DISTRIBUTION_RATE: params.distributionRate,\\n      COOLDOWN_PERIOD: params.cooldownPeriod,\\n      REPAYMENT_PERIOD: params.repaymentPeriod,\\n      LATE_REPAY_FEE_PER_BOND_RATE: params.lateRepayFeePerBondRate,\\n      ESTABLISHMENT_FEE_RATE: params.establishmentFeeRate,\\n      REPAYMENT_FEE_RATE: params.repaymentFeeRate,\\n      LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD: params.liquidityRewardsActivationThreshold,\\n      EARLY_REPAY: params.earlyRepay\\n    });\\n\\n    pools[params.poolHash].state.yieldProviderLiquidityRatio = uint128(\\n      params.yieldProvider.getReserveNormalizedIncome(address(params.underlyingToken))\\n    );\\n\\n    emit PoolCreated(params);\\n\\n    if (pools[params.poolHash].parameters.LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD == 0) {\\n      pools[params.poolHash].state.active = true;\\n      emit PoolActivated(pools[params.poolHash].parameters.POOL_HASH);\\n    }\\n  }\\n\\n  /**\\n   * @notice Verifies that conditions to create a new pool are met\\n   * @param params The parameters of the new pool\\n   **/\\n  function verifyPoolCreationParameters(PoolCreationParams calldata params) internal view {\\n    if ((params.maxRate - params.minRate) % params.rateSpacing != 0) {\\n      revert Errors.PC_RATE_SPACING_COMPLIANCE();\\n    }\\n    if (params.poolHash == bytes32(0)) {\\n      revert Errors.PC_ZERO_POOL();\\n    }\\n    if (pools[params.poolHash].parameters.POOL_HASH != bytes32(0)) {\\n      revert Errors.PC_POOL_ALREADY_SET_FOR_BORROWER();\\n    }\\n    uint256 yieldProviderLiquidityRatio = params.yieldProvider.getReserveNormalizedIncome(params.underlyingToken);\\n    if (yieldProviderLiquidityRatio < PoolLogic.RAY) {\\n      revert Errors.PC_POOL_TOKEN_NOT_SUPPORTED();\\n    }\\n    if (params.establishmentFeeRate > PoolLogic.WAD) {\\n      revert Errors.PC_ESTABLISHMENT_FEES_TOO_HIGH();\\n    }\\n  }\\n\\n  /**\\n   * @notice Allow an address to interact with a borrower pool\\n   * @param borrowerAddress The address to allow\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function allow(address borrowerAddress, bytes32 poolHash) external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    if (poolHash == bytes32(0)) {\\n      revert Errors.PC_ZERO_POOL();\\n    }\\n    if (borrowerAddress == address(0)) {\\n      revert Errors.PC_ZERO_ADDRESS();\\n    }\\n    if (pools[poolHash].parameters.POOL_HASH != poolHash) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n    if (borrowerAuthorizedPools[borrowerAddress] != bytes32(0)) {\\n      revert Errors.PC_BORROWER_ALREADY_AUTHORIZED();\\n    }\\n    grantRole(Roles.BORROWER_ROLE, borrowerAddress);\\n    borrowerAuthorizedPools[borrowerAddress] = poolHash;\\n    emit BorrowerAllowed(borrowerAddress, poolHash);\\n  }\\n\\n  /**\\n   * @notice Remove borrower pool interaction rights from an address\\n   * @param borrowerAddress The address to disallow\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function disallow(address borrowerAddress, bytes32 poolHash) external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    if (poolHash == bytes32(0)) {\\n      revert Errors.PC_ZERO_POOL();\\n    }\\n    if (borrowerAddress == address(0)) {\\n      revert Errors.PC_ZERO_ADDRESS();\\n    }\\n    if (pools[poolHash].parameters.POOL_HASH != poolHash) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n    if (borrowerAuthorizedPools[borrowerAddress] != poolHash) {\\n      revert Errors.PC_DISALLOW_UNMATCHED_BORROWER();\\n    }\\n    revokeRole(Roles.BORROWER_ROLE, borrowerAddress);\\n    delete borrowerAuthorizedPools[borrowerAddress];\\n    emit BorrowerDisallowed(borrowerAddress, poolHash);\\n  }\\n\\n  /**\\n   * @notice Flags the pool as closed\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function closePool(bytes32 poolHash, address to) external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    if (poolHash == bytes32(0)) {\\n      revert Errors.PC_ZERO_POOL();\\n    }\\n    if (to == address(0)) {\\n      revert Errors.PC_ZERO_ADDRESS();\\n    }\\n    Types.Pool storage pool = pools[poolHash];\\n    if (pool.parameters.POOL_HASH != poolHash) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n    if (pool.state.closed) {\\n      revert Errors.PC_POOL_ALREADY_CLOSED();\\n    }\\n    pool.state.closed = true;\\n\\n    uint128 remainingNormalizedLiquidityRewardsReserve = 0;\\n    if (pool.state.remainingAdjustedLiquidityRewardsReserve > 0) {\\n      uint128 yieldProviderLiquidityRatio = uint128(\\n        pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome(address(pool.parameters.UNDERLYING_TOKEN))\\n      );\\n      remainingNormalizedLiquidityRewardsReserve = pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(\\n        yieldProviderLiquidityRatio\\n      );\\n\\n      pool.state.remainingAdjustedLiquidityRewardsReserve = 0;\\n      pool.parameters.YIELD_PROVIDER.withdraw(\\n        pools[poolHash].parameters.UNDERLYING_TOKEN,\\n        remainingNormalizedLiquidityRewardsReserve.scaleFromWad(pool.parameters.TOKEN_DECIMALS),\\n        to\\n      );\\n    }\\n    emit PoolClosed(poolHash, remainingNormalizedLiquidityRewardsReserve);\\n  }\\n\\n  /**\\n   * @notice Flags the pool as defaulted\\n   * @param poolHash The identifier of the pool to default\\n   **/\\n  function setDefault(bytes32 poolHash) external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    Types.Pool storage pool = pools[poolHash];\\n    if (pool.state.defaulted) {\\n      revert Errors.PC_POOL_DEFAULTED();\\n    }\\n    if (pool.state.currentMaturity == 0) {\\n      revert Errors.PC_NO_ONGOING_LOAN();\\n    }\\n    if (block.timestamp < pool.state.currentMaturity + pool.parameters.REPAYMENT_PERIOD) {\\n      revert Errors.PC_REPAYMENT_PERIOD_ONGOING();\\n    }\\n\\n    pool.state.defaulted = true;\\n    pool.state.defaultTimestamp = uint128(block.timestamp);\\n    uint128 distributedLiquidityRewards = pool.distributeLiquidityRewards();\\n\\n    emit Default(poolHash, distributedLiquidityRewards);\\n  }\\n\\n  // POOL PARAMETERS MANAGEMENT\\n  /**\\n   * @notice Set the maximum amount of tokens that can be borrowed in the target pool\\n   **/\\n  function setMaxBorrowableAmount(uint128 maxBorrowableAmount, bytes32 poolHash)\\n    external\\n    override\\n    onlyRole(Roles.GOVERNANCE_ROLE)\\n  {\\n    if (pools[poolHash].parameters.POOL_HASH != poolHash) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n    pools[poolHash].parameters.MAX_BORROWABLE_AMOUNT = maxBorrowableAmount;\\n\\n    emit SetMaxBorrowableAmount(maxBorrowableAmount, poolHash);\\n  }\\n\\n  /**\\n   * @notice Set the pool liquidity rewards distribution rate\\n   **/\\n  function setLiquidityRewardsDistributionRate(uint128 distributionRate, bytes32 poolHash)\\n    external\\n    override\\n    onlyRole(Roles.GOVERNANCE_ROLE)\\n  {\\n    if (pools[poolHash].parameters.POOL_HASH != poolHash) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n    pools[poolHash].parameters.LIQUIDITY_REWARDS_DISTRIBUTION_RATE = distributionRate;\\n\\n    emit SetLiquidityRewardsDistributionRate(distributionRate, poolHash);\\n  }\\n\\n  /**\\n   * @notice Set the pool establishment protocol fee rate\\n   **/\\n  function setEstablishmentFeeRate(uint128 establishmentFeeRate, bytes32 poolHash)\\n    external\\n    override\\n    onlyRole(Roles.GOVERNANCE_ROLE)\\n  {\\n    if (!pools[poolHash].state.active) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n    if (establishmentFeeRate > PoolLogic.WAD) {\\n      revert Errors.PC_ESTABLISHMENT_FEES_TOO_HIGH();\\n    }\\n\\n    pools[poolHash].parameters.ESTABLISHMENT_FEE_RATE = establishmentFeeRate;\\n\\n    emit SetEstablishmentFeeRate(establishmentFeeRate, poolHash);\\n  }\\n\\n  /**\\n   * @notice Set the pool repayment protocol fee rate\\n   **/\\n  function setRepaymentFeeRate(uint128 repaymentFeeRate, bytes32 poolHash)\\n    external\\n    override\\n    onlyRole(Roles.GOVERNANCE_ROLE)\\n  {\\n    if (!pools[poolHash].state.active) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n\\n    pools[poolHash].parameters.REPAYMENT_FEE_RATE = repaymentFeeRate;\\n\\n    emit SetRepaymentFeeRate(repaymentFeeRate, poolHash);\\n  }\\n}\\n\",\"keccak256\":\"0xf1dc1363b14fcd11ef0df93809ad7cfe41e451653af5290d13a8c37063297231\",\"license\":\"AGPL-3.0\"},\"src/extensions/AaveILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb617909e55f5405b1d3459acf8aebeb8a705d2f8119ceb4d83f3a1b29bb7edbb\",\"license\":\"AGPL-3.0\"},\"src/extensions/IERC20PartialDecimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Partial interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20PartialDecimals {\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x37e3ac28d6daa54ad88b519f769385f093809ceeb018f4566092f9dac4de5ae7\",\"license\":\"MIT\"},\"src/interfaces/IBorrowerPools.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/AaveILendingPool.sol\\\";\\nimport \\\"../lib/Types.sol\\\";\\n\\n/**\\n * @title IBorrowerPools\\n * @notice Used by the Position contract to pool lender positions in the borrowers order books\\n *         Used by the borrowers to manage their loans on their pools\\n **/\\ninterface IBorrowerPools {\\n  // EVENTS\\n\\n  /**\\n   * @notice Emitted after a successful borrow\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedBorrowedAmount The actual amount of tokens borrowed\\n   * @param establishmentFees Fees paid to the protocol at borrow time\\n   **/\\n  event Borrow(bytes32 indexed poolHash, uint128 normalizedBorrowedAmount, uint128 establishmentFees);\\n\\n  /**\\n   * @notice Emitted after a successful further borrow\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedBorrowedAmount The actual amount of tokens borrowed\\n   * @param establishmentFees Fees paid to the protocol at borrow time\\n   **/\\n  event FurtherBorrow(bytes32 indexed poolHash, uint128 normalizedBorrowedAmount, uint128 establishmentFees);\\n\\n  /**\\n   * @notice Emitted after a successful repay\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedRepayAmount The actual amount of tokens repaid\\n   * @param repaymentFee The amount of fee paid to the protocol at repay time\\n   * @param normalizedDepositsAfterRepay The actual amount of tokens deposited and available for next loan after repay\\n   * @param nextLoanMinStart The timestamp after which a new loan can be taken\\n   **/\\n  event Repay(\\n    bytes32 indexed poolHash,\\n    uint128 normalizedRepayAmount,\\n    uint128 repaymentFee,\\n    uint128 normalizedDepositsAfterRepay,\\n    uint128 nextLoanMinStart\\n  );\\n\\n  /**\\n   * @notice Emitted after a successful early repay\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedRepayAmount The actual amount of tokens repaid\\n   * @param repaymentFee The amount of fee paid to the protocol at repay time\\n   * @param normalizedDepositsAfterRepay The actual amount of tokens deposited and available for next loan after repay\\n   * @param nextLoanMinStart The timestamp after which a new loan can be taken\\n   **/\\n  event EarlyRepay(\\n    bytes32 indexed poolHash,\\n    uint128 normalizedRepayAmount,\\n    uint128 repaymentFee,\\n    uint128 normalizedDepositsAfterRepay,\\n    uint128 nextLoanMinStart\\n  );\\n\\n  /**\\n   * @notice Emitted after a successful repay, made after the repayment period\\n   * Includes a late repay fee\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedRepayAmount The actual amount of tokens repaid\\n   * @param lateRepayFee The amount of fee paid due to a late repayment\\n   * @param repaymentFee The amount of fee paid to the protocol at repay time\\n   * @param normalizedDepositsAfterRepay The actual amount of tokens deposited and available for next loan after repay\\n   * @param nextLoanMinStart The timestamp after which a new loan can be taken\\n   **/\\n  event LateRepay(\\n    bytes32 indexed poolHash,\\n    uint128 normalizedRepayAmount,\\n    uint128 lateRepayFee,\\n    uint128 repaymentFee,\\n    uint128 normalizedDepositsAfterRepay,\\n    uint128 nextLoanMinStart\\n  );\\n\\n  /**\\n   * @notice Emitted after a borrower successfully deposits tokens in its pool liquidity rewards reserve\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedAmount The actual amount of tokens deposited into the reserve\\n   **/\\n  event TopUpLiquidityRewards(bytes32 poolHash, uint128 normalizedAmount);\\n\\n  // The below events and enums are being used in the PoolLogic library\\n  // The same way that libraries don't have storage, they don't have an event log\\n  // Hence event logs will be saved in the calling contract\\n  // For the contract abi to reflect this and be used by offchain libraries,\\n  // we define these events and enums in the contract itself as well\\n\\n  /**\\n   * @notice Emitted when a tick is initialized, i.e. when its first deposited in\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   **/\\n  event TickInitialized(bytes32 poolHash, uint128 rate, uint128 atlendisLiquidityRatio);\\n\\n  /**\\n   * @notice Emitted after a deposit on a tick that was done during a loan\\n   * @param poolHash The identifier of the pool\\n   * @param rate The position bidding rate\\n   * @param adjustedPendingDeposit The amount of tokens deposited during a loan, adjusted to the current liquidity index\\n   **/\\n  event TickLoanDeposit(bytes32 poolHash, uint128 rate, uint128 adjustedPendingDeposit);\\n\\n  /**\\n   * @notice Emitted after a deposit on a tick that was done without an active loan\\n   * @param poolHash The identifier of the pool\\n   * @param rate The position bidding rate\\n   * @param adjustedAvailableDeposit The amount of tokens available to the borrower for its next loan\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   **/\\n  event TickNoLoanDeposit(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAvailableDeposit,\\n    uint128 atlendisLiquidityRatio\\n  );\\n\\n  /**\\n   * @notice Emitted when a borrow successfully impacts a tick\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedRemainingAmountReduction The amount of tokens left to borrow from other ticks\\n   * @param loanedAmount The amount borrowed from the tick\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   * @param unborrowedRatio Proportion of ticks funds that were not borrowed\\n   **/\\n  event TickBorrow(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedRemainingAmountReduction,\\n    uint128 loanedAmount,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 unborrowedRatio\\n  );\\n\\n  /**\\n   * @notice Emitted when a withdraw is done outside of a loan on the tick\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedAmountToWithdraw The amount of tokens to withdraw, adjusted to the tick liquidity index\\n   **/\\n  event TickWithdrawPending(bytes32 poolHash, uint128 rate, uint128 adjustedAmountToWithdraw);\\n\\n  /**\\n   * @notice Emitted when a withdraw is done during a loan on the tick\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedAmountToWithdraw The amount of tokens to withdraw, adjusted to the tick liquidity index\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   * @param accruedFeesToWithdraw The amount of fees the position has a right to claim\\n   **/\\n  event TickWithdrawRemaining(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 accruedFeesToWithdraw\\n  );\\n\\n  /**\\n   * @notice Emitted when pending amounts are merged with the rest of the pool during a repay\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedPendingAmount The amount of pending funds deposited with available funds\\n   **/\\n  event TickPendingDeposit(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedPendingAmount,\\n    bool poolBondIssuanceIndexIncremented\\n  );\\n\\n  /**\\n   * @notice Emitted when funds from a tick are repaid by the borrower\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedRemainingAmount The total amount of tokens available to the borrower for\\n   * its next loan, adjusted to the tick current liquidity index\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   **/\\n  event TickRepay(bytes32 poolHash, uint128 rate, uint128 adjustedRemainingAmount, uint128 atlendisLiquidityRatio);\\n\\n  /**\\n   * @notice Emitted when liquidity rewards are distributed to a tick\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param remainingLiquidityRewards the amount of liquidityRewards added to the tick\\n   * @param addedAccruedFees Increase in accrued fees for that tick\\n   **/\\n  event CollectFeesForTick(bytes32 poolHash, uint128 rate, uint128 remainingLiquidityRewards, uint128 addedAccruedFees);\\n\\n  // VIEW METHODS\\n\\n  /**\\n   * @notice Returns the liquidity ratio of a given tick in a pool's order book.\\n   * The liquidity ratio is an accounting construct to deduce the accrued interest over time.\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick rate from which to extract the liquidity ratio\\n   * @return liquidityRatio The liquidity ratio of the given tick\\n   **/\\n  function getTickLiquidityRatio(bytes32 poolHash, uint128 rate) external view returns (uint128 liquidityRatio);\\n\\n  /**\\n   * @notice Returns the repartition between bonds and deposits of the given tick.\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick rate from which to get data\\n   * @return adjustedTotalAmount Total amount of deposit in the tick\\n   * @return adjustedRemainingAmount Amount of tokens in tick deposited with the\\n   * underlying yield provider that were deposited before bond issuance\\n   * @return bondsQuantity The quantity of bonds within the tick\\n   * @return adjustedPendingAmount Amount of deposit in tick deposited with the\\n   * underlying yield provider that were deposited after bond issuance\\n   * @return atlendisLiquidityRatio The liquidity ratio of the given tick\\n   * @return accruedFees The total fees claimable in the current tick, either from\\n   * yield provider interests or liquidity rewards accrual\\n   **/\\n  function getTickAmounts(bytes32 poolHash, uint128 rate)\\n    external\\n    view\\n    returns (\\n      uint128 adjustedTotalAmount,\\n      uint128 adjustedRemainingAmount,\\n      uint128 bondsQuantity,\\n      uint128 adjustedPendingAmount,\\n      uint128 atlendisLiquidityRatio,\\n      uint128 accruedFees\\n    );\\n\\n  /**\\n   * @notice Returns the timestamp of the last fee distribution to the tick\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick rate from which to get data\\n   * @return lastFeeDistributionTimestamp Timestamp of the last fee's distribution to the tick\\n   **/\\n  function getTickLastUpdate(string calldata poolHash, uint128 rate)\\n    external\\n    view\\n    returns (uint128 lastFeeDistributionTimestamp);\\n\\n  /**\\n   * @notice Returns the current state of the pool's parameters\\n   * @param poolHash The identifier of the pool\\n   * @return weightedAverageLendingRate The average deposit bidding rate in the order book\\n   * @return adjustedPendingDeposits Amount of tokens deposited after bond\\n   * issuance and currently on third party yield provider\\n   **/\\n  function getPoolAggregates(bytes32 poolHash)\\n    external\\n    view\\n    returns (uint128 weightedAverageLendingRate, uint128 adjustedPendingDeposits);\\n\\n  /**\\n   * @notice Returns the current maturity of the pool\\n   * @param poolHash The identifier of the pool\\n   * @return poolCurrentMaturity The pool's current maturity\\n   **/\\n  function getPoolMaturity(bytes32 poolHash) external view returns (uint128 poolCurrentMaturity);\\n\\n  /**\\n   * @notice Estimates the lending rate corresponding to the input amount,\\n   * depending on the current state of the pool\\n   * @param normalizedBorrowedAmount The amount to be borrowed from the pool\\n   * @param poolHash The identifier of the pool\\n   * @return estimatedRate The estimated loan rate for the current state of the pool\\n   **/\\n  function estimateLoanRate(uint128 normalizedBorrowedAmount, bytes32 poolHash)\\n    external\\n    view\\n    returns (uint128 estimatedRate);\\n\\n  /**\\n   * @notice Returns the token amount's repartition between bond quantity and normalized\\n   * deposited amount currently placed on third party yield provider\\n   * @param poolHash The identifier of the pool\\n   * @param rate Tick's rate\\n   * @param adjustedAmount Adjusted amount of tokens currently on third party yield provider\\n   * @param bondsIssuanceIndex The identifier of the borrow group\\n   * @return bondsQuantity Quantity of bonds held\\n   * @return normalizedDepositedAmount Amount of deposit currently on third party yield provider\\n   **/\\n  function getAmountRepartition(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  ) external view returns (uint128 bondsQuantity, uint128 normalizedDepositedAmount);\\n\\n  /**\\n   * @notice Returns the total amount a borrower has to repay to a pool. Includes borrowed\\n   * amount, late repay fees and protocol fees\\n   * @param poolHash The identifier of the pool\\n   * @param earlyRepay indicates if this is an early repay\\n   * @return normalizedRepayAmount Total repay amount\\n   * @return lateRepayFee Normalized amount to be paid to each bond in case of late repayment\\n   * @return repaymentFee Normalized fee amount paid to the protocol\\n   **/\\n  function getRepayAmounts(bytes32 poolHash, bool earlyRepay)\\n    external\\n    view\\n    returns (\\n      uint128 normalizedRepayAmount,\\n      uint128 lateRepayFee,\\n      uint128 repaymentFee\\n    );\\n\\n  // LENDER METHODS\\n\\n  /**\\n   * @notice Gets called within the Position.deposit() function and enables a lender to deposit assets\\n   * into a given borrower's order book. The lender specifies a rate (price) at which it is willing to\\n   * lend out its assets (bid on the zero coupon bond). The full amount will initially be deposited\\n   * on the underlying yield provider until the borrower sells bonds at the specified rate.\\n   * @param normalizedAmount The amount of the given asset to deposit\\n   * @param rate The rate at which to bid for a bond\\n   * @param poolHash The identifier of the pool\\n   * @param underlyingToken Contract' address of the token to be deposited\\n   * @param sender The lender address who calls the deposit function on the Position\\n   * @return adjustedAmount Deposited amount adjusted with current liquidity index\\n   * @return bondsIssuanceIndex The identifier of the borrow group to which the deposit has been allocated\\n   **/\\n  function deposit(\\n    uint128 rate,\\n    bytes32 poolHash,\\n    address underlyingToken,\\n    address sender,\\n    uint128 normalizedAmount\\n  ) external returns (uint128 adjustedAmount, uint128 bondsIssuanceIndex);\\n\\n  /**\\n   * @notice Gets called within the Position.withdraw() function and enables a lender to\\n   * evaluate the exact amount of tokens it is allowed to withdraw\\n   * @dev This method is meant to be used exclusively with the withdraw() method\\n   * Under certain circumstances, this method can return incorrect values, that would otherwise\\n   * be rejected by the checks made in the withdraw() method\\n   * @param poolHash The identifier of the pool\\n   * @param rate The rate the position is bidding for\\n   * @param adjustedAmount The amount of tokens in the position, adjusted to the deposit liquidity ratio\\n   * @param bondsIssuanceIndex An index determining deposit timing\\n   * @return adjustedAmountToWithdraw The amount of tokens to withdraw, adjuste for borrow pool use\\n   * @return depositedAmountToWithdraw The amount of tokens to withdraw, adjuste for position use\\n   * @return remainingBondsQuantity The quantity of bonds remaining within the position\\n   * @return bondsMaturity The maturity of bonds remaining within the position after withdraw\\n   **/\\n  function getWithdrawAmounts(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  )\\n    external\\n    view\\n    returns (\\n      uint128 adjustedAmountToWithdraw,\\n      uint128 depositedAmountToWithdraw,\\n      uint128 remainingBondsQuantity,\\n      uint128 bondsMaturity\\n    );\\n\\n  /**\\n   * @notice Gets called within the Position.withdraw() function and enables a lender to\\n   * withdraw assets that are deposited with the underlying yield provider\\n   * @param poolHash The identifier of the pool\\n   * @param rate The rate the position is bidding for\\n   * @param adjustedAmountToWithdraw The actual amount of tokens to withdraw from the position\\n   * @param bondsIssuanceIndex An index determining deposit timing\\n   * @param owner The address to which the withdrawns funds are sent\\n   * @return normalizedDepositedAmountToWithdraw Actual amount of tokens withdrawn and sent to the lender\\n   **/\\n  function withdraw(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 bondsIssuanceIndex,\\n    address owner\\n  ) external returns (uint128 normalizedDepositedAmountToWithdraw);\\n\\n  /**\\n   * @notice Gets called within Position.updateRate() and updates the order book ticks affected by the position\\n   * updating its rate. This is only possible as long as there are no bonds in the position, i.e the full\\n   * position currently lies with the yield provider\\n   * @param adjustedAmount The adjusted balance of tokens of the given position\\n   * @param poolHash The identifier of the pool\\n   * @param oldRate The current rate of the position\\n   * @param newRate The new rate of the position\\n   * @param oldBondsIssuanceIndex The identifier of the borrow group from the given position\\n   * @return newAdjustedAmount The updated amount of tokens of the position adjusted by the\\n   * new tick's global liquidity ratio\\n   * @return newBondsIssuanceIndex The new borrow group id to which the updated position is linked\\n   **/\\n  function updateRate(\\n    uint128 adjustedAmount,\\n    bytes32 poolHash,\\n    uint128 oldRate,\\n    uint128 newRate,\\n    uint128 oldBondsIssuanceIndex\\n  )\\n    external\\n    returns (\\n      uint128 newAdjustedAmount,\\n      uint128 newBondsIssuanceIndex,\\n      uint128 normalizedAmount\\n    );\\n\\n  // BORROWER METHODS\\n\\n  /**\\n   * @notice Called by the borrower to sell bonds to the order book.\\n   * The affected ticks get updated according the amount of bonds sold.\\n   * @param to The address to which the borrowed funds should be sent.\\n   * @param loanAmount The total amount of the loan\\n   **/\\n  function borrow(address to, uint128 loanAmount) external;\\n\\n  /**\\n   * @notice Repays a currently outstanding bonds of the given borrower.\\n   **/\\n  function repay() external;\\n\\n  /**\\n   * @notice Called by the borrower to top up liquidity rewards' reserve that\\n   * is distributed to liquidity providers at the pre-defined distribution rate.\\n   * @param normalizedAmount Amount of tokens  that will be add up to the borrower's liquidity rewards reserve\\n   **/\\n  function topUpLiquidityRewards(uint128 normalizedAmount) external;\\n\\n  // FEE COLLECTION\\n\\n  /**\\n   * @notice Collect yield provider fees as well as liquidity rewards for the target tick\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function collectFeesForTick(bytes32 poolHash, uint128 rate) external;\\n\\n  /**\\n   * @notice Collect yield provider fees as well as liquidity rewards for the whole pool\\n   * Iterates over all pool initialized ticks\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function collectFees(bytes32 poolHash) external;\\n}\\n\",\"keccak256\":\"0x1f069071f0835cad025275055ad902fcfb4ed53419f3e3de2e4bd0fc020469b3\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IPoolsController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib/Types.sol\\\";\\n\\n/**\\n * @title IPoolsController\\n * @notice Management of the pools\\n **/\\ninterface IPoolsController {\\n  // EVENTS\\n\\n  /**\\n   * @notice Emitted after a pool was creted\\n   **/\\n  event PoolCreated(PoolCreationParams params);\\n\\n  /**\\n   * @notice Emitted after a borrower address was allowed to borrow from a pool\\n   * @param borrowerAddress The address to allow\\n   * @param poolHash The identifier of the pool\\n   **/\\n  event BorrowerAllowed(address borrowerAddress, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after a borrower address was disallowed to borrow from a pool\\n   * @param borrowerAddress The address to disallow\\n   * @param poolHash The identifier of the pool\\n   **/\\n  event BorrowerDisallowed(address borrowerAddress, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted when a pool is active, i.e. after the borrower deposits enough tokens\\n   * in its pool liquidity rewards reserve as agreed before the pool creation\\n   * @param poolHash The identifier of the pool\\n   **/\\n  event PoolActivated(bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after pool is closed\\n   * @param poolHash The identifier of the pool\\n   * @param collectedLiquidityRewards The amount of liquidity rewards to have been collected at closing time\\n   **/\\n  event PoolClosed(bytes32 poolHash, uint128 collectedLiquidityRewards);\\n\\n  /**\\n   * @notice Emitted when a pool defaults on its loan repayment\\n   * @param poolHash The identifier of the pool\\n   * @param distributedLiquidityRewards The remaining liquidity rewards distributed to\\n   * bond holders\\n   **/\\n  event Default(bytes32 poolHash, uint128 distributedLiquidityRewards);\\n\\n  /**\\n   * @notice Emitted after governance sets the maximum borrowable amount for a pool\\n   **/\\n  event SetMaxBorrowableAmount(uint128 maxTokenDeposit, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after governance sets the liquidity rewards distribution rate for a pool\\n   **/\\n  event SetLiquidityRewardsDistributionRate(uint128 distributionRate, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after governance sets the establishment fee for a pool\\n   **/\\n  event SetEstablishmentFeeRate(uint128 establishmentRate, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after governance sets the repayment fee for a pool\\n   **/\\n  event SetRepaymentFeeRate(uint128 repaymentFeeRate, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after governance claims the fees associated with a pool\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedAmount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  event ClaimProtocolFees(bytes32 poolHash, uint128 normalizedAmount, address to);\\n\\n  // VIEW METHODS\\n\\n  /**\\n   * @notice Returns the parameters of a pool\\n   * @param poolHash The identifier of the pool\\n   * @return underlyingToken Address of the underlying token of the pool\\n   * @return minRate Minimum rate of deposits accepted in the pool\\n   * @return maxRate Maximum rate of deposits accepted in the pool\\n   * @return rateSpacing Difference between two rates in the pool\\n   * @return maxBorrowableAmount Maximum amount of tokens that can be borrowed from the pool\\n   * @return loanDuration Duration of a loan in the pool\\n   * @return liquidityRewardsDistributionRate Rate at which liquidity rewards are distributed to lenders\\n   * @return cooldownPeriod Period after a loan during which a borrower cannot take another loan\\n   * @return repaymentPeriod Period after a loan end during which a borrower can repay without penalty\\n   * @return lateRepayFeePerBondRate Penalty a borrower has to pay when it repays late\\n   * @return liquidityRewardsActivationThreshold Minimum amount of liqudity rewards a borrower has to\\n   * deposit to active the pool\\n   **/\\n  function getPoolParameters(bytes32 poolHash)\\n    external\\n    view\\n    returns (\\n      address underlyingToken,\\n      uint128 minRate,\\n      uint128 maxRate,\\n      uint128 rateSpacing,\\n      uint128 maxBorrowableAmount,\\n      uint128 loanDuration,\\n      uint128 liquidityRewardsDistributionRate,\\n      uint128 cooldownPeriod,\\n      uint128 repaymentPeriod,\\n      uint128 lateRepayFeePerBondRate,\\n      uint128 liquidityRewardsActivationThreshold\\n    );\\n\\n  /**\\n   * @notice Returns the fee rates of a pool\\n   * @return establishmentFeeRate Amount of fees paid to the protocol at borrow time\\n   * @return repaymentFeeRate Amount of fees paid to the protocol at repay time\\n   **/\\n  function getPoolFeeRates(bytes32 poolHash)\\n    external\\n    view\\n    returns (uint128 establishmentFeeRate, uint128 repaymentFeeRate);\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @param poolHash The identifier of the pool\\n   * @return active Signals if a pool is active and ready to accept deposits\\n   * @return defaulted Signals if a pool was defaulted\\n   * @return closed Signals if a pool was closed\\n   * @return currentMaturity End timestamp of current loan\\n   * @return bondsIssuedQuantity Amount of bonds issued, to be repaid at maturity\\n   * @return normalizedBorrowedAmount Actual amount of tokens that were borrowed\\n   * @return normalizedAvailableDeposits Actual amount of tokens available to be borrowed\\n   * @return lowerInterestRate Minimum rate at which a deposit was made\\n   * @return nextLoanMinStart Cool down period, minimum timestamp after which a new loan can be taken\\n   * @return remainingAdjustedLiquidityRewardsReserve Remaining liquidity rewards to be distributed to lenders\\n   * @return yieldProviderLiquidityRatio Last recorded yield provider liquidity ratio\\n   * @return currentBondsIssuanceIndex Current borrow period identifier of the pool\\n   **/\\n  function getPoolState(bytes32 poolHash)\\n    external\\n    view\\n    returns (\\n      bool active,\\n      bool defaulted,\\n      bool closed,\\n      uint128 currentMaturity,\\n      uint128 bondsIssuedQuantity,\\n      uint128 normalizedBorrowedAmount,\\n      uint128 normalizedAvailableDeposits,\\n      uint128 lowerInterestRate,\\n      uint128 nextLoanMinStart,\\n      uint128 remainingAdjustedLiquidityRewardsReserve,\\n      uint128 yieldProviderLiquidityRatio,\\n      uint128 currentBondsIssuanceIndex\\n    );\\n\\n  /**\\n   * @notice Signals whether the early repay feature is activated or not\\n   * @return earlyRepay Flag that signifies whether the early repay feature is activated or not\\n   **/\\n  function isEarlyRepay(bytes32 poolHash) external view returns (bool earlyRepay);\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @return defaultTimestamp The timestamp at which the pool was defaulted\\n   **/\\n  function getDefaultTimestamp(bytes32 poolHash) external view returns (uint128 defaultTimestamp);\\n\\n  // GOVERNANCE METHODS\\n\\n  /**\\n   * @notice Parameters used for a pool creation\\n   * @param poolHash The identifier of the pool\\n   * @param underlyingToken Address of the pool underlying token\\n   * @param yieldProvider Yield provider of the pool\\n   * @param minRate Minimum bidding rate for the pool\\n   * @param maxRate Maximum bidding rate for the pool\\n   * @param rateSpacing Difference between two tick rates in the pool\\n   * @param maxBorrowableAmount Maximum amount of tokens a borrower can get from a pool\\n   * @param loanDuration Duration of a loan i.e. maturity of the issued bonds\\n   * @param distributionRate Rate at which the liquidity rewards are distributed to unmatched positions\\n   * @param cooldownPeriod Period of time after a repay during which the borrow cannot take a loan\\n   * @param repaymentPeriod Period after the end of a loan during which the borrower can repay without penalty\\n   * @param lateRepayFeePerBondRate Additional fees applied when a borrower repays its loan after the repayment period ends\\n   * @param establishmentFeeRate Fees paid to Atlendis at borrow time\\n   * @param repaymentFeeRate Fees paid to Atlendis at repay time\\n   * @param liquidityRewardsActivationThreshold Amount of tokens the borrower has to lock into the liquidity\\n   * @param earlyRepay Is early repay activated\\n   * rewards reserve to activate the pool\\n   **/\\n  struct PoolCreationParams {\\n    bytes32 poolHash;\\n    address underlyingToken;\\n    ILendingPool yieldProvider;\\n    uint128 minRate;\\n    uint128 maxRate;\\n    uint128 rateSpacing;\\n    uint128 maxBorrowableAmount;\\n    uint128 loanDuration;\\n    uint128 distributionRate;\\n    uint128 cooldownPeriod;\\n    uint128 repaymentPeriod;\\n    uint128 lateRepayFeePerBondRate;\\n    uint128 establishmentFeeRate;\\n    uint128 repaymentFeeRate;\\n    uint128 liquidityRewardsActivationThreshold;\\n    bool earlyRepay;\\n  }\\n\\n  /**\\n   * @notice Creates a new pool\\n   * @param params A struct defining the pool creation parameters\\n   **/\\n  function createNewPool(PoolCreationParams calldata params) external;\\n\\n  /**\\n   * @notice Allow an address to interact with a borrower pool\\n   * @param borrowerAddress The address to allow\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function allow(address borrowerAddress, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Remove pool interaction rights from an address\\n   * @param borrowerAddress The address to disallow\\n   * @param poolHash The identifier of the borrower pool\\n   **/\\n  function disallow(address borrowerAddress, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Flags the pool as closed\\n   * @param poolHash The identifier of the pool to be closed\\n   * @param to An address to which the remaining liquidity rewards will be sent\\n   **/\\n  function closePool(bytes32 poolHash, address to) external;\\n\\n  /**\\n   * @notice Flags the pool as defaulted\\n   * @param poolHash The identifier of the pool to default\\n   **/\\n  function setDefault(bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Set the maximum amount of tokens that can be borrowed in the target pool\\n   **/\\n  function setMaxBorrowableAmount(uint128 maxTokenDeposit, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Set the pool liquidity rewards distribution rate\\n   **/\\n  function setLiquidityRewardsDistributionRate(uint128 distributionRate, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Set the pool establishment protocol fee rate\\n   **/\\n  function setEstablishmentFeeRate(uint128 establishmentFeeRate, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Set the pool repayment protocol fee rate\\n   **/\\n  function setRepaymentFeeRate(uint128 repaymentFeeRate, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Withdraws protocol fees to a target address\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedAmount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  function claimProtocolFees(\\n    bytes32 poolHash,\\n    uint128 normalizedAmount,\\n    address to\\n  ) external;\\n\\n  /**\\n   * @notice Stops all actions on all pools\\n   **/\\n  function freezePool() external;\\n\\n  /**\\n   * @notice Cancel a freeze, makes actions available again on all pools\\n   **/\\n  function unfreezePool() external;\\n}\\n\",\"keccak256\":\"0x5138647793c0816f5db907ad78913dfc625978933d44e8fd79cdf04715f84219\",\"license\":\"AGPL-3.0\"},\"src/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n  // *** Contract Specific Errors ***\\n  // BorrowerPools\\n  error BP_BORROW_MAX_BORROWABLE_AMOUNT_EXCEEDED(); // \\\"Amount borrowed is too big, exceeding borrowable capacity\\\";\\n  error BP_REPAY_NO_ACTIVE_LOAN(); // \\\"No active loan to be repaid, action cannot be performed\\\";\\n  error BP_BORROW_UNSUFFICIENT_BORROWABLE_AMOUNT_WITHIN_BRACKETS(); // \\\"Amount provided is greater than available amount within min rate and max rate brackets\\\";\\n  error BP_REPAY_AT_MATURITY_ONLY(); // \\\"Maturity has not been reached yet, action cannot be performed\\\";\\n  error BP_BORROW_COOLDOWN_PERIOD_NOT_OVER(); // \\\"Cooldown period after a repayment is not over\\\";\\n  error BP_MULTIPLE_BORROW_AFTER_MATURITY(); // \\\"Cannot borrow again from pool after loan maturity\\\";\\n  error BP_POOL_NOT_ACTIVE(); // \\\"Pool not active\\\"\\n  error BP_POOL_DEFAULTED(); // \\\"Pool defaulted\\\"\\n  error BP_LOAN_ONGOING(); // \\\"There's a loan ongoing, cannot update rate\\\"\\n  error BP_BORROW_OUT_OF_BOUND_AMOUNT(); // \\\"Amount provided is greater than available amount, action cannot be performed\\\";\\n  error BP_POOL_CLOSED(); // \\\"Pool closed\\\";\\n  error BP_OUT_OF_BOUND_MIN_RATE(); // \\\"Rate provided is lower than minimum rate of the pool\\\";\\n  error BP_OUT_OF_BOUND_MAX_RATE(); // \\\"Rate provided is greater than maximum rate of the pool\\\";\\n  error BP_UNMATCHED_TOKEN(); // \\\"Token/Asset provided does not match the underlying token of the pool\\\";\\n  error BP_RATE_SPACING(); // \\\"Decimals of rate provided do not comply with rate spacing of the pool\\\";\\n  error BP_BOND_ISSUANCE_ID_TOO_HIGH(); // \\\"Bond issuance id is too high\\\";\\n  error BP_NO_DEPOSIT_TO_WITHDRAW(); // \\\"Deposited amount non-borrowed equals to zero\\\";\\n  error BP_TARGET_BOND_ISSUANCE_INDEX_EMPTY(); // \\\"Target bond issuance index has no amount to withdraw\\\";\\n  error BP_EARLY_REPAY_NOT_ACTIVATED(); // \\\"The early repay feature is not activated for this pool\\\";\\n\\n  // PoolController\\n  error PC_POOL_NOT_ACTIVE(); // \\\"Pool not active\\\"\\n  error PC_POOL_DEFAULTED(); // \\\"Pool defaulted\\\"\\n  error PC_POOL_ALREADY_SET_FOR_BORROWER(); // \\\"Targeted borrower is already set for another pool\\\";\\n  error PC_POOL_TOKEN_NOT_SUPPORTED(); // \\\"Underlying token is not supported by the yield provider\\\";\\n  error PC_DISALLOW_UNMATCHED_BORROWER(); // \\\"Revoking the wrong borrower as the provided borrower does not match the provided address\\\";\\n  error PC_RATE_SPACING_COMPLIANCE(); // \\\"Provided rate must be compliant with rate spacing\\\";\\n  error PC_NO_ONGOING_LOAN(); // \\\"Cannot default a pool that has no ongoing loan\\\";\\n  error PC_NOT_ENOUGH_PROTOCOL_FEES(); // \\\"Not enough registered protocol fees to withdraw\\\";\\n  error PC_POOL_ALREADY_CLOSED(); // \\\"Pool already closed\\\";\\n  error PC_ZERO_POOL(); // \\\"Cannot make actions on the zero pool\\\";\\n  error PC_ZERO_ADDRESS(); // \\\"Cannot make actions on the zero address\\\";\\n  error PC_REPAYMENT_PERIOD_ONGOING(); // \\\"Cannot default pool while repayment period in ongoing\\\"\\n  error PC_ESTABLISHMENT_FEES_TOO_HIGH(); // \\\"Cannot set establishment fee over 100% of loan amount\\\"\\n  error PC_BORROWER_ALREADY_AUTHORIZED(); // \\\"Borrower already authorized on another pool\\\"\\n\\n  // PositionManager\\n  error POS_MGMT_ONLY_OWNER(); // \\\"Only the owner of the position token can manage it (update rate, withdraw)\\\";\\n  error POS_POSITION_ONLY_IN_BONDS(); // \\\"Cannot withdraw a position that's only in bonds\\\";\\n  error POS_ZERO_AMOUNT(); // \\\"Cannot deposit zero amount\\\";\\n  error POS_TIMELOCK(); // \\\"Cannot withdraw or update rate in the same block as deposit\\\";\\n  error POS_POSITION_DOES_NOT_EXIST(); // \\\"Position does not exist\\\";\\n  error POS_POOL_DEFAULTED(); // \\\"Pool defaulted\\\";\\n  error POS_ZERO_ADDRESS(); // \\\"Cannot make actions on the zero address\\\";\\n  error POS_NOT_ALLOWED(); // \\\"Transaction sender is not allowed to perform the target action\\\";\\n\\n  // PositionDescriptor\\n  error POD_BAD_INPUT(); // \\\"Input pool identifier does not correspond to input pool hash\\\";\\n\\n  //*** Library Specific Errors ***\\n  // WadRayMath\\n  error MATH_MULTIPLICATION_OVERFLOW(); // \\\"The multiplication would result in a overflow\\\";\\n  error MATH_ADDITION_OVERFLOW(); // \\\"The addition would result in a overflow\\\";\\n  error MATH_DIVISION_BY_ZERO(); // \\\"The division would result in a divzion by zero\\\";\\n}\\n\",\"keccak256\":\"0x1222025c5a9c44eb2b46855c76ed8c9f2d50f3f9e640431f15d3ddcc39b0da2a\",\"license\":\"AGPL-3.0\"},\"src/lib/PoolLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {Rounding} from \\\"./Rounding.sol\\\";\\nimport {Scaling} from \\\"./Scaling.sol\\\";\\nimport {Uint128WadRayMath} from \\\"./Uint128WadRayMath.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"../extensions/AaveILendingPool.sol\\\";\\n\\nlibrary PoolLogic {\\n  event PoolActivated(bytes32 poolHash);\\n  enum BalanceUpdateType {\\n    INCREASE,\\n    DECREASE\\n  }\\n  event TickInitialized(bytes32 borrower, uint128 rate, uint128 atlendisLiquidityRatio);\\n  event TickLoanDeposit(bytes32 borrower, uint128 rate, uint128 adjustedPendingDeposit);\\n  event TickNoLoanDeposit(\\n    bytes32 borrower,\\n    uint128 rate,\\n    uint128 adjustedPendingDeposit,\\n    uint128 atlendisLiquidityRatio\\n  );\\n  event TickBorrow(\\n    bytes32 borrower,\\n    uint128 rate,\\n    uint128 adjustedRemainingAmountReduction,\\n    uint128 loanedAmount,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 unborrowedRatio\\n  );\\n  event TickWithdrawPending(bytes32 borrower, uint128 rate, uint128 adjustedAmountToWithdraw);\\n  event TickWithdrawRemaining(\\n    bytes32 borrower,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 accruedFeesToWithdraw\\n  );\\n  event TickPendingDeposit(\\n    bytes32 borrower,\\n    uint128 rate,\\n    uint128 adjustedPendingAmount,\\n    bool poolBondIssuanceIndexIncremented\\n  );\\n  event TopUpLiquidityRewards(bytes32 borrower, uint128 addedLiquidityRewards);\\n  event TickRepay(bytes32 borrower, uint128 rate, uint128 newAdjustedRemainingAmount, uint128 atlendisLiquidityRatio);\\n  event CollectFeesForTick(bytes32 borrower, uint128 rate, uint128 remainingLiquidityRewards, uint128 addedAccruedFees);\\n\\n  using PoolLogic for Types.Pool;\\n  using Uint128WadRayMath for uint128;\\n  using Rounding for uint128;\\n  using Scaling for uint128;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  uint256 public constant SECONDS_PER_YEAR = 365 days;\\n  uint256 public constant WAD = 1e18;\\n  uint256 public constant RAY = 1e27;\\n\\n  /**\\n   * @dev Getter for the multiplier allowing a conversion between pending and deposited\\n   * amounts for the target bonds issuance index\\n   **/\\n  function getBondIssuanceMultiplierForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 bondsIssuanceIndex\\n  ) internal view returns (uint128 returnBondsIssuanceMultiplier) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    returnBondsIssuanceMultiplier = tick.bondsIssuanceIndexMultiplier[bondsIssuanceIndex];\\n    if (returnBondsIssuanceMultiplier == 0) {\\n      returnBondsIssuanceMultiplier = uint128(RAY);\\n    }\\n  }\\n\\n  /**\\n   * @dev Get share of accumulated fees from stored current tick state\\n   **/\\n  function getAccruedFeesShare(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmount\\n  ) internal view returns (uint128 accruedFeesShare) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    accruedFeesShare = tick.accruedFees.wadMul(adjustedAmount).wadDiv(tick.adjustedRemainingAmount);\\n  }\\n\\n  /**\\n   * @dev Get share of accumulated fees from estimated current tick state\\n   **/\\n  function peekAccruedFeesShare(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 accruedFees\\n  ) public view returns (uint128 accruedFeesShare) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    if (tick.adjustedRemainingAmount == 0) {\\n      return 0;\\n    }\\n    accruedFeesShare = accruedFees.wadMul(adjustedAmount).wadDiv(tick.adjustedRemainingAmount);\\n  }\\n\\n  function getLateRepayFeePerBond(Types.Pool storage pool) public view returns (uint128 lateRepayFeePerBond) {\\n    uint256 lateRepaymentTimestamp = pool.state.currentMaturity + pool.parameters.REPAYMENT_PERIOD;\\n    if (block.timestamp > lateRepaymentTimestamp) {\\n      uint256 referenceTimestamp = pool.state.defaultTimestamp > 0 ? pool.state.defaultTimestamp : block.timestamp;\\n      lateRepayFeePerBond = uint128(\\n        uint256(referenceTimestamp - lateRepaymentTimestamp) * uint256(pool.parameters.LATE_REPAY_FEE_PER_BOND_RATE)\\n      );\\n    }\\n  }\\n\\n  function getRepaymentFees(Types.Pool storage pool, uint128 normalizedRepayAmount)\\n    public\\n    view\\n    returns (uint128 repaymentFees)\\n  {\\n    repaymentFees = (normalizedRepayAmount - pool.state.normalizedBorrowedAmount).wadMul(\\n      pool.parameters.REPAYMENT_FEE_RATE\\n    );\\n  }\\n\\n  /**\\n   * @dev The return value includes only notional and accrued interest,\\n   * it does not include any fees due for repay by the borrrower\\n   **/\\n  function getRepayValue(Types.Pool storage pool, bool earlyRepay) public view returns (uint128 repayValue) {\\n    if (pool.state.currentMaturity == 0) {\\n      return 0;\\n    }\\n    if (!earlyRepay) {\\n      // Note: Despite being in the context of a none early repay we prevent underflow in case of wrong user input\\n      // and allow querying expected bonds quantity if loan is repaid at maturity\\n      if (block.timestamp <= pool.state.currentMaturity) {\\n        return pool.state.bondsIssuedQuantity;\\n      }\\n    }\\n    for (\\n      uint128 rate = pool.state.lowerInterestRate;\\n      rate <= pool.parameters.MAX_RATE;\\n      rate += pool.parameters.RATE_SPACING\\n    ) {\\n      Types.Tick storage tick = pool.ticks[rate];\\n      repayValue += getTimeValue(pool, tick.bondsQuantity, rate);\\n    }\\n  }\\n\\n  function getTimeValue(\\n    Types.Pool storage pool,\\n    uint128 bondsQuantity,\\n    uint128 rate\\n  ) public view returns (uint128) {\\n    if (block.timestamp <= pool.state.currentMaturity) {\\n      return bondsQuantity.wadMul(getTickBondPrice(rate, uint128(pool.state.currentMaturity - block.timestamp)));\\n    }\\n    uint256 referenceTimestamp = uint128(block.timestamp);\\n    if (pool.state.defaultTimestamp > 0) {\\n      referenceTimestamp = pool.state.defaultTimestamp;\\n    }\\n    return bondsQuantity.wadDiv(getTickBondPrice(rate, uint128(referenceTimestamp - pool.state.currentMaturity)));\\n  }\\n\\n  /**\\n   * @dev Deposit to a target tick\\n   * Updates tick data\\n   **/\\n  function depositToTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 normalizedAmount\\n  ) public returns (uint128 adjustedAmount, uint128 returnBondsIssuanceIndex) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    pool.collectFees(rate);\\n\\n    // if there is an ongoing loan, the deposited amount goes to the pending\\n    // quantity and will be considered for next loan\\n    if (pool.state.currentMaturity > 0) {\\n      adjustedAmount = normalizedAmount.wadRayDiv(tick.yieldProviderLiquidityRatio);\\n      tick.adjustedPendingAmount += adjustedAmount;\\n      returnBondsIssuanceIndex = pool.state.currentBondsIssuanceIndex + 1;\\n      emit TickLoanDeposit(pool.parameters.POOL_HASH, rate, adjustedAmount);\\n    }\\n    // if there is no ongoing loan, the deposited amount goes to total and remaining\\n    // amount and can be borrowed instantaneously\\n    else {\\n      adjustedAmount = normalizedAmount.wadRayDiv(tick.atlendisLiquidityRatio);\\n      tick.adjustedTotalAmount += adjustedAmount;\\n      tick.adjustedRemainingAmount += adjustedAmount;\\n      returnBondsIssuanceIndex = pool.state.currentBondsIssuanceIndex;\\n      pool.state.normalizedAvailableDeposits += normalizedAmount;\\n\\n      // return amount adapted to bond index\\n      adjustedAmount = adjustedAmount.wadRayDiv(\\n        pool.getBondIssuanceMultiplierForTick(rate, pool.state.currentBondsIssuanceIndex)\\n      );\\n      emit TickNoLoanDeposit(pool.parameters.POOL_HASH, rate, adjustedAmount, tick.atlendisLiquidityRatio);\\n    }\\n    if ((pool.state.lowerInterestRate == 0) || (rate < pool.state.lowerInterestRate)) {\\n      pool.state.lowerInterestRate = rate;\\n    }\\n  }\\n\\n  /**\\n   * @dev Computes the quantity of bonds purchased, and the equivalent adjusted deposit amount used for the issuance\\n   **/\\n  function getBondsIssuanceParametersForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 normalizedRemainingAmount\\n  ) public returns (uint128 bondsPurchasedQuantity, uint128 normalizedUsedAmount) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio) >= normalizedRemainingAmount) {\\n      normalizedUsedAmount = normalizedRemainingAmount;\\n    } else if (\\n      tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio) + tick.accruedFees >=\\n      normalizedRemainingAmount\\n    ) {\\n      normalizedUsedAmount = normalizedRemainingAmount;\\n      tick.accruedFees -=\\n        normalizedRemainingAmount -\\n        tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio);\\n    } else {\\n      normalizedUsedAmount = tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio) + tick.accruedFees;\\n      tick.accruedFees = 0;\\n    }\\n    uint128 bondsPurchasePrice = getTickBondPrice(\\n      rate,\\n      pool.state.currentMaturity == 0\\n        ? pool.parameters.LOAN_DURATION\\n        : pool.state.currentMaturity - uint128(block.timestamp)\\n    );\\n    bondsPurchasedQuantity = normalizedUsedAmount.wadDiv(bondsPurchasePrice);\\n  }\\n\\n  /**\\n   * @dev Makes all the state changes necessary to add bonds to a tick\\n   * Updates tick data and conversion data\\n   **/\\n  function addBondsToTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 bondsIssuedQuantity,\\n    uint128 normalizedUsedAmountForPurchase\\n  ) public {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    // update global state for tick and pool\\n    tick.bondsQuantity += bondsIssuedQuantity;\\n    uint128 adjustedAmountForPurchase = normalizedUsedAmountForPurchase.wadRayDiv(tick.atlendisLiquidityRatio);\\n    if (adjustedAmountForPurchase > tick.adjustedRemainingAmount) {\\n      adjustedAmountForPurchase = tick.adjustedRemainingAmount;\\n    }\\n    tick.adjustedRemainingAmount -= adjustedAmountForPurchase;\\n    tick.normalizedLoanedAmount += normalizedUsedAmountForPurchase;\\n    // emit event with tick updates\\n    uint128 unborrowedRatio = tick.adjustedRemainingAmount.wadDiv(tick.adjustedTotalAmount);\\n    emit TickBorrow(\\n      pool.parameters.POOL_HASH,\\n      rate,\\n      adjustedAmountForPurchase,\\n      normalizedUsedAmountForPurchase,\\n      tick.atlendisLiquidityRatio,\\n      unborrowedRatio\\n    );\\n    pool.state.bondsIssuedQuantity += bondsIssuedQuantity;\\n    pool.state.normalizedAvailableDeposits -= normalizedUsedAmountForPurchase;\\n  }\\n\\n  /**\\n   * @dev Computes how the position is split between deposit and bonds\\n   **/\\n  function computeAmountRepartitionForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  ) public view returns (uint128 bondsQuantity, uint128 adjustedDepositedAmount) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (bondsIssuanceIndex > pool.state.currentBondsIssuanceIndex) {\\n      return (0, adjustedAmount);\\n    }\\n\\n    adjustedAmount = adjustedAmount.wadRayMul(pool.getBondIssuanceMultiplierForTick(rate, bondsIssuanceIndex));\\n    uint128 adjustedAmountUsedForBondsIssuance;\\n    if (tick.adjustedTotalAmount > 0) {\\n      adjustedAmountUsedForBondsIssuance = adjustedAmount\\n        .wadMul(tick.adjustedTotalAmount - tick.adjustedRemainingAmount)\\n        .wadDiv(tick.adjustedTotalAmount + tick.adjustedWithdrawnAmount);\\n    }\\n\\n    if (adjustedAmount >= adjustedAmountUsedForBondsIssuance) {\\n      if (tick.adjustedTotalAmount > tick.adjustedRemainingAmount) {\\n        bondsQuantity = tick.bondsQuantity.wadMul(adjustedAmountUsedForBondsIssuance).wadDiv(\\n          tick.adjustedTotalAmount - tick.adjustedRemainingAmount\\n        );\\n      }\\n      adjustedDepositedAmount = (adjustedAmount - adjustedAmountUsedForBondsIssuance);\\n    } else {\\n      /**\\n       * This condition is obtained when precision problems occur in the computation of `adjustedAmountUsedForBondsIssuance`.\\n       * Such problems have been observed when dealing with amounts way lower than a WAD.\\n       * In this case, the remaining and withdrawn amounts are assumed at 0.\\n       * Therefore, the deposited amount is returned as 0 and the bonds quantity is computed using only the adjusted total amount.\\n       */\\n      bondsQuantity = tick.bondsQuantity.wadMul(adjustedAmount).wadDiv(tick.adjustedTotalAmount);\\n      adjustedDepositedAmount = 0;\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates tick data after a withdrawal consisting of only amount deposited to yield provider\\n   **/\\n  function withdrawDepositedAmountForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 bondsIssuanceIndex\\n  ) public returns (uint128 normalizedAmountToWithdraw) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    pool.collectFees(rate);\\n\\n    if (bondsIssuanceIndex <= pool.state.currentBondsIssuanceIndex) {\\n      uint128 feesShareToWithdraw = pool.getAccruedFeesShare(rate, adjustedAmountToWithdraw);\\n      tick.accruedFees -= feesShareToWithdraw;\\n      tick.adjustedTotalAmount -= adjustedAmountToWithdraw;\\n      tick.adjustedRemainingAmount -= adjustedAmountToWithdraw;\\n\\n      normalizedAmountToWithdraw =\\n        adjustedAmountToWithdraw.wadRayMul(tick.atlendisLiquidityRatio) +\\n        feesShareToWithdraw;\\n      pool.state.normalizedAvailableDeposits -= normalizedAmountToWithdraw.round();\\n\\n      // register withdrawn amount from partially matched positions\\n      // to maintain the proportion of bonds in each subsequent position the same\\n      if (tick.bondsQuantity > 0) {\\n        tick.adjustedWithdrawnAmount += adjustedAmountToWithdraw;\\n      }\\n      emit TickWithdrawRemaining(\\n        pool.parameters.POOL_HASH,\\n        rate,\\n        adjustedAmountToWithdraw,\\n        tick.atlendisLiquidityRatio,\\n        feesShareToWithdraw\\n      );\\n    } else {\\n      tick.adjustedPendingAmount -= adjustedAmountToWithdraw;\\n      normalizedAmountToWithdraw = adjustedAmountToWithdraw.wadRayMul(tick.yieldProviderLiquidityRatio);\\n      emit TickWithdrawPending(pool.parameters.POOL_HASH, rate, adjustedAmountToWithdraw);\\n    }\\n\\n    // update lowerInterestRate if necessary\\n    if ((rate == pool.state.lowerInterestRate) && tick.adjustedTotalAmount == 0) {\\n      uint128 nextRate = rate + pool.parameters.RATE_SPACING;\\n      while (nextRate <= pool.parameters.MAX_RATE && pool.ticks[nextRate].adjustedTotalAmount == 0) {\\n        nextRate += pool.parameters.RATE_SPACING;\\n      }\\n      if (nextRate >= pool.parameters.MAX_RATE) {\\n        pool.state.lowerInterestRate = 0;\\n      } else {\\n        pool.state.lowerInterestRate = nextRate;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates tick data after a repayment\\n   **/\\n  function repayForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 lateRepayFeePerBond\\n  ) public returns (uint128 normalizedRepayAmountForTick, uint128 lateRepayFeeForTick) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.bondsQuantity > 0) {\\n      normalizedRepayAmountForTick = getTimeValue(pool, tick.bondsQuantity, rate);\\n      lateRepayFeeForTick = lateRepayFeePerBond.wadMul(normalizedRepayAmountForTick);\\n      uint128 bondPaidInterests = normalizedRepayAmountForTick - tick.normalizedLoanedAmount;\\n      // update liquidity ratio with interests from bonds, yield provider and liquidity rewards\\n      tick.atlendisLiquidityRatio += (tick.accruedFees + bondPaidInterests + lateRepayFeeForTick)\\n        .wadDiv(tick.adjustedTotalAmount)\\n        .wadToRay();\\n\\n      // update tick amounts\\n      tick.bondsQuantity = 0;\\n      tick.adjustedWithdrawnAmount = 0;\\n      tick.normalizedLoanedAmount = 0;\\n      tick.accruedFees = 0;\\n      tick.adjustedRemainingAmount = tick.adjustedTotalAmount;\\n      emit TickRepay(pool.parameters.POOL_HASH, rate, tick.adjustedTotalAmount, tick.atlendisLiquidityRatio);\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates tick data after a repayment\\n   **/\\n  function includePendingDepositsForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    bool bondsIssuanceIndexAlreadyIncremented\\n  ) internal returns (bool pendingDepositsExist) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.adjustedPendingAmount > 0) {\\n      if (!bondsIssuanceIndexAlreadyIncremented) {\\n        pool.state.currentBondsIssuanceIndex += 1;\\n      }\\n      // include pending deposit amount into tick excluding them from bonds interest from current issuance\\n      tick.bondsIssuanceIndexMultiplier[pool.state.currentBondsIssuanceIndex] = pool\\n        .state\\n        .yieldProviderLiquidityRatio\\n        .rayDiv(tick.atlendisLiquidityRatio);\\n      uint128 adjustedPendingAmount = tick.adjustedPendingAmount.wadRayMul(\\n        tick.bondsIssuanceIndexMultiplier[pool.state.currentBondsIssuanceIndex]\\n      );\\n\\n      // update global pool state\\n      pool.state.normalizedAvailableDeposits += tick.adjustedPendingAmount.wadRayMul(\\n        pool.state.yieldProviderLiquidityRatio\\n      );\\n\\n      // update tick amounts\\n      tick.adjustedTotalAmount += adjustedPendingAmount;\\n      tick.adjustedRemainingAmount = tick.adjustedTotalAmount;\\n      tick.adjustedPendingAmount = 0;\\n      emit TickPendingDeposit(\\n        pool.parameters.POOL_HASH,\\n        rate,\\n        adjustedPendingAmount,\\n        !bondsIssuanceIndexAlreadyIncremented\\n      );\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Top up liquidity rewards for later distribution\\n   **/\\n  function topUpLiquidityRewards(Types.Pool storage pool, uint128 normalizedAmount)\\n    public\\n    returns (uint128 yieldProviderLiquidityRatio)\\n  {\\n    yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome(address(pool.parameters.UNDERLYING_TOKEN))\\n    );\\n    pool.state.remainingAdjustedLiquidityRewardsReserve += normalizedAmount.wadRayDiv(yieldProviderLiquidityRatio);\\n  }\\n\\n  /**\\n   * @dev Distributes remaining liquidity rewards reserve to lenders\\n   * Called in case of pool default\\n   **/\\n  function distributeLiquidityRewards(Types.Pool storage pool) public returns (uint128 distributedLiquidityRewards) {\\n    uint128 currentInterestRate = pool.state.lowerInterestRate;\\n\\n    uint128 yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome(address(pool.parameters.UNDERLYING_TOKEN))\\n    );\\n\\n    distributedLiquidityRewards = pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(\\n      yieldProviderLiquidityRatio\\n    );\\n    pool.state.normalizedAvailableDeposits += distributedLiquidityRewards;\\n    pool.state.remainingAdjustedLiquidityRewardsReserve = 0;\\n\\n    while (pool.ticks[currentInterestRate].bondsQuantity > 0 && currentInterestRate <= pool.parameters.MAX_RATE) {\\n      pool.ticks[currentInterestRate].accruedFees += distributedLiquidityRewards\\n        .wadMul(pool.ticks[currentInterestRate].bondsQuantity)\\n        .wadDiv(pool.state.bondsIssuedQuantity);\\n      currentInterestRate += pool.parameters.RATE_SPACING;\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates tick data to reflect all fees accrued since last call\\n   * Accrued fees are composed of the yield provider liquidity ratio increase\\n   * and liquidity rewards paid by the borrower\\n   **/\\n  function collectFeesForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 yieldProviderLiquidityRatio\\n  ) internal {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    if (tick.lastFeeDistributionTimestamp < block.timestamp) {\\n      (\\n        uint128 updatedAtlendisLiquidityRatio,\\n        uint128 updatedAccruedFees,\\n        uint128 liquidityRewardsIncrease,\\n        uint128 yieldProviderLiquidityRatioIncrease\\n      ) = pool.peekFeesForTick(rate, yieldProviderLiquidityRatio);\\n\\n      // update global deposited amount\\n      pool.state.remainingAdjustedLiquidityRewardsReserve -= liquidityRewardsIncrease.wadRayDiv(\\n        yieldProviderLiquidityRatio\\n      );\\n      pool.state.normalizedAvailableDeposits +=\\n        liquidityRewardsIncrease +\\n        tick.adjustedRemainingAmount.wadRayMul(yieldProviderLiquidityRatioIncrease);\\n\\n      // update tick data\\n      uint128 accruedFeesIncrease = updatedAccruedFees - tick.accruedFees;\\n      if (tick.atlendisLiquidityRatio == 0) {\\n        tick.yieldProviderLiquidityRatio = yieldProviderLiquidityRatio;\\n        emit TickInitialized(pool.parameters.POOL_HASH, rate, yieldProviderLiquidityRatio);\\n      }\\n      tick.atlendisLiquidityRatio = updatedAtlendisLiquidityRatio;\\n      tick.accruedFees = updatedAccruedFees;\\n\\n      // update checkpoint data\\n      tick.lastFeeDistributionTimestamp = uint128(block.timestamp);\\n\\n      emit CollectFeesForTick(\\n        pool.parameters.POOL_HASH,\\n        rate,\\n        pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(yieldProviderLiquidityRatio),\\n        accruedFeesIncrease\\n      );\\n    }\\n  }\\n\\n  function collectFees(Types.Pool storage pool, uint128 rate) internal {\\n    uint128 yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome(address(pool.parameters.UNDERLYING_TOKEN))\\n    );\\n    pool.collectFeesForTick(rate, yieldProviderLiquidityRatio);\\n    pool.ticks[rate].yieldProviderLiquidityRatio = yieldProviderLiquidityRatio;\\n  }\\n\\n  function collectFees(Types.Pool storage pool) internal {\\n    uint128 yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome(address(pool.parameters.UNDERLYING_TOKEN))\\n    );\\n    for (\\n      uint128 currentInterestRate = pool.state.lowerInterestRate;\\n      currentInterestRate <= pool.parameters.MAX_RATE;\\n      currentInterestRate += pool.parameters.RATE_SPACING\\n    ) {\\n      pool.collectFeesForTick(currentInterestRate, yieldProviderLiquidityRatio);\\n    }\\n    pool.state.yieldProviderLiquidityRatio = yieldProviderLiquidityRatio;\\n  }\\n\\n  /**\\n   * @dev Peek updated liquidity ratio and accrued fess for the target tick\\n   * Used to compute a position balance without updating storage\\n   **/\\n  function peekFeesForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 yieldProviderLiquidityRatio\\n  )\\n    internal\\n    view\\n    returns (\\n      uint128 updatedAtlendisLiquidityRatio,\\n      uint128 updatedAccruedFees,\\n      uint128 liquidityRewardsIncrease,\\n      uint128 yieldProviderLiquidityRatioIncrease\\n    )\\n  {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.atlendisLiquidityRatio == 0) {\\n      return (yieldProviderLiquidityRatio, 0, 0, 0);\\n    }\\n\\n    updatedAtlendisLiquidityRatio = tick.atlendisLiquidityRatio;\\n    updatedAccruedFees = tick.accruedFees;\\n\\n    uint128 referenceLiquidityRatio;\\n    if (pool.state.yieldProviderLiquidityRatio > tick.yieldProviderLiquidityRatio) {\\n      referenceLiquidityRatio = pool.state.yieldProviderLiquidityRatio;\\n    } else {\\n      referenceLiquidityRatio = tick.yieldProviderLiquidityRatio;\\n    }\\n    yieldProviderLiquidityRatioIncrease = yieldProviderLiquidityRatio - referenceLiquidityRatio;\\n\\n    // get additional fees from liquidity rewards\\n    liquidityRewardsIncrease = pool.getLiquidityRewardsIncrease(rate);\\n    uint128 currentNormalizedRemainingLiquidityRewards = pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(\\n      yieldProviderLiquidityRatio\\n    );\\n    if (liquidityRewardsIncrease > currentNormalizedRemainingLiquidityRewards) {\\n      liquidityRewardsIncrease = currentNormalizedRemainingLiquidityRewards;\\n    }\\n    // if no ongoing loan, all deposited amount gets the yield provider\\n    // and liquidity rewards so the global liquidity ratio is updated\\n    if (pool.state.currentMaturity == 0) {\\n      updatedAtlendisLiquidityRatio += yieldProviderLiquidityRatioIncrease;\\n      if (tick.adjustedRemainingAmount > 0) {\\n        updatedAtlendisLiquidityRatio += liquidityRewardsIncrease.wadToRay().wadDiv(tick.adjustedRemainingAmount);\\n      }\\n    }\\n    // if ongoing loan, accruing fees components are added, liquidity ratio will be updated at repay time\\n    else {\\n      updatedAccruedFees +=\\n        tick.adjustedRemainingAmount.wadRayMul(yieldProviderLiquidityRatioIncrease) +\\n        liquidityRewardsIncrease;\\n    }\\n  }\\n\\n  /**\\n   * @dev Computes liquidity rewards amount to be paid to lenders since last fee collection\\n   * Liquidity rewards are paid to the unborrowed amount, and distributed to all ticks depending\\n   * on their normalized amounts\\n   **/\\n  function getLiquidityRewardsIncrease(Types.Pool storage pool, uint128 rate)\\n    internal\\n    view\\n    returns (uint128 liquidityRewardsIncrease)\\n  {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    if (pool.state.normalizedAvailableDeposits > 0) {\\n      liquidityRewardsIncrease = (pool.parameters.LIQUIDITY_REWARDS_DISTRIBUTION_RATE *\\n        (uint128(block.timestamp) - tick.lastFeeDistributionTimestamp))\\n        .wadMul(pool.parameters.MAX_BORROWABLE_AMOUNT - pool.state.normalizedBorrowedAmount)\\n        .wadDiv(pool.parameters.MAX_BORROWABLE_AMOUNT)\\n        .wadMul(tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio))\\n        .wadDiv(pool.state.normalizedAvailableDeposits);\\n    }\\n  }\\n\\n  function getTickBondPrice(uint128 rate, uint128 loanDuration) internal pure returns (uint128 price) {\\n    price = uint128(WAD).wadDiv(uint128(WAD + (uint256(rate) * uint256(loanDuration)) / uint256(SECONDS_PER_YEAR)));\\n  }\\n\\n  function depositToYieldProvider(\\n    Types.Pool storage pool,\\n    address from,\\n    uint128 normalizedAmount\\n  ) public {\\n    IERC20Upgradeable underlyingToken = IERC20Upgradeable(pool.parameters.UNDERLYING_TOKEN);\\n    uint128 scaledAmount = normalizedAmount.scaleFromWad(pool.parameters.TOKEN_DECIMALS);\\n    ILendingPool yieldProvider = pool.parameters.YIELD_PROVIDER;\\n    underlyingToken.safeIncreaseAllowance(address(yieldProvider), scaledAmount);\\n    underlyingToken.safeTransferFrom(from, address(this), scaledAmount);\\n    yieldProvider.deposit(pool.parameters.UNDERLYING_TOKEN, scaledAmount, address(this), 0);\\n  }\\n}\\n\",\"keccak256\":\"0xc785ec163092cb6e76b626d33f46288793840dd86417807fee63f5536f1ad635\",\"license\":\"AGPL-3.0\"},\"src/lib/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Roles {\\n  bytes32 public constant BORROWER_ROLE = keccak256(\\\"BORROWER_ROLE\\\");\\n  bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\n  bytes32 public constant POSITION_ROLE = keccak256(\\\"POSITION_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x4d1955fc650d8f3dd0bcfed9b58254a8d0b695a0a40e921626cafe59ab2d2dd0\",\"license\":\"AGPL-3.0\"},\"src/lib/Rounding.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Rounding library\\n * @author Atlendis\\n * @dev Rounding utilities to mitigate precision loss when doing wad ray math operations\\n **/\\nlibrary Rounding {\\n  using Rounding for uint128;\\n\\n  uint128 internal constant PRECISION = 1e3;\\n\\n  /**\\n   * @notice rounds the input number with the default precision\\n   **/\\n  function round(uint128 amount) internal pure returns (uint128) {\\n    return (amount / PRECISION) * PRECISION;\\n  }\\n}\\n\",\"keccak256\":\"0x9fa18d911c29545de2bc2164be48281a91cbb2633aeb1219044c24191fc9e991\",\"license\":\"AGPL-3.0\"},\"src/lib/Scaling.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Scaling library\\n * @author Atlendis\\n * @dev Scale an arbitrary number to or from WAD precision\\n **/\\nlibrary Scaling {\\n  uint256 internal constant WAD = 1e18;\\n\\n  /**\\n   * @notice Scales an input amount to wad precision\\n   **/\\n  function scaleToWad(uint128 a, uint256 precision) internal pure returns (uint128) {\\n    return uint128((uint256(a) * WAD) / 10**precision);\\n  }\\n\\n  /**\\n   * @notice Scales an input amount from wad to target precision\\n   **/\\n  function scaleFromWad(uint128 a, uint256 precision) internal pure returns (uint128) {\\n    return uint128((uint256(a) * 10**precision) / WAD);\\n  }\\n}\\n\",\"keccak256\":\"0x6e71c9cffacb1c38cb7badef347ca94c739b1aa576066963293111adc5d3ecac\",\"license\":\"AGPL-3.0\"},\"src/lib/Types.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"../extensions/AaveILendingPool.sol\\\";\\n\\nlibrary Types {\\n  struct PositionDetails {\\n    uint128 adjustedBalance;\\n    uint128 rate;\\n    bytes32 poolHash;\\n    address underlyingToken;\\n    uint128 bondsIssuanceIndex;\\n    uint128 remainingBonds;\\n    uint128 bondsMaturity;\\n    uint128 creationTimestamp;\\n  }\\n\\n  struct Tick {\\n    mapping(uint128 => uint128) bondsIssuanceIndexMultiplier;\\n    uint128 bondsQuantity;\\n    uint128 adjustedTotalAmount;\\n    uint128 adjustedRemainingAmount;\\n    uint128 adjustedWithdrawnAmount;\\n    uint128 adjustedPendingAmount;\\n    uint128 normalizedLoanedAmount;\\n    uint128 lastFeeDistributionTimestamp;\\n    uint128 atlendisLiquidityRatio;\\n    uint128 yieldProviderLiquidityRatio;\\n    uint128 accruedFees;\\n  }\\n\\n  struct PoolParameters {\\n    bytes32 POOL_HASH;\\n    address UNDERLYING_TOKEN;\\n    uint8 TOKEN_DECIMALS;\\n    ILendingPool YIELD_PROVIDER;\\n    uint128 MIN_RATE;\\n    uint128 MAX_RATE;\\n    uint128 RATE_SPACING;\\n    uint128 MAX_BORROWABLE_AMOUNT;\\n    uint128 LOAN_DURATION;\\n    uint128 LIQUIDITY_REWARDS_DISTRIBUTION_RATE;\\n    uint128 COOLDOWN_PERIOD;\\n    uint128 REPAYMENT_PERIOD;\\n    uint128 LATE_REPAY_FEE_PER_BOND_RATE;\\n    uint128 ESTABLISHMENT_FEE_RATE;\\n    uint128 REPAYMENT_FEE_RATE;\\n    uint128 LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD;\\n    bool EARLY_REPAY;\\n  }\\n\\n  struct PoolState {\\n    bool active;\\n    bool defaulted;\\n    bool closed;\\n    uint128 currentMaturity;\\n    uint128 bondsIssuedQuantity;\\n    uint128 normalizedBorrowedAmount;\\n    uint128 normalizedAvailableDeposits;\\n    uint128 lowerInterestRate;\\n    uint128 nextLoanMinStart;\\n    uint128 remainingAdjustedLiquidityRewardsReserve;\\n    uint128 yieldProviderLiquidityRatio;\\n    uint128 currentBondsIssuanceIndex;\\n    uint128 defaultTimestamp;\\n  }\\n\\n  struct Pool {\\n    PoolParameters parameters;\\n    PoolState state;\\n    mapping(uint256 => Tick) ticks;\\n  }\\n}\\n\",\"keccak256\":\"0x844c38abf924e0a1c03a91d04e70811af799980f77952534153a60e14d77c918\",\"license\":\"AGPL-3.0\"},\"src/lib/Uint128WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./WadRayMath.sol\\\";\\n\\n/**\\n * @title Uint128WadRayMath library\\n **/\\nlibrary Uint128WadRayMath {\\n  using WadRayMath for uint256;\\n\\n  /**\\n   * @dev Multiplies a wad to a ray, making back and forth conversions\\n   * @param a Wad\\n   * @param b Ray\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadRayMul(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadToRay().rayMul(uint256(b)).rayToWad());\\n  }\\n\\n  /**\\n   * @dev Divides a wad to a ray, making back and forth conversions\\n   * @param a Wad\\n   * @param b Ray\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadRayDiv(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadToRay().rayDiv(uint256(b)).rayToWad());\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).rayDiv(uint256(b)));\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadMul(uint256(b)));\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadDiv(uint256(b)));\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint128 a) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadToRay());\\n  }\\n}\\n\",\"keccak256\":\"0x16b72e9697bdf075947d8a060f38dad7cf800cf9b84faa9df1fa080b2d7f2078\",\"license\":\"AGPL-3.0\"},\"src/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    if (a > (type(uint256).max - halfWAD) / b) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (b == 0) {\\n      revert Errors.MATH_DIVISION_BY_ZERO();\\n    }\\n    uint256 halfB = b / 2;\\n\\n    if (a > (type(uint256).max - halfB) / WAD) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    if (a > (type(uint256).max - halfRAY) / b) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (b == 0) {\\n      revert Errors.MATH_DIVISION_BY_ZERO();\\n    }\\n    uint256 halfB = b / 2;\\n\\n    if (a > (type(uint256).max - halfB) / RAY) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    if (result < halfRatio) {\\n      revert Errors.MATH_ADDITION_OVERFLOW();\\n    }\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    if (result / WAD_RAY_RATIO != a) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xb9ff60d087061905349f37583ed712f057c165912c9cdbc454e927191774689d\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e6380620000216000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c8063a217fddf1161015c578063c6252dae116100ce578063dc3fbbbc11610087578063dc3fbbbc14610825578063ed156a8c14610838578063f3b0c7cc146108ef578063f3d1d26314610912578063f9ae48e014610925578063fe04d4c51461093857600080fd5b8063c6252dae146106a0578063c8954db9146106d3578063ce5be488146106e6578063d547741f146106f9578063d595408a1461070c578063db2de9521461081257600080fd5b8063b74e0b1311610120578063b74e0b1314610639578063c098dab81461064c578063c38262e31461065f578063c3d31fce14610672578063c4d66de81461067a578063c5ba771d1461068d57600080fd5b8063a217fddf146104f7578063a983dcc0146104ff578063aa5976c114610512578063aab19db414610613578063b4ce44e51461062657600080fd5b80635790966e116101f55780637ded35c5116101b95780637ded35c514610466578063817db73b146104a35780638f13efc4146104b657806391d14854146104c95780639611d5dd146104dc5780639f3a348e146104e457600080fd5b80635790966e146103b05780635c975abb146103c35780635e585644146103ce57806371075b79146103f457806373356df01461045357600080fd5b806336568abe1161024757806336568abe1461031857806339f735831461032b578063402d88831461035657806346d070121461035e5780634803779314610371578063518af6271461038457600080fd5b806301ffc9a714610284578063248a9ca3146102ac5780632f2ff15d146102dd57806330b12d05146102f2578063330ca03614610305575b600080fd5b61029761029236600461530f565b610958565b60405190151581526020015b60405180910390f35b6102cf6102ba366004615339565b60009081526065602052604090206001015490565b6040519081526020016102a3565b6102f06102eb366004615377565b61098f565b005b6102f06103003660046153c7565b6109ba565b6102f0610313366004615377565b610a72565b6102f0610326366004615377565b610d25565b61033e6103393660046153f3565b610da8565b6040516001600160801b0390911681526020016102a3565b6102f0610df5565b61033e61036c366004615418565b61143e565b6102f061037f36600461549b565b6114aa565b61033e610392366004615339565b600090815260ca60205260409020600f01546001600160801b031690565b6102f06103be3660046154b4565b6119f9565b60975460ff16610297565b6102976103dc366004615339565b600090815260ca602052604090206009015460ff1690565b610433610402366004615339565b600090815260ca6020526040902060078101546008909101546001600160801b03600160801b909204821692911690565b604080516001600160801b039384168152929091166020830152016102a3565b6102f06104613660046154d2565b611b26565b610479610474366004615509565b611d17565b604080516001600160801b03948516815292841660208401529216918101919091526060016102a3565b6102f06104b1366004615339565b611fef565b6102f06104c43660046153c7565b612029565b6102976104d7366004615377565b6120d4565b6102f06120ff565b61033e6104f2366004615339565b612123565b6102cf600081565b6102f061050d366004615339565b61215f565b6105a2610520366004615339565b600090815260ca602052604090206001810154600382015460048301546005840154600685015460078601546008909601546001600160a01b03909516966001600160801b0380861697600160801b96879004821697828716979687900483169683871696819004841695848116959082900485169493841693919092041690565b604080516001600160a01b03909c168c526001600160801b039a8b1660208d0152988a16988b019890985295881660608a0152938716608089015291861660a0880152851660c0870152841660e08601528316610100850152821661012084015216610140820152610160016102a3565b6102f06106213660046154b4565b612339565b610433610634366004615339565b612465565b610433610647366004615571565b6125e9565b61047961065a3660046155d4565b61282b565b6102f061066d3660046153c7565b612a50565b6102f0612b31565b6102f0610688366004615600565b612b52565b6102f061069b3660046153f3565b612c94565b61033e6106ae366004615339565b600090815260ca60205260409020600a0154630100000090046001600160801b031690565b6102f06106e136600461561d565b612ccf565b61033e6106f43660046153c7565b612f3c565b6102f0610707366004615377565b6131e8565b61079f61071a366004615339565b600090815260ca60205260409020600a810154600b820154600c830154600d840154600e9094015460ff80851696610100860482169662010000870490921695630100000090046001600160801b039081169581811695600160801b918290048316958382169591839004841694848316949284900483169383831693920490911690565b604080519c15158d529a151560208d0152981515998b01999099526001600160801b0396871660608b015294861660808a015292851660a089015290841660c0880152831660e08701528216610100860152811661012085015291821661014084015216610160820152610180016102a3565b6102f061082036600461563a565b61320e565b61033e610833366004615668565b61384c565b6108ad6108463660046153f3565b600091825260ca602090815260408084206001600160801b0393841685526010019091529091206001810154600282015460038301546004840154600590940154600160801b80850487169793871696948516959285169492819004831693910490911690565b604080516001600160801b03978816815295871660208701529386169385019390935290841660608401528316608083015290911660a082015260c0016102a3565b6109026108fd366004615571565b613af9565b6040516102a394939291906156c2565b6104336109203660046156ed565b613c0c565b6102f06109333660046153c7565b613ee4565b6102cf610946366004615600565b60c96020526000908152604090205481565b60006001600160e01b03198216637965db0b60e01b148061098957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152606560205260409020600101546109ab8133613f8f565b6109b58383613ff3565b505050565b600080516020615dce8339815191526109d38133613f8f565b600082815260ca60205260409020600a015460ff16610a0557604051630951899960e01b815260040160405180910390fd5b600082815260ca602090815260409182902060080180546001600160801b0319166001600160801b03871690811790915582519081529081018490527fe3ed7df90f4e708b201a97ff43820f24fa973238a9856a431e4c54ba31151bc991015b60405180910390a1505050565b600080516020615dce833981519152610a8b8133613f8f565b82610aa957604051635342e0a760e11b815260040160405180910390fd5b6001600160a01b038216610ad05760405163f15e745f60e01b815260040160405180910390fd5b600083815260ca6020526040902080548414610aff57604051630951899960e01b815260040160405180910390fd5b600a81015462010000900460ff1615610b2b5760405163235893eb60e21b815260040160405180910390fd5b600a8101805462ff0000191662010000179055600d8101546000906001600160801b03600160801b9091041615610cdc576002820154600183015460405163d15e005360e01b81526001600160a01b039182166004820152600092919091169063d15e00539060240160206040518083038186803b158015610bac57600080fd5b505afa158015610bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be49190615737565b600d840154909150610c0690600160801b90046001600160801b031682614079565b600d840180546001600160801b039081169091556002850154600089815260ca60205260409020600190810154908701549395506001600160a01b03918216936369328dec939190921691610c689187169060ff600160a01b909104166140a8565b886040518463ffffffff1660e01b8152600401610c8793929190615750565b602060405180830381600087803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd99190615737565b50505b604080518681526001600160801b03831660208201527fdb941e881e2a4a824775895cb9b4908cbc030460e7356912047a04e2c8f3281691015b60405180910390a15050505050565b6001600160a01b0381163314610d9a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610da482826140db565b5050565b600082815260ca602090815260408083206001600160801b038086168552601090910190925290912060040154600160801b900416806109895750676765c793fa10079d601b1b92915050565b60975460ff1615610e185760405162461bcd60e51b8152600401610d919061577c565b600080516020615dee833981519152610e318133613f8f565b33600090815260c9602090815260408083205480845260ca909252909120600a810154610100900460ff1615610e7a5760405163056efc7b60e01b815260040160405180910390fd5b600a810154630100000090046001600160801b0316610eac57604051631e13931b60e21b815260040160405180910390fd5b600a8101544263010000009091046001600160801b031611808015610ed65750600982015460ff16155b15610ef457604051632b604eef60e01b815260040160405180910390fd5b610efd82614142565b604051631d398d8d60e21b81526004810183905260009081908190819073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD906374e636349060240160206040518083038186803b158015610f5157600080fd5b505af4158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8991906157a6565b600c870154909150600160801b90046001600160801b03165b60038701546001600160801b03600160801b9091048116908216116110c557604051634de6e91560e01b8152600481018890526001600160801b03808316602483015283166044820152600090819073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD90634de6e91590606401604080518083038186803b15801561102757600080fd5b505af415801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f91906157c3565b909250905061106e8183615808565b6110789086615808565b94506110848188615808565b965060006110938a8589614252565b9050808061109e5750865b60048b01549097506110be93506001600160801b03169150839050615808565b9050610fa2565b50604051635ccb5f2f60e01b8152600481018790526001600160801b038316602482015260009073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD90635ccb5f2f9060440160206040518083038186803b15801561112357600080fd5b505af4158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b91906157a6565b90506111678184615808565b604051636839a26160e01b815290935073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD90636839a261906111a5908a9033908890600401615833565b60006040518083038186803b1580156111bd57600080fd5b505af41580156111d1573d6000803e3d6000fd5b50505060068801546111ed91506001600160801b031642615808565b600d880180546001600160801b039283166001600160801b031991821617909155600b890180549091169055600089815260cb602052604081208054849391929161123a91859116615808565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508287600a0160020160008282829054906101000a90046001600160801b03166112879190615808565b82546101009290920a6001600160801b038181021990931691831602179091556006890154600a8a01546112cf9350600160801b909104821691630100000090910416615808565b6001600160801b031642111561134f57600c870154600d880154604080516001600160801b038088168252808a16602083015280861692820192909252928116606084015216608082015288907f0a8858cdd0551a157921eb1032d7f466feec7752fffc78f8b3c52bb435e331b09060a0015b60405180910390a261140f565b600a8701544263010000009091046001600160801b031611156113b957600c870154600d8801546040518a927fa2b36883c3fcb197b500ec4377e7899f16820387a05442f947c237578dd03f819261134292889287926001600160801b03918216929116906156c2565b600c870154600d8801546040518a927fcde954d9667cdba90232367e5f743ea631856cdec43e595635130c08e20ffa939261140692889287926001600160801b03918216929116906156c2565b60405180910390a25b505050600a840180546301000000600160981b0319169055505050600b0180546001600160801b031690555050565b60008060ca6000868660405160200161145892919061585b565b60408051601f19818403018152918152815160209283012083528282019390935290820160009081206001600160801b03808816835260109091019092529190912060040154169150505b9392505050565b600080516020615dce8339815191526114c38133613f8f565b6114cc82614496565b604051806102200160405280836000013581526020018360200160208101906114f59190615600565b6001600160a01b031681526020018360200160208101906115169190615600565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561154e57600080fd5b505afa158015611562573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611586919061588a565b60ff16815260200161159e6060850160408601615600565b6001600160a01b031681526020016115bc608085016060860161561d565b6001600160801b031681526020016115da60a085016080860161561d565b6001600160801b031681526020016115f860c0850160a0860161561d565b6001600160801b0316815260200161161660e0850160c0860161561d565b6001600160801b03168152602001611635610100850160e0860161561d565b6001600160801b031681526020016116556101208501610100860161561d565b6001600160801b031681526020016116756101408501610120860161561d565b6001600160801b031681526020016116956101608501610140860161561d565b6001600160801b031681526020016116b56101808501610160860161561d565b6001600160801b031681526020016116d56101a08501610180860161561d565b6001600160801b031681526020016116f56101c085016101a0860161561d565b6001600160801b031681526020016117156101e085016101c0860161561d565b6001600160801b0316815260200161173561020085016101e086016158ad565b151590528235600090815260ca602090815260409182902083518155908301516001820180548585015160ff16600160a01b026001600160a81b03199091166001600160a01b0393841617179055606080850151600284018054919093166001600160a01b03199190911617909155608084015160a08501516001600160801b03908116600160801b90810292821692909217600385015560c086015160e08701518216830290821617600485015561010086015161012087015182168302908216176005850155610140860151610160870151821683029082161760068501556101808601516101a0870151821683029082161760078501556101c08601516101e087015182169092029116176008830155610200909301516009909101805491151560ff19909216919091179055611873918401908401615600565b6001600160a01b031663d15e00536118916040850160208601615600565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156118d057600080fd5b505afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119089190615737565b8235600090815260ca602052604090819020600e0180546001600160801b0319166001600160801b039390931692909217909155517fe71e8fe4301d57c752d83a095e456f17300a88ea18c7daef3b9e035a9ed1aa659061196a9084906158c8565b60405180910390a18135600090815260ca6020526040902060080154600160801b90046001600160801b0316610da4578135600090815260ca602052604090819020600a8101805460ff191660011790555490517f843e4390b5f579b124a883bb556fa80a421be9d5301b2e7267641cc23ea077e4916119ed9190815260200190565b60405180910390a15050565b600080516020615dce833981519152611a128133613f8f565b81611a3057604051635342e0a760e11b815260040160405180910390fd5b6001600160a01b038316611a575760405163f15e745f60e01b815260040160405180910390fd5b600082815260ca60205260409020548214611a8557604051630951899960e01b815260040160405180910390fd5b6001600160a01b038316600090815260c960205260409020548214611abd5760405163e2106cd360e01b815260040160405180910390fd5b611ad5600080516020615dee833981519152846131e8565b6001600160a01b038316600081815260c96020908152604080832092909255815192835282018490527fbca7a5cbff6e29c636e92cf5ee4128086f7e982204b0e420cb972819f12f88fe9101610a65565b600080516020615dce833981519152611b3f8133613f8f565b600084815260ca6020526040812060010154611b6f906001600160801b03861690600160a01b900460ff16614667565b600086815260ca60205260409020549091508514611ba057604051630951899960e01b815260040160405180910390fd5b600085815260cb60205260409020546001600160801b039081169082161115611bdc57604051639f747ffd60e01b815260040160405180910390fd5b600085815260cb602052604081208054839290611c039084906001600160801b0316615a5f565b82546001600160801b039182166101009390930a928302919092021990911617905550600085815260ca6020526040908190206002810154600191909101549151631a4ca37b60e21b81526001600160a01b03918216926369328dec92611c739291169088908890600401615750565b602060405180830381600087803b158015611c8d57600080fd5b505af1158015611ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc59190615737565b50604080518681526001600160801b03831660208201526001600160a01b038516918101919091527f150a2e161f87df4cc1b0c4345f9779d342fa2bcc2bf767efbb54005e811079f190606001610d16565b6000806000611d2860975460ff1690565b15611d455760405162461bcd60e51b8152600401610d919061577c565b600080516020615e0e833981519152611d5e8133613f8f565b600088815260ca60205260409020600a81015462010000900460ff1615611d985760405163df00603160e01b815260040160405180910390fd5b6000611da68a8a8d8a6125e9565b5090506001600160801b03811615611dd157604051630d290b7960e31b815260040160405180910390fd5b60038201546001600160801b039081169089161015611e035760405163fca6b5cd60e01b815260040160405180910390fd5b60038201546001600160801b03600160801b90910481169089161115611e3c576040516393c139e960e01b815260040160405180910390fd5b600482015460038301546001600160801b0391821691611e5d91168a615a5f565b611e679190615a9d565b6001600160801b031615611e8e5760405163270955a760e01b815260040160405180910390fd5b6000611eae611e9e848c8b61468f565b6001600160801b038e1690614079565b604051636ef48f5760e01b815290915073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD90636ef48f5790611eee9086908e9086908e90600401615ac3565b60206040518083038186803b158015611f0657600080fd5b505af4158015611f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3e91906157a6565b604051631cd2ca1960e11b8152600481018590526001600160801b03808c1660248301528216604482015290955073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD906339a5943290606401604080518083038186803b158015611fa257600080fd5b505af4158015611fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fda91906157c3565b909d909c50949a509398505050505050505050565b60975460ff16156120125760405162461bcd60e51b8152600401610d919061577c565b600081815260ca60205260409020610da481614142565b600080516020615dce8339815191526120428133613f8f565b600082815260ca6020526040902054821461207057604051630951899960e01b815260040160405180910390fd5b600082815260ca602090815260409182902060040180546001600160801b03908116600160801b9188169182021790915582519081529081018490527f796282fae5ebb944d98f910eb76fbde5bc1dc06dd9da67632dc4561d96e7c30d9101610a65565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020615dce8339815191526121188133613f8f565b6121206146da565b50565b600081815260ca602090815260408083206001015460cb909252822054610989916001600160801b0390911690600160a01b900460ff166140a8565b600080516020615dce8339815191526121788133613f8f565b600082815260ca60205260409020600a810154610100900460ff16156121b0576040516209157360e41b815260040160405180910390fd5b600a810154630100000090046001600160801b03166121e257604051633aa99c9b60e01b815260040160405180910390fd5b6006810154600a820154612210916001600160801b03600160801b9091048116916301000000900416615808565b6001600160801b031642101561223957604051632b797db960e11b815260040160405180910390fd5b600a8101805461010061ff0019909116179055600f810180546001600160801b031916426001600160801b0316179055604051631d8e67b960e31b81526004810182905260009073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD9063ec733dc89060240160206040518083038186803b1580156122b757600080fd5b505af41580156122cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ef91906157a6565b604080518681526001600160801b03831660208201529192507f4eb384de78f7c7a5dd1dc12268658939004561d9dc1572c852f6c0873cca67b2910160405180910390a150505050565b600080516020615dce8339815191526123528133613f8f565b8161237057604051635342e0a760e11b815260040160405180910390fd5b6001600160a01b0383166123975760405163f15e745f60e01b815260040160405180910390fd5b600082815260ca602052604090205482146123c557604051630951899960e01b815260040160405180910390fd5b6001600160a01b038316600090815260c96020526040902054156123fc5760405163a8b7bea160e01b815260040160405180910390fd5b612414600080516020615dee8339815191528461098f565b6001600160a01b038316600081815260c96020908152604091829020859055815192835282018490527f3a3825a3ceba48aadc12396e4232a6098dea62688b3cbc06d0f1f3ed26fbcc259101610a65565b600081815260ca60205260408120600a8101548291908190630100000090046001600160801b03166124b75760048201546124b090600160801b90046001600160801b031686612f3c565b93506125e2565b600381015460009081906001600160801b03165b600484015460038501546124f2916001600160801b0390811691600160801b900416615808565b6001600160801b0316816001600160801b0316146125c9576001600160801b03808216600090815260108701602052604090206003015461253c91600160801b909104168261476d565b6125469084615808565b6001600160801b03808316600090815260108801602052604090206003015491945061257a91600160801b90041683615808565b6001600160801b0380831660009081526010880160205260409020600301549193506125a7911687615808565b60048501549096506125c2906001600160801b031682615808565b90506124cb565b6125dc6001600160801b03841683614785565b96505050505b5050915091565b600084815260ca602052604080822060028101546001820154925163d15e005360e01b81526001600160a01b03938416600482015284938492169063d15e00539060240160206040518083038186803b15801561264557600080fd5b505afa158015612659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267d9190615737565b600e8301549091506001600160801b03600160801b909104811690861611156126c05760006126b56001600160801b03881683614079565b935093505050612822565b604051633d29c20960e01b815260009073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD90633d29c209906127009086908c908c908c90600401615ac3565b604080518083038186803b15801561271757600080fd5b505af415801561272b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274f91906157c3565b9095509050600080612762858b8661479d565b5050604051632ca9e11360e11b8152919350915060009073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD90635953c226906127a99089908f9089908890600401615ac3565b60206040518083038186803b1580156127c157600080fd5b505af41580156127d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f991906157a6565b90508061280f6001600160801b03861685614079565b6128199190615808565b96505050505050505b94509492505050565b600082815260ca6020526040808220905163839a9c2960e01b81526004810191909152821515602482015281908190819073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD9063839a9c299060440160206040518083038186803b15801561289357600080fd5b505af41580156128a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cb91906157a6565b600087815260ca6020526040908190209051631d398d8d60e21b815291925061297b91839173D2B8552104cf999e0EEad79800F0ff08CD4ED5FD916374e636349161291c9160040190815260200190565b60206040518083038186803b15801561293457600080fd5b505af4158015612948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296c91906157a6565b6001600160801b03169061476d565b600087815260ca6020526040902090935073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD90635ccb5f2f906129b28685615808565b6040516001600160e01b031960e085901b16815260048101929092526001600160801b0316602482015260440160206040518083038186803b1580156129f757600080fd5b505af4158015612a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2f91906157a6565b915082612a3c8383615808565b612a469190615808565b9350509250925092565b600080516020615dce833981519152612a698133613f8f565b600082815260ca60205260409020600a015460ff16612a9b57604051630951899960e01b815260040160405180910390fd5b670de0b6b3a7640000836001600160801b03161115612acd57604051633dedb6cb60e21b815260040160405180910390fd5b600082815260ca602090815260409182902060070180546001600160801b03908116600160801b9188169182021790915582519081529081018490527f738c64322e7db945ad7f301e0af4f8b02a5a5cb336140b950d2a7b4340569b7d9101610a65565b600080516020615dce833981519152612b4a8133613f8f565b612120614957565b600054610100900460ff16612b6d5760005460ff1615612b71565b303b155b612bd45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d91565b600054610100900460ff16158015612bf6576000805461ffff19166101011790555b612bfe6149af565b6001600160a01b038216612c10573391505b612c1b600083613ff3565b612c33600080516020615dce83398151915283613ff3565b612c59600080516020615dee833981519152600080516020615dce8339815191526149e8565b612c7f600080516020615e0e833981519152600080516020615dce8339815191526149e8565b8015610da4576000805461ff00191690555050565b60975460ff1615612cb75760405162461bcd60e51b8152600401610d919061577c565b600082815260ca602052604090206109b58183614a33565b60975460ff1615612cf25760405162461bcd60e51b8152600401610d919061577c565b600080516020615dee833981519152612d0b8133613f8f565b33600090815260c96020908152604080832054835260ca90915281206001810154909190612d4d906001600160801b03861690600160a01b900460ff16614667565b604051636839a26160e01b815290915073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD90636839a26190612d8b90859033908690600401615833565b60006040518083038186803b158015612da357600080fd5b505af4158015612db7573d6000803e3d6000fd5b5050604051631a727b1960e31b8152600481018590526001600160801b03841660248201526000925073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD915063d393d8c89060440160206040518083038186803b158015612e1857600080fd5b505af4158015612e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5091906157a6565b600a84015490915060ff16158015612e9957506008830154600d8401546001600160801b03600160801b92839004811692612e8d92041683614079565b6001600160801b031610155b15612eea57600a8301805460ff1916600117905582546040517f843e4390b5f579b124a883bb556fa80a421be9d5301b2e7267641cc23ea077e491612ee19190815260200190565b60405180910390a15b33600090815260c960209081526040918290205482519081526001600160801b038516918101919091527f4e4bba6240da8987fe01edc7c3e8498d355a5f0ad7eb7ff2995f3393d8c030a79101610d16565b600081815260ca60205260408120600a8101548190630100000090046001600160801b0316151580612f775750600a820154610100900460ff165b80612f8c5750600a82015462010000900460ff165b80612f9c5750600a82015460ff16155b15612fac57600092505050610989565b60048201546001600160801b03600160801b90910481169086161115612fe4576004820154600160801b90046001600160801b031694505b6002810154600182015460405163d15e005360e01b81526001600160a01b039182166004820152600092919091169063d15e00539060240160206040518083038186803b15801561303457600080fd5b505afa158015613048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306c9190615737565b60038401549091506001600160801b03168660005b600485015460038601546130a8916001600160801b0390811691600160801b900416615808565b6001600160801b0316836001600160801b0316146131955760006130cd87858761479d565b5050506001600160801b03808616600090815260108a016020526040812060020154929350916130fe911683614079565b9050836001600160801b0316816001600160801b0316101561314a576131248185615a5f565b93506131396001600160801b0382168661476d565b6131439084615808565b9250613174565b61315d6001600160801b0385168661476d565b6131679084615808565b9250600093505050613195565b5050600485015461318e906001600160801b031684615808565b9250613081565b816001600160801b0316896001600160801b031614156131be5760009650505050505050610989565b6131db6131cb838b615a5f565b6001600160801b03831690614785565b9998505050505050505050565b6000828152606560205260409020600101546132048133613f8f565b6109b583836140db565b60975460ff16156132315760405162461bcd60e51b8152600401610d919061577c565b600080516020615dee83398151915261324a8133613f8f565b33600090815260c9602090815260408083205480845260ca909252909120600a81015462010000900460ff16156132945760405163df00603160e01b815260040160405180910390fd5b600a810154610100900460ff16156132bf5760405163056efc7b60e01b815260040160405180910390fd5b600a810154630100000090046001600160801b0316158015906132f55750600a810154630100000090046001600160801b031642115b1561331357604051630fda546f60e41b815260040160405180910390fd5b6001810154600090613339906001600160801b03871690600160a01b900460ff16614667565b6007830154909150600090613361906001600160801b0380851691600160801b90041661476d565b9050600061336f8284615a5f565b6004850154600b8601549192506001600160801b03600160801b9182900481169261339e928792910416615808565b6001600160801b031611156133c65760405163aab4fe5160e01b815260040160405180910390fd5b600d8401546001600160801b03164210156133f45760405163af26604960e01b815260040160405180910390fd5b6133fd84614142565b600c8401546001600160801b03908116908416111561342f57604051634421566d60e11b815260040160405180910390fd5b6004840154600c850154849160009161345b916001600160801b0390811691600160801b900416615a5f565b90505b6000826001600160801b031611801561348e575060038601546001600160801b03600160801b9091048116908216105b156135f95760048601546134ab906001600160801b031682615808565b6001600160801b03808216600090815260108901602052604090206002015491925016156135f457604051634c5e028760e11b8152600481018790526001600160801b03808316602483015283166044820152600090819073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD906398bc050e90606401604080518083038186803b15801561353957600080fd5b505af415801561354d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357191906157c3565b60405163ca8701f360e01b8152919350915073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD9063ca8701f3906135b3908b90879087908790600401615ac3565b60006040518083038186803b1580156135cb57600080fd5b505af41580156135df573d6000803e3d6000fd5b5050505080846135ef9190615a5f565b935050505b61345e565b6001600160801b0382161561362157604051630f0b666f60e01b815260040160405180910390fd5b600a860154630100000090046001600160801b03166136bc576005860154613652906001600160801b031642615aea565b600a870180546301000000600160981b03191663010000006001600160801b0393841602179055604080518583168152918616602083015288917f02936c9aa03a5ee03914509058d0ab4fc30b8f8cb97922e9f8885bf0651263c0910160405180910390a2613702565b604080516001600160801b0380861682528616602082015288917f2a5361599b6218cb63221765b277f7026a473b717f40193ee25deae176e748dc910160405180910390a25b600087815260cb6020526040812080548692906137299084906001600160801b0316615808565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508486600a0160010160108282829054906101000a90046001600160801b03166137769190615808565b82546101009290920a6001600160801b03818102199093169183160217909155600288015460018901546001600160a01b0391821693506369328dec92918116916137ce9190881690600160a01b900460ff166140a8565b8d6040518463ffffffff1660e01b81526004016137ed93929190615750565b602060405180830381600087803b15801561380757600080fd5b505af115801561381b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061383f9190615737565b5050505050505050505050565b600061385a60975460ff1690565b156138775760405162461bcd60e51b8152600401610d919061577c565b600080516020615e0e8339815191526138908133613f8f565b600087815260ca60205260409020600e8101546138be90600160801b90046001600160801b03166001615808565b6001600160801b0316856001600160801b031611156138f05760405163019894df60e21b815260040160405180910390fd5b600e8101546001600160801b03600160801b90910481169086161180158161393657506001600160801b0380891660009081526010840160205260409020600201541615155b80613967575080801561396757506001600160801b0380891660009081526010840160205260409020600301541615155b6139845760405163436ec62560e01b815260040160405180910390fd5b6000876001600160801b0316116139ae57604051636ba603b360e11b815260040160405180910390fd5b604051636ef48f5760e01b815273D2B8552104cf999e0EEad79800F0ff08CD4ED5FD90636ef48f57906139eb9085908c908c908c90600401615ac3565b60206040518083038186803b158015613a0357600080fd5b505af4158015613a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3b91906157a6565b600283015460018401549195506001600160a01b03908116916369328dec91811690613a7b906001600160801b03891690600160a01b900460ff166140a8565b886040518463ffffffff1660e01b8152600401613a9a93929190615750565b602060405180830381600087803b158015613ab457600080fd5b505af1158015613ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aec9190615737565b5050505095945050505050565b600084815260ca60205260408120600a8101548291829182919060ff16613b335760405163c6d9b58160e01b815260040160405180910390fd5b604051633d29c20960e01b815273D2B8552104cf999e0EEad79800F0ff08CD4ED5FD90633d29c20990613b709084908c908c908c90600401615ac3565b604080518083038186803b158015613b8757600080fd5b505af4158015613b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bbf91906157c3565b95509250613be1613bd1828a8961468f565b6001600160801b03871690614aff565b935080600a0160000160039054906101000a90046001600160801b0316915050945094509450949050565b600080613c1b60975460ff1690565b15613c385760405162461bcd60e51b8152600401610d919061577c565b600080516020615e0e833981519152613c518133613f8f565b600087815260ca60205260409020600a810154610100900460ff1615613c8a5760405163056efc7b60e01b815260040160405180910390fd5b600a81015460ff16613caf5760405163c6d9b58160e01b815260040160405180910390fd5b600a81015462010000900460ff1615613cdb5760405163df00603160e01b815260040160405180910390fd5b60018101546001600160a01b03888116911614613d0b5760405163623957d360e01b815260040160405180910390fd5b60038101546001600160801b03908116908a161015613d3d5760405163fca6b5cd60e01b815260040160405180910390fd5b60038101546001600160801b03600160801b9091048116908a161115613d76576040516393c139e960e01b815260040160405180910390fd5b600481015460038201546001600160801b0391821691613d9791168b615a5f565b613da19190615a9d565b6001600160801b031615613dc85760405163270955a760e01b815260040160405180910390fd5b604051631cd2ca1960e11b8152600481018290526001600160801b03808b166024830152861660448201526000945084935073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD906339a5943290606401604080518083038186803b158015613e3057600080fd5b505af4158015613e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e6891906157c3565b604051636839a26160e01b8152919550935073D2B8552104cf999e0EEad79800F0ff08CD4ED5FD90636839a26190613ea89084908a908a90600401615833565b60006040518083038186803b158015613ec057600080fd5b505af4158015613ed4573d6000803e3d6000fd5b5050505050509550959350505050565b600080516020615dce833981519152613efd8133613f8f565b600082815260ca60205260409020548214613f2b57604051630951899960e01b815260040160405180910390fd5b600082815260ca602090815260409182902060050180546001600160801b03908116600160801b9188169182021790915582519081529081018490527f7016612eedf00917c664926ac3c77a4800fefe912e91632376418e8fc6e621619101610a65565b613f9982826120d4565b610da457613fb1816001600160a01b03166014614b29565b613fbc836020614b29565b604051602001613fcd929190615b2e565b60408051601f198184030181529082905262461bcd60e51b8252610d9191600401615ba3565b613ffd82826120d4565b610da45760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556140353390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006114a36140a3836001600160801b031661409d866001600160801b0316614cc5565b90614d04565b614d95565b6000670de0b6b3a76400006140be83600a615cba565b6140d1906001600160801b038616615cc6565b6114a39190615ce5565b6140e582826120d4565b15610da45760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6002810154600182015460405163d15e005360e01b81526001600160a01b039182166004820152600092919091169063d15e00539060240160206040518083038186803b15801561419257600080fd5b505afa1580156141a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141ca9190615737565b600c830154909150600160801b90046001600160801b03165b60038301546001600160801b03600160801b90910481169082161161422c5761420d838284614dee565b6004830154614225906001600160801b031682615808565b90506141e3565b50600e9190910180546001600160801b0319166001600160801b03909216919091179055565b6001600160801b0380831660009081526010850160205260408120600381015491929091161561448b57826142ce57600e85018054600191906010906142a9908490600160801b90046001600160801b0316615808565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b6004810154600e8601546142f6916001600160801b0391821691600160801b90910416615023565b600e86018054600160801b908190046001600160801b0390811660009081526020869052604080822080546001600160801b031916968416969096179095559254919091048116825291812054600384015491926143579281169116614079565b600e870154600384015491925061437a916001600160801b039081169116614079565b600c870180546000906143979084906001600160801b0316615808565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550808260010160108282829054906101000a90046001600160801b03166143e19190615808565b82546101009290920a6001600160801b038181021990931691831602179091556001840154600285018054600160801b90920483166001600160801b03199283161790556003850180549091169055875460408051918252888316602083015291841691810191909152851560608201527f6ed432acb9733bda7d5f090ab5f35a9a2e19974dba6ae2dd7078c84b92388f96915060800160405180910390a16001925050506114a3565b506000949350505050565b6144a660c0820160a0830161561d565b6144b6608083016060840161561d565b6144c660a084016080850161561d565b6144d09190615a5f565b6144da9190615a9d565b6001600160801b031615614501576040516334cc2fed60e01b815260040160405180910390fd5b803561452057604051635342e0a760e11b815260040160405180910390fd5b8035600090815260ca60205260409020541561454f57604051631953bac160e11b815260040160405180910390fd5b60006145616060830160408401615600565b6001600160a01b031663d15e005361457f6040850160208601615600565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156145be57600080fd5b505afa1580156145d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f69190615737565b9050676765c793fa10079d601b1b8110156146245760405163fee5a60360e01b815260040160405180910390fd5b670de0b6b3a764000061463f6101a08401610180850161561d565b6001600160801b03161115610da457604051633dedb6cb60e21b815260040160405180910390fd5b600061467482600a615cba565b6140d1670de0b6b3a76400006001600160801b038616615cc6565b6001600160801b03808316600090815260108501602090815260408083208585168452918290529091205490911690816146d257676765c793fa10079d601b1b91505b509392505050565b60975460ff166147235760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610d91565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006114a36001600160801b0384811690841661503b565b60006114a36001600160801b038481169084166150b2565b6001600160801b0380831660009081526010850160205260408120600481015491928392839283929091600160801b9004166147e75785600080600094509450945094505061494e565b60048101546005820154600e8a01546001600160801b03600160801b938490048116985092820483169650600092918216911611156148345750600e8801546001600160801b0316614844565b5060058101546001600160801b03165b61484e8188615a5f565b925061485a8989615147565b600d8a015490945060009061487f90600160801b90046001600160801b031689614079565b9050806001600160801b0316856001600160801b0316111561489f578094505b600a8a0154630100000090046001600160801b0316614919576148c28488615808565b60028401549097506001600160801b031615614914576002830154614907906001600160801b03908116906148f890881661521a565b6001600160801b031690614785565b6149119088615808565b96505b61494a565b60028301548590614933906001600160801b031686614079565b61493d9190615808565b6149479087615808565b95505b5050505b93509350935093565b60975460ff161561497a5760405162461bcd60e51b8152600401610d919061577c565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586147503390565b600054610100900460ff166149d65760405162461bcd60e51b8152600401610d9190615cf9565b6149de61522e565b6149e6615255565b565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6002820154600183015460405163d15e005360e01b81526001600160a01b039182166004820152600092919091169063d15e00539060240160206040518083038186803b158015614a8357600080fd5b505afa158015614a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614abb9190615737565b9050614ac8838383614dee565b6001600160801b039182166000908152601090930160205260409092206005018054919092166001600160801b0319909116179055565b60006114a36140a3836001600160801b0316614b23866001600160801b0316614cc5565b90615288565b60606000614b38836002615cc6565b614b43906002615aea565b67ffffffffffffffff811115614b5b57614b5b615d44565b6040519080825280601f01601f191660200182016040528015614b85576020820181803683370190505b509050600360fc1b81600081518110614ba057614ba0615d5a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614bcf57614bcf615d5a565b60200101906001600160f81b031916908160001a9053506000614bf3846002615cc6565b614bfe906001615aea565b90505b6001811115614c76576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614c3257614c32615d5a565b1a60f81b828281518110614c4857614c48615d5a565b60200101906001600160f81b031916908160001a90535060049490941c93614c6f81615d70565b9050614c01565b5083156114a35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d91565b600080614cd6633b9aca0084615cc6565b905082614ce7633b9aca0083615ce5565b146109895760405162a748d160e21b815260040160405180910390fd5b6000821580614d11575081155b15614d1e57506000610989565b81614d356002676765c793fa10079d601b1b615ce5565b614d4190600019615d87565b614d4b9190615ce5565b831115614d6a5760405162a748d160e21b815260040160405180910390fd5b676765c793fa10079d601b1b614d81600282615ce5565b614d8b8486615cc6565b6140d19190615aea565b600080614da76002633b9aca00615ce5565b90506000614db58483615aea565b905081811015614dd8576040516307af724160e11b815260040160405180910390fd5b614de6633b9aca0082615ce5565b949350505050565b6001600160801b038083166000908152601085016020526040902060048101549091429116101561501d576000808080614e2988888861479d565b92965090945092509050614e466001600160801b03831687614aff565b600d89018054601090614e6a908490600160801b90046001600160801b0316615a5f565b82546101009290920a6001600160801b038181021990931691831602179091556002870154614e9b92501682614079565b614ea59083615808565b600c89018054600090614ec29084906001600160801b0316615808565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060008560050160109054906101000a90046001600160801b031684614f0b9190615a5f565b6004870154909150600160801b90046001600160801b0316614f8b576005860180546001600160801b0319166001600160801b038981169182179092558a5460408051918252928b166020820152918201527f1ffcce3f36329128f865c47cacfc17ad27e65f7039d7aacd9d6350644c465a919060600160405180910390a15b6005860180546001600160801b03908116600160801b8783168102919091179092556001600160801b03198782168302164282161760048901558a54600d8c01547fda58df82953130c96b08dcda8a76478b2a4e0c16cddf3e59ac1ccf39d7b027639391928c92614ffe9204168b614079565b8460405161500f9493929190615ac3565b60405180910390a150505050505b50505050565b60006114a36001600160801b03848116908416615288565b6000821580615048575081155b1561505557506000610989565b816150696002670de0b6b3a7640000615ce5565b61507590600019615d87565b61507f9190615ce5565b83111561509e5760405162a748d160e21b815260040160405180910390fd5b670de0b6b3a7640000614d81600282615ce5565b6000816150d2576040516308693c7b60e31b815260040160405180910390fd5b60006150df600284615ce5565b9050670de0b6b3a76400006150f682600019615d87565b6151009190615ce5565b84111561511f5760405162a748d160e21b815260040160405180910390fd5b8281615133670de0b6b3a764000087615cc6565b61513d9190615aea565b614de69190615ce5565b6001600160801b0380821660009081526010840160205260408120600c85015491929091161561521357600c84015460048201546002830154614de6926001600160801b03908116926148f8926151a99290811691600160801b900416614079565b6004880154600b89015461296c916001600160801b03600160801b918290048116926148f8926151dc9291041683615a5f565b60048901546151f4906001600160801b031642615a5f565b60058d015461296c9190600160801b90046001600160801b0316615d9e565b5092915050565b6000610989826001600160801b0316614cc5565b600054610100900460ff166149e65760405162461bcd60e51b8152600401610d9190615cf9565b600054610100900460ff1661527c5760405162461bcd60e51b8152600401610d9190615cf9565b6097805460ff19169055565b6000816152a8576040516308693c7b60e31b815260040160405180910390fd5b60006152b5600284615ce5565b9050676765c793fa10079d601b1b6152cf82600019615d87565b6152d99190615ce5565b8411156152f85760405162a748d160e21b815260040160405180910390fd5b8281615133676765c793fa10079d601b1b87615cc6565b60006020828403121561532157600080fd5b81356001600160e01b0319811681146114a357600080fd5b60006020828403121561534b57600080fd5b5035919050565b6001600160a01b038116811461212057600080fd5b803561537281615352565b919050565b6000806040838503121561538a57600080fd5b82359150602083013561539c81615352565b809150509250929050565b6001600160801b038116811461212057600080fd5b8035615372816153a7565b600080604083850312156153da57600080fd5b82356153e5816153a7565b946020939093013593505050565b6000806040838503121561540657600080fd5b82359150602083013561539c816153a7565b60008060006040848603121561542d57600080fd5b833567ffffffffffffffff8082111561544557600080fd5b818601915086601f83011261545957600080fd5b81358181111561546857600080fd5b87602082850101111561547a57600080fd5b60209283019550935050840135615490816153a7565b809150509250925092565b600061020082840312156154ae57600080fd5b50919050565b600080604083850312156154c757600080fd5b82356153e581615352565b6000806000606084860312156154e757600080fd5b8335925060208401356154f9816153a7565b9150604084013561549081615352565b600080600080600060a0868803121561552157600080fd5b853561552c816153a7565b9450602086013593506040860135615543816153a7565b92506060860135615553816153a7565b91506080860135615563816153a7565b809150509295509295909350565b6000806000806080858703121561558757600080fd5b843593506020850135615599816153a7565b925060408501356155a9816153a7565b915060608501356155b9816153a7565b939692955090935050565b8035801515811461537257600080fd5b600080604083850312156155e757600080fd5b823591506155f7602084016155c4565b90509250929050565b60006020828403121561561257600080fd5b81356114a381615352565b60006020828403121561562f57600080fd5b81356114a3816153a7565b6000806040838503121561564d57600080fd5b823561565881615352565b9150602083013561539c816153a7565b600080600080600060a0868803121561568057600080fd5b853594506020860135615692816153a7565b935060408601356156a2816153a7565b925060608601356156b2816153a7565b9150608086013561556381615352565b6001600160801b03948516815292841660208401529083166040830152909116606082015260800190565b600080600080600060a0868803121561570557600080fd5b8535615710816153a7565b945060208601359350604086013561572781615352565b9250606086013561555381615352565b60006020828403121561574957600080fd5b5051919050565b6001600160a01b0393841681526001600160801b03929092166020830152909116604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6000602082840312156157b857600080fd5b81516114a3816153a7565b600080604083850312156157d657600080fd5b82516157e1816153a7565b602084015190925061539c816153a7565b634e487b7160e01b600052601160045260246000fd5b60006001600160801b0380831681851680830382111561582a5761582a6157f2565b01949350505050565b9283526001600160a01b039190911660208301526001600160801b0316604082015260600190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006020828403121561589c57600080fd5b815160ff811681146114a357600080fd5b6000602082840312156158bf57600080fd5b6114a3826155c4565b8135815261020081016158dd60208401615367565b6001600160a01b031660208301526158f760408401615367565b6001600160a01b03166040830152615911606084016153bc565b6001600160801b0316606083015261592b608084016153bc565b6001600160801b0316608083015261594560a084016153bc565b6001600160801b031660a083015261595f60c084016153bc565b6001600160801b031660c083015261597960e084016153bc565b6001600160801b031660e08301526101006159958482016153bc565b6001600160801b0316908301526101206159b08482016153bc565b6001600160801b0316908301526101406159cb8482016153bc565b6001600160801b0316908301526101606159e68482016153bc565b6001600160801b031690830152610180615a018482016153bc565b6001600160801b0316908301526101a0615a1c8482016153bc565b6001600160801b0316908301526101c0615a378482016153bc565b6001600160801b0316908301526101e0615a528482016155c4565b1515920191909152919050565b60006001600160801b0383811690831681811015615a7f57615a7f6157f2565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160801b0380841680615ab757615ab7615a87565b92169190910692915050565b9384526001600160801b039283166020850152908216604084015216606082015260800190565b60008219821115615afd57615afd6157f2565b500190565b60005b83811015615b1d578181015183820152602001615b05565b8381111561501d5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615b66816017850160208801615b02565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615b97816028840160208801615b02565b01602801949350505050565b6020815260008251806020840152615bc2816040850160208701615b02565b601f01601f19169190910160400192915050565b600181815b80851115615c11578160001904821115615bf757615bf76157f2565b80851615615c0457918102915b93841c9390800290615bdb565b509250929050565b600082615c2857506001610989565b81615c3557506000610989565b8160018114615c4b5760028114615c5557615c71565b6001915050610989565b60ff841115615c6657615c666157f2565b50506001821b610989565b5060208310610133831016604e8410600b8410161715615c94575081810a610989565b615c9e8383615bd6565b8060001904821115615cb257615cb26157f2565b029392505050565b60006114a38383615c19565b6000816000190483118215151615615ce057615ce06157f2565b500290565b600082615cf457615cf4615a87565b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081615d7f57615d7f6157f2565b506000190190565b600082821015615d9957615d996157f2565b500390565b60006001600160801b0380831681851681830481118215151615615dc457615dc46157f2565b0294935050505056fe71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb12344277e405079ec07749d374ba0b5862a4e45a6a05ac889dbb4a991c6f9354d27160668f6d81898b09bdae61c61d2c7d23fe33a52ae9b38e5b92f00ced3806ba2646970667358221220306be898b2c1eb91cd9390e9302219603ccf20cc4e7a9868384625687266a86564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c8063a217fddf1161015c578063c6252dae116100ce578063dc3fbbbc11610087578063dc3fbbbc14610825578063ed156a8c14610838578063f3b0c7cc146108ef578063f3d1d26314610912578063f9ae48e014610925578063fe04d4c51461093857600080fd5b8063c6252dae146106a0578063c8954db9146106d3578063ce5be488146106e6578063d547741f146106f9578063d595408a1461070c578063db2de9521461081257600080fd5b8063b74e0b1311610120578063b74e0b1314610639578063c098dab81461064c578063c38262e31461065f578063c3d31fce14610672578063c4d66de81461067a578063c5ba771d1461068d57600080fd5b8063a217fddf146104f7578063a983dcc0146104ff578063aa5976c114610512578063aab19db414610613578063b4ce44e51461062657600080fd5b80635790966e116101f55780637ded35c5116101b95780637ded35c514610466578063817db73b146104a35780638f13efc4146104b657806391d14854146104c95780639611d5dd146104dc5780639f3a348e146104e457600080fd5b80635790966e146103b05780635c975abb146103c35780635e585644146103ce57806371075b79146103f457806373356df01461045357600080fd5b806336568abe1161024757806336568abe1461031857806339f735831461032b578063402d88831461035657806346d070121461035e5780634803779314610371578063518af6271461038457600080fd5b806301ffc9a714610284578063248a9ca3146102ac5780632f2ff15d146102dd57806330b12d05146102f2578063330ca03614610305575b600080fd5b61029761029236600461530f565b610958565b60405190151581526020015b60405180910390f35b6102cf6102ba366004615339565b60009081526065602052604090206001015490565b6040519081526020016102a3565b6102f06102eb366004615377565b61098f565b005b6102f06103003660046153c7565b6109ba565b6102f0610313366004615377565b610a72565b6102f0610326366004615377565b610d25565b61033e6103393660046153f3565b610da8565b6040516001600160801b0390911681526020016102a3565b6102f0610df5565b61033e61036c366004615418565b61143e565b6102f061037f36600461549b565b6114aa565b61033e610392366004615339565b600090815260ca60205260409020600f01546001600160801b031690565b6102f06103be3660046154b4565b6119f9565b60975460ff16610297565b6102976103dc366004615339565b600090815260ca602052604090206009015460ff1690565b610433610402366004615339565b600090815260ca6020526040902060078101546008909101546001600160801b03600160801b909204821692911690565b604080516001600160801b039384168152929091166020830152016102a3565b6102f06104613660046154d2565b611b26565b610479610474366004615509565b611d17565b604080516001600160801b03948516815292841660208401529216918101919091526060016102a3565b6102f06104b1366004615339565b611fef565b6102f06104c43660046153c7565b612029565b6102976104d7366004615377565b6120d4565b6102f06120ff565b61033e6104f2366004615339565b612123565b6102cf600081565b6102f061050d366004615339565b61215f565b6105a2610520366004615339565b600090815260ca602052604090206001810154600382015460048301546005840154600685015460078601546008909601546001600160a01b03909516966001600160801b0380861697600160801b96879004821697828716979687900483169683871696819004841695848116959082900485169493841693919092041690565b604080516001600160a01b03909c168c526001600160801b039a8b1660208d0152988a16988b019890985295881660608a0152938716608089015291861660a0880152851660c0870152841660e08601528316610100850152821661012084015216610140820152610160016102a3565b6102f06106213660046154b4565b612339565b610433610634366004615339565b612465565b610433610647366004615571565b6125e9565b61047961065a3660046155d4565b61282b565b6102f061066d3660046153c7565b612a50565b6102f0612b31565b6102f0610688366004615600565b612b52565b6102f061069b3660046153f3565b612c94565b61033e6106ae366004615339565b600090815260ca60205260409020600a0154630100000090046001600160801b031690565b6102f06106e136600461561d565b612ccf565b61033e6106f43660046153c7565b612f3c565b6102f0610707366004615377565b6131e8565b61079f61071a366004615339565b600090815260ca60205260409020600a810154600b820154600c830154600d840154600e9094015460ff80851696610100860482169662010000870490921695630100000090046001600160801b039081169581811695600160801b918290048316958382169591839004841694848316949284900483169383831693920490911690565b604080519c15158d529a151560208d0152981515998b01999099526001600160801b0396871660608b015294861660808a015292851660a089015290841660c0880152831660e08701528216610100860152811661012085015291821661014084015216610160820152610180016102a3565b6102f061082036600461563a565b61320e565b61033e610833366004615668565b61384c565b6108ad6108463660046153f3565b600091825260ca602090815260408084206001600160801b0393841685526010019091529091206001810154600282015460038301546004840154600590940154600160801b80850487169793871696948516959285169492819004831693910490911690565b604080516001600160801b03978816815295871660208701529386169385019390935290841660608401528316608083015290911660a082015260c0016102a3565b6109026108fd366004615571565b613af9565b6040516102a394939291906156c2565b6104336109203660046156ed565b613c0c565b6102f06109333660046153c7565b613ee4565b6102cf610946366004615600565b60c96020526000908152604090205481565b60006001600160e01b03198216637965db0b60e01b148061098957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152606560205260409020600101546109ab8133613f8f565b6109b58383613ff3565b505050565b600080516020615dce8339815191526109d38133613f8f565b600082815260ca60205260409020600a015460ff16610a0557604051630951899960e01b815260040160405180910390fd5b600082815260ca602090815260409182902060080180546001600160801b0319166001600160801b03871690811790915582519081529081018490527fe3ed7df90f4e708b201a97ff43820f24fa973238a9856a431e4c54ba31151bc991015b60405180910390a1505050565b600080516020615dce833981519152610a8b8133613f8f565b82610aa957604051635342e0a760e11b815260040160405180910390fd5b6001600160a01b038216610ad05760405163f15e745f60e01b815260040160405180910390fd5b600083815260ca6020526040902080548414610aff57604051630951899960e01b815260040160405180910390fd5b600a81015462010000900460ff1615610b2b5760405163235893eb60e21b815260040160405180910390fd5b600a8101805462ff0000191662010000179055600d8101546000906001600160801b03600160801b9091041615610cdc576002820154600183015460405163d15e005360e01b81526001600160a01b039182166004820152600092919091169063d15e00539060240160206040518083038186803b158015610bac57600080fd5b505afa158015610bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be49190615737565b600d840154909150610c0690600160801b90046001600160801b031682614079565b600d840180546001600160801b039081169091556002850154600089815260ca60205260409020600190810154908701549395506001600160a01b03918216936369328dec939190921691610c689187169060ff600160a01b909104166140a8565b886040518463ffffffff1660e01b8152600401610c8793929190615750565b602060405180830381600087803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd99190615737565b50505b604080518681526001600160801b03831660208201527fdb941e881e2a4a824775895cb9b4908cbc030460e7356912047a04e2c8f3281691015b60405180910390a15050505050565b6001600160a01b0381163314610d9a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610da482826140db565b5050565b600082815260ca602090815260408083206001600160801b038086168552601090910190925290912060040154600160801b900416806109895750676765c793fa10079d601b1b92915050565b60975460ff1615610e185760405162461bcd60e51b8152600401610d919061577c565b600080516020615dee833981519152610e318133613f8f565b33600090815260c9602090815260408083205480845260ca909252909120600a810154610100900460ff1615610e7a5760405163056efc7b60e01b815260040160405180910390fd5b600a810154630100000090046001600160801b0316610eac57604051631e13931b60e21b815260040160405180910390fd5b600a8101544263010000009091046001600160801b031611808015610ed65750600982015460ff16155b15610ef457604051632b604eef60e01b815260040160405180910390fd5b610efd82614142565b604051631d398d8d60e21b81526004810183905260009081908190819073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__906374e636349060240160206040518083038186803b158015610f5157600080fd5b505af4158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8991906157a6565b600c870154909150600160801b90046001600160801b03165b60038701546001600160801b03600160801b9091048116908216116110c557604051634de6e91560e01b8152600481018890526001600160801b03808316602483015283166044820152600090819073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90634de6e91590606401604080518083038186803b15801561102757600080fd5b505af415801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f91906157c3565b909250905061106e8183615808565b6110789086615808565b94506110848188615808565b965060006110938a8589614252565b9050808061109e5750865b60048b01549097506110be93506001600160801b03169150839050615808565b9050610fa2565b50604051635ccb5f2f60e01b8152600481018790526001600160801b038316602482015260009073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90635ccb5f2f9060440160206040518083038186803b15801561112357600080fd5b505af4158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b91906157a6565b90506111678184615808565b604051636839a26160e01b815290935073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90636839a261906111a5908a9033908890600401615833565b60006040518083038186803b1580156111bd57600080fd5b505af41580156111d1573d6000803e3d6000fd5b50505060068801546111ed91506001600160801b031642615808565b600d880180546001600160801b039283166001600160801b031991821617909155600b890180549091169055600089815260cb602052604081208054849391929161123a91859116615808565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508287600a0160020160008282829054906101000a90046001600160801b03166112879190615808565b82546101009290920a6001600160801b038181021990931691831602179091556006890154600a8a01546112cf9350600160801b909104821691630100000090910416615808565b6001600160801b031642111561134f57600c870154600d880154604080516001600160801b038088168252808a16602083015280861692820192909252928116606084015216608082015288907f0a8858cdd0551a157921eb1032d7f466feec7752fffc78f8b3c52bb435e331b09060a0015b60405180910390a261140f565b600a8701544263010000009091046001600160801b031611156113b957600c870154600d8801546040518a927fa2b36883c3fcb197b500ec4377e7899f16820387a05442f947c237578dd03f819261134292889287926001600160801b03918216929116906156c2565b600c870154600d8801546040518a927fcde954d9667cdba90232367e5f743ea631856cdec43e595635130c08e20ffa939261140692889287926001600160801b03918216929116906156c2565b60405180910390a25b505050600a840180546301000000600160981b0319169055505050600b0180546001600160801b031690555050565b60008060ca6000868660405160200161145892919061585b565b60408051601f19818403018152918152815160209283012083528282019390935290820160009081206001600160801b03808816835260109091019092529190912060040154169150505b9392505050565b600080516020615dce8339815191526114c38133613f8f565b6114cc82614496565b604051806102200160405280836000013581526020018360200160208101906114f59190615600565b6001600160a01b031681526020018360200160208101906115169190615600565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561154e57600080fd5b505afa158015611562573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611586919061588a565b60ff16815260200161159e6060850160408601615600565b6001600160a01b031681526020016115bc608085016060860161561d565b6001600160801b031681526020016115da60a085016080860161561d565b6001600160801b031681526020016115f860c0850160a0860161561d565b6001600160801b0316815260200161161660e0850160c0860161561d565b6001600160801b03168152602001611635610100850160e0860161561d565b6001600160801b031681526020016116556101208501610100860161561d565b6001600160801b031681526020016116756101408501610120860161561d565b6001600160801b031681526020016116956101608501610140860161561d565b6001600160801b031681526020016116b56101808501610160860161561d565b6001600160801b031681526020016116d56101a08501610180860161561d565b6001600160801b031681526020016116f56101c085016101a0860161561d565b6001600160801b031681526020016117156101e085016101c0860161561d565b6001600160801b0316815260200161173561020085016101e086016158ad565b151590528235600090815260ca602090815260409182902083518155908301516001820180548585015160ff16600160a01b026001600160a81b03199091166001600160a01b0393841617179055606080850151600284018054919093166001600160a01b03199190911617909155608084015160a08501516001600160801b03908116600160801b90810292821692909217600385015560c086015160e08701518216830290821617600485015561010086015161012087015182168302908216176005850155610140860151610160870151821683029082161760068501556101808601516101a0870151821683029082161760078501556101c08601516101e087015182169092029116176008830155610200909301516009909101805491151560ff19909216919091179055611873918401908401615600565b6001600160a01b031663d15e00536118916040850160208601615600565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156118d057600080fd5b505afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119089190615737565b8235600090815260ca602052604090819020600e0180546001600160801b0319166001600160801b039390931692909217909155517fe71e8fe4301d57c752d83a095e456f17300a88ea18c7daef3b9e035a9ed1aa659061196a9084906158c8565b60405180910390a18135600090815260ca6020526040902060080154600160801b90046001600160801b0316610da4578135600090815260ca602052604090819020600a8101805460ff191660011790555490517f843e4390b5f579b124a883bb556fa80a421be9d5301b2e7267641cc23ea077e4916119ed9190815260200190565b60405180910390a15050565b600080516020615dce833981519152611a128133613f8f565b81611a3057604051635342e0a760e11b815260040160405180910390fd5b6001600160a01b038316611a575760405163f15e745f60e01b815260040160405180910390fd5b600082815260ca60205260409020548214611a8557604051630951899960e01b815260040160405180910390fd5b6001600160a01b038316600090815260c960205260409020548214611abd5760405163e2106cd360e01b815260040160405180910390fd5b611ad5600080516020615dee833981519152846131e8565b6001600160a01b038316600081815260c96020908152604080832092909255815192835282018490527fbca7a5cbff6e29c636e92cf5ee4128086f7e982204b0e420cb972819f12f88fe9101610a65565b600080516020615dce833981519152611b3f8133613f8f565b600084815260ca6020526040812060010154611b6f906001600160801b03861690600160a01b900460ff16614667565b600086815260ca60205260409020549091508514611ba057604051630951899960e01b815260040160405180910390fd5b600085815260cb60205260409020546001600160801b039081169082161115611bdc57604051639f747ffd60e01b815260040160405180910390fd5b600085815260cb602052604081208054839290611c039084906001600160801b0316615a5f565b82546001600160801b039182166101009390930a928302919092021990911617905550600085815260ca6020526040908190206002810154600191909101549151631a4ca37b60e21b81526001600160a01b03918216926369328dec92611c739291169088908890600401615750565b602060405180830381600087803b158015611c8d57600080fd5b505af1158015611ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc59190615737565b50604080518681526001600160801b03831660208201526001600160a01b038516918101919091527f150a2e161f87df4cc1b0c4345f9779d342fa2bcc2bf767efbb54005e811079f190606001610d16565b6000806000611d2860975460ff1690565b15611d455760405162461bcd60e51b8152600401610d919061577c565b600080516020615e0e833981519152611d5e8133613f8f565b600088815260ca60205260409020600a81015462010000900460ff1615611d985760405163df00603160e01b815260040160405180910390fd5b6000611da68a8a8d8a6125e9565b5090506001600160801b03811615611dd157604051630d290b7960e31b815260040160405180910390fd5b60038201546001600160801b039081169089161015611e035760405163fca6b5cd60e01b815260040160405180910390fd5b60038201546001600160801b03600160801b90910481169089161115611e3c576040516393c139e960e01b815260040160405180910390fd5b600482015460038301546001600160801b0391821691611e5d91168a615a5f565b611e679190615a9d565b6001600160801b031615611e8e5760405163270955a760e01b815260040160405180910390fd5b6000611eae611e9e848c8b61468f565b6001600160801b038e1690614079565b604051636ef48f5760e01b815290915073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90636ef48f5790611eee9086908e9086908e90600401615ac3565b60206040518083038186803b158015611f0657600080fd5b505af4158015611f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3e91906157a6565b604051631cd2ca1960e11b8152600481018590526001600160801b03808c1660248301528216604482015290955073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__906339a5943290606401604080518083038186803b158015611fa257600080fd5b505af4158015611fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fda91906157c3565b909d909c50949a509398505050505050505050565b60975460ff16156120125760405162461bcd60e51b8152600401610d919061577c565b600081815260ca60205260409020610da481614142565b600080516020615dce8339815191526120428133613f8f565b600082815260ca6020526040902054821461207057604051630951899960e01b815260040160405180910390fd5b600082815260ca602090815260409182902060040180546001600160801b03908116600160801b9188169182021790915582519081529081018490527f796282fae5ebb944d98f910eb76fbde5bc1dc06dd9da67632dc4561d96e7c30d9101610a65565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020615dce8339815191526121188133613f8f565b6121206146da565b50565b600081815260ca602090815260408083206001015460cb909252822054610989916001600160801b0390911690600160a01b900460ff166140a8565b600080516020615dce8339815191526121788133613f8f565b600082815260ca60205260409020600a810154610100900460ff16156121b0576040516209157360e41b815260040160405180910390fd5b600a810154630100000090046001600160801b03166121e257604051633aa99c9b60e01b815260040160405180910390fd5b6006810154600a820154612210916001600160801b03600160801b9091048116916301000000900416615808565b6001600160801b031642101561223957604051632b797db960e11b815260040160405180910390fd5b600a8101805461010061ff0019909116179055600f810180546001600160801b031916426001600160801b0316179055604051631d8e67b960e31b81526004810182905260009073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__9063ec733dc89060240160206040518083038186803b1580156122b757600080fd5b505af41580156122cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ef91906157a6565b604080518681526001600160801b03831660208201529192507f4eb384de78f7c7a5dd1dc12268658939004561d9dc1572c852f6c0873cca67b2910160405180910390a150505050565b600080516020615dce8339815191526123528133613f8f565b8161237057604051635342e0a760e11b815260040160405180910390fd5b6001600160a01b0383166123975760405163f15e745f60e01b815260040160405180910390fd5b600082815260ca602052604090205482146123c557604051630951899960e01b815260040160405180910390fd5b6001600160a01b038316600090815260c96020526040902054156123fc5760405163a8b7bea160e01b815260040160405180910390fd5b612414600080516020615dee8339815191528461098f565b6001600160a01b038316600081815260c96020908152604091829020859055815192835282018490527f3a3825a3ceba48aadc12396e4232a6098dea62688b3cbc06d0f1f3ed26fbcc259101610a65565b600081815260ca60205260408120600a8101548291908190630100000090046001600160801b03166124b75760048201546124b090600160801b90046001600160801b031686612f3c565b93506125e2565b600381015460009081906001600160801b03165b600484015460038501546124f2916001600160801b0390811691600160801b900416615808565b6001600160801b0316816001600160801b0316146125c9576001600160801b03808216600090815260108701602052604090206003015461253c91600160801b909104168261476d565b6125469084615808565b6001600160801b03808316600090815260108801602052604090206003015491945061257a91600160801b90041683615808565b6001600160801b0380831660009081526010880160205260409020600301549193506125a7911687615808565b60048501549096506125c2906001600160801b031682615808565b90506124cb565b6125dc6001600160801b03841683614785565b96505050505b5050915091565b600084815260ca602052604080822060028101546001820154925163d15e005360e01b81526001600160a01b03938416600482015284938492169063d15e00539060240160206040518083038186803b15801561264557600080fd5b505afa158015612659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267d9190615737565b600e8301549091506001600160801b03600160801b909104811690861611156126c05760006126b56001600160801b03881683614079565b935093505050612822565b604051633d29c20960e01b815260009073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90633d29c209906127009086908c908c908c90600401615ac3565b604080518083038186803b15801561271757600080fd5b505af415801561272b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274f91906157c3565b9095509050600080612762858b8661479d565b5050604051632ca9e11360e11b8152919350915060009073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90635953c226906127a99089908f9089908890600401615ac3565b60206040518083038186803b1580156127c157600080fd5b505af41580156127d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f991906157a6565b90508061280f6001600160801b03861685614079565b6128199190615808565b96505050505050505b94509492505050565b600082815260ca6020526040808220905163839a9c2960e01b81526004810191909152821515602482015281908190819073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__9063839a9c299060440160206040518083038186803b15801561289357600080fd5b505af41580156128a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cb91906157a6565b600087815260ca6020526040908190209051631d398d8d60e21b815291925061297b91839173__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__916374e636349161291c9160040190815260200190565b60206040518083038186803b15801561293457600080fd5b505af4158015612948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296c91906157a6565b6001600160801b03169061476d565b600087815260ca6020526040902090935073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90635ccb5f2f906129b28685615808565b6040516001600160e01b031960e085901b16815260048101929092526001600160801b0316602482015260440160206040518083038186803b1580156129f757600080fd5b505af4158015612a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2f91906157a6565b915082612a3c8383615808565b612a469190615808565b9350509250925092565b600080516020615dce833981519152612a698133613f8f565b600082815260ca60205260409020600a015460ff16612a9b57604051630951899960e01b815260040160405180910390fd5b670de0b6b3a7640000836001600160801b03161115612acd57604051633dedb6cb60e21b815260040160405180910390fd5b600082815260ca602090815260409182902060070180546001600160801b03908116600160801b9188169182021790915582519081529081018490527f738c64322e7db945ad7f301e0af4f8b02a5a5cb336140b950d2a7b4340569b7d9101610a65565b600080516020615dce833981519152612b4a8133613f8f565b612120614957565b600054610100900460ff16612b6d5760005460ff1615612b71565b303b155b612bd45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d91565b600054610100900460ff16158015612bf6576000805461ffff19166101011790555b612bfe6149af565b6001600160a01b038216612c10573391505b612c1b600083613ff3565b612c33600080516020615dce83398151915283613ff3565b612c59600080516020615dee833981519152600080516020615dce8339815191526149e8565b612c7f600080516020615e0e833981519152600080516020615dce8339815191526149e8565b8015610da4576000805461ff00191690555050565b60975460ff1615612cb75760405162461bcd60e51b8152600401610d919061577c565b600082815260ca602052604090206109b58183614a33565b60975460ff1615612cf25760405162461bcd60e51b8152600401610d919061577c565b600080516020615dee833981519152612d0b8133613f8f565b33600090815260c96020908152604080832054835260ca90915281206001810154909190612d4d906001600160801b03861690600160a01b900460ff16614667565b604051636839a26160e01b815290915073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90636839a26190612d8b90859033908690600401615833565b60006040518083038186803b158015612da357600080fd5b505af4158015612db7573d6000803e3d6000fd5b5050604051631a727b1960e31b8152600481018590526001600160801b03841660248201526000925073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__915063d393d8c89060440160206040518083038186803b158015612e1857600080fd5b505af4158015612e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5091906157a6565b600a84015490915060ff16158015612e9957506008830154600d8401546001600160801b03600160801b92839004811692612e8d92041683614079565b6001600160801b031610155b15612eea57600a8301805460ff1916600117905582546040517f843e4390b5f579b124a883bb556fa80a421be9d5301b2e7267641cc23ea077e491612ee19190815260200190565b60405180910390a15b33600090815260c960209081526040918290205482519081526001600160801b038516918101919091527f4e4bba6240da8987fe01edc7c3e8498d355a5f0ad7eb7ff2995f3393d8c030a79101610d16565b600081815260ca60205260408120600a8101548190630100000090046001600160801b0316151580612f775750600a820154610100900460ff165b80612f8c5750600a82015462010000900460ff165b80612f9c5750600a82015460ff16155b15612fac57600092505050610989565b60048201546001600160801b03600160801b90910481169086161115612fe4576004820154600160801b90046001600160801b031694505b6002810154600182015460405163d15e005360e01b81526001600160a01b039182166004820152600092919091169063d15e00539060240160206040518083038186803b15801561303457600080fd5b505afa158015613048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306c9190615737565b60038401549091506001600160801b03168660005b600485015460038601546130a8916001600160801b0390811691600160801b900416615808565b6001600160801b0316836001600160801b0316146131955760006130cd87858761479d565b5050506001600160801b03808616600090815260108a016020526040812060020154929350916130fe911683614079565b9050836001600160801b0316816001600160801b0316101561314a576131248185615a5f565b93506131396001600160801b0382168661476d565b6131439084615808565b9250613174565b61315d6001600160801b0385168661476d565b6131679084615808565b9250600093505050613195565b5050600485015461318e906001600160801b031684615808565b9250613081565b816001600160801b0316896001600160801b031614156131be5760009650505050505050610989565b6131db6131cb838b615a5f565b6001600160801b03831690614785565b9998505050505050505050565b6000828152606560205260409020600101546132048133613f8f565b6109b583836140db565b60975460ff16156132315760405162461bcd60e51b8152600401610d919061577c565b600080516020615dee83398151915261324a8133613f8f565b33600090815260c9602090815260408083205480845260ca909252909120600a81015462010000900460ff16156132945760405163df00603160e01b815260040160405180910390fd5b600a810154610100900460ff16156132bf5760405163056efc7b60e01b815260040160405180910390fd5b600a810154630100000090046001600160801b0316158015906132f55750600a810154630100000090046001600160801b031642115b1561331357604051630fda546f60e41b815260040160405180910390fd5b6001810154600090613339906001600160801b03871690600160a01b900460ff16614667565b6007830154909150600090613361906001600160801b0380851691600160801b90041661476d565b9050600061336f8284615a5f565b6004850154600b8601549192506001600160801b03600160801b9182900481169261339e928792910416615808565b6001600160801b031611156133c65760405163aab4fe5160e01b815260040160405180910390fd5b600d8401546001600160801b03164210156133f45760405163af26604960e01b815260040160405180910390fd5b6133fd84614142565b600c8401546001600160801b03908116908416111561342f57604051634421566d60e11b815260040160405180910390fd5b6004840154600c850154849160009161345b916001600160801b0390811691600160801b900416615a5f565b90505b6000826001600160801b031611801561348e575060038601546001600160801b03600160801b9091048116908216105b156135f95760048601546134ab906001600160801b031682615808565b6001600160801b03808216600090815260108901602052604090206002015491925016156135f457604051634c5e028760e11b8152600481018790526001600160801b03808316602483015283166044820152600090819073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__906398bc050e90606401604080518083038186803b15801561353957600080fd5b505af415801561354d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357191906157c3565b60405163ca8701f360e01b8152919350915073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__9063ca8701f3906135b3908b90879087908790600401615ac3565b60006040518083038186803b1580156135cb57600080fd5b505af41580156135df573d6000803e3d6000fd5b5050505080846135ef9190615a5f565b935050505b61345e565b6001600160801b0382161561362157604051630f0b666f60e01b815260040160405180910390fd5b600a860154630100000090046001600160801b03166136bc576005860154613652906001600160801b031642615aea565b600a870180546301000000600160981b03191663010000006001600160801b0393841602179055604080518583168152918616602083015288917f02936c9aa03a5ee03914509058d0ab4fc30b8f8cb97922e9f8885bf0651263c0910160405180910390a2613702565b604080516001600160801b0380861682528616602082015288917f2a5361599b6218cb63221765b277f7026a473b717f40193ee25deae176e748dc910160405180910390a25b600087815260cb6020526040812080548692906137299084906001600160801b0316615808565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508486600a0160010160108282829054906101000a90046001600160801b03166137769190615808565b82546101009290920a6001600160801b03818102199093169183160217909155600288015460018901546001600160a01b0391821693506369328dec92918116916137ce9190881690600160a01b900460ff166140a8565b8d6040518463ffffffff1660e01b81526004016137ed93929190615750565b602060405180830381600087803b15801561380757600080fd5b505af115801561381b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061383f9190615737565b5050505050505050505050565b600061385a60975460ff1690565b156138775760405162461bcd60e51b8152600401610d919061577c565b600080516020615e0e8339815191526138908133613f8f565b600087815260ca60205260409020600e8101546138be90600160801b90046001600160801b03166001615808565b6001600160801b0316856001600160801b031611156138f05760405163019894df60e21b815260040160405180910390fd5b600e8101546001600160801b03600160801b90910481169086161180158161393657506001600160801b0380891660009081526010840160205260409020600201541615155b80613967575080801561396757506001600160801b0380891660009081526010840160205260409020600301541615155b6139845760405163436ec62560e01b815260040160405180910390fd5b6000876001600160801b0316116139ae57604051636ba603b360e11b815260040160405180910390fd5b604051636ef48f5760e01b815273__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90636ef48f57906139eb9085908c908c908c90600401615ac3565b60206040518083038186803b158015613a0357600080fd5b505af4158015613a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3b91906157a6565b600283015460018401549195506001600160a01b03908116916369328dec91811690613a7b906001600160801b03891690600160a01b900460ff166140a8565b886040518463ffffffff1660e01b8152600401613a9a93929190615750565b602060405180830381600087803b158015613ab457600080fd5b505af1158015613ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aec9190615737565b5050505095945050505050565b600084815260ca60205260408120600a8101548291829182919060ff16613b335760405163c6d9b58160e01b815260040160405180910390fd5b604051633d29c20960e01b815273__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90633d29c20990613b709084908c908c908c90600401615ac3565b604080518083038186803b158015613b8757600080fd5b505af4158015613b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bbf91906157c3565b95509250613be1613bd1828a8961468f565b6001600160801b03871690614aff565b935080600a0160000160039054906101000a90046001600160801b0316915050945094509450949050565b600080613c1b60975460ff1690565b15613c385760405162461bcd60e51b8152600401610d919061577c565b600080516020615e0e833981519152613c518133613f8f565b600087815260ca60205260409020600a810154610100900460ff1615613c8a5760405163056efc7b60e01b815260040160405180910390fd5b600a81015460ff16613caf5760405163c6d9b58160e01b815260040160405180910390fd5b600a81015462010000900460ff1615613cdb5760405163df00603160e01b815260040160405180910390fd5b60018101546001600160a01b03888116911614613d0b5760405163623957d360e01b815260040160405180910390fd5b60038101546001600160801b03908116908a161015613d3d5760405163fca6b5cd60e01b815260040160405180910390fd5b60038101546001600160801b03600160801b9091048116908a161115613d76576040516393c139e960e01b815260040160405180910390fd5b600481015460038201546001600160801b0391821691613d9791168b615a5f565b613da19190615a9d565b6001600160801b031615613dc85760405163270955a760e01b815260040160405180910390fd5b604051631cd2ca1960e11b8152600481018290526001600160801b03808b166024830152861660448201526000945084935073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__906339a5943290606401604080518083038186803b158015613e3057600080fd5b505af4158015613e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e6891906157c3565b604051636839a26160e01b8152919550935073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90636839a26190613ea89084908a908a90600401615833565b60006040518083038186803b158015613ec057600080fd5b505af4158015613ed4573d6000803e3d6000fd5b5050505050509550959350505050565b600080516020615dce833981519152613efd8133613f8f565b600082815260ca60205260409020548214613f2b57604051630951899960e01b815260040160405180910390fd5b600082815260ca602090815260409182902060050180546001600160801b03908116600160801b9188169182021790915582519081529081018490527f7016612eedf00917c664926ac3c77a4800fefe912e91632376418e8fc6e621619101610a65565b613f9982826120d4565b610da457613fb1816001600160a01b03166014614b29565b613fbc836020614b29565b604051602001613fcd929190615b2e565b60408051601f198184030181529082905262461bcd60e51b8252610d9191600401615ba3565b613ffd82826120d4565b610da45760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556140353390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006114a36140a3836001600160801b031661409d866001600160801b0316614cc5565b90614d04565b614d95565b6000670de0b6b3a76400006140be83600a615cba565b6140d1906001600160801b038616615cc6565b6114a39190615ce5565b6140e582826120d4565b15610da45760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6002810154600182015460405163d15e005360e01b81526001600160a01b039182166004820152600092919091169063d15e00539060240160206040518083038186803b15801561419257600080fd5b505afa1580156141a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141ca9190615737565b600c830154909150600160801b90046001600160801b03165b60038301546001600160801b03600160801b90910481169082161161422c5761420d838284614dee565b6004830154614225906001600160801b031682615808565b90506141e3565b50600e9190910180546001600160801b0319166001600160801b03909216919091179055565b6001600160801b0380831660009081526010850160205260408120600381015491929091161561448b57826142ce57600e85018054600191906010906142a9908490600160801b90046001600160801b0316615808565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b6004810154600e8601546142f6916001600160801b0391821691600160801b90910416615023565b600e86018054600160801b908190046001600160801b0390811660009081526020869052604080822080546001600160801b031916968416969096179095559254919091048116825291812054600384015491926143579281169116614079565b600e870154600384015491925061437a916001600160801b039081169116614079565b600c870180546000906143979084906001600160801b0316615808565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550808260010160108282829054906101000a90046001600160801b03166143e19190615808565b82546101009290920a6001600160801b038181021990931691831602179091556001840154600285018054600160801b90920483166001600160801b03199283161790556003850180549091169055875460408051918252888316602083015291841691810191909152851560608201527f6ed432acb9733bda7d5f090ab5f35a9a2e19974dba6ae2dd7078c84b92388f96915060800160405180910390a16001925050506114a3565b506000949350505050565b6144a660c0820160a0830161561d565b6144b6608083016060840161561d565b6144c660a084016080850161561d565b6144d09190615a5f565b6144da9190615a9d565b6001600160801b031615614501576040516334cc2fed60e01b815260040160405180910390fd5b803561452057604051635342e0a760e11b815260040160405180910390fd5b8035600090815260ca60205260409020541561454f57604051631953bac160e11b815260040160405180910390fd5b60006145616060830160408401615600565b6001600160a01b031663d15e005361457f6040850160208601615600565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156145be57600080fd5b505afa1580156145d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f69190615737565b9050676765c793fa10079d601b1b8110156146245760405163fee5a60360e01b815260040160405180910390fd5b670de0b6b3a764000061463f6101a08401610180850161561d565b6001600160801b03161115610da457604051633dedb6cb60e21b815260040160405180910390fd5b600061467482600a615cba565b6140d1670de0b6b3a76400006001600160801b038616615cc6565b6001600160801b03808316600090815260108501602090815260408083208585168452918290529091205490911690816146d257676765c793fa10079d601b1b91505b509392505050565b60975460ff166147235760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610d91565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006114a36001600160801b0384811690841661503b565b60006114a36001600160801b038481169084166150b2565b6001600160801b0380831660009081526010850160205260408120600481015491928392839283929091600160801b9004166147e75785600080600094509450945094505061494e565b60048101546005820154600e8a01546001600160801b03600160801b938490048116985092820483169650600092918216911611156148345750600e8801546001600160801b0316614844565b5060058101546001600160801b03165b61484e8188615a5f565b925061485a8989615147565b600d8a015490945060009061487f90600160801b90046001600160801b031689614079565b9050806001600160801b0316856001600160801b0316111561489f578094505b600a8a0154630100000090046001600160801b0316614919576148c28488615808565b60028401549097506001600160801b031615614914576002830154614907906001600160801b03908116906148f890881661521a565b6001600160801b031690614785565b6149119088615808565b96505b61494a565b60028301548590614933906001600160801b031686614079565b61493d9190615808565b6149479087615808565b95505b5050505b93509350935093565b60975460ff161561497a5760405162461bcd60e51b8152600401610d919061577c565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586147503390565b600054610100900460ff166149d65760405162461bcd60e51b8152600401610d9190615cf9565b6149de61522e565b6149e6615255565b565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6002820154600183015460405163d15e005360e01b81526001600160a01b039182166004820152600092919091169063d15e00539060240160206040518083038186803b158015614a8357600080fd5b505afa158015614a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614abb9190615737565b9050614ac8838383614dee565b6001600160801b039182166000908152601090930160205260409092206005018054919092166001600160801b0319909116179055565b60006114a36140a3836001600160801b0316614b23866001600160801b0316614cc5565b90615288565b60606000614b38836002615cc6565b614b43906002615aea565b67ffffffffffffffff811115614b5b57614b5b615d44565b6040519080825280601f01601f191660200182016040528015614b85576020820181803683370190505b509050600360fc1b81600081518110614ba057614ba0615d5a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614bcf57614bcf615d5a565b60200101906001600160f81b031916908160001a9053506000614bf3846002615cc6565b614bfe906001615aea565b90505b6001811115614c76576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614c3257614c32615d5a565b1a60f81b828281518110614c4857614c48615d5a565b60200101906001600160f81b031916908160001a90535060049490941c93614c6f81615d70565b9050614c01565b5083156114a35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d91565b600080614cd6633b9aca0084615cc6565b905082614ce7633b9aca0083615ce5565b146109895760405162a748d160e21b815260040160405180910390fd5b6000821580614d11575081155b15614d1e57506000610989565b81614d356002676765c793fa10079d601b1b615ce5565b614d4190600019615d87565b614d4b9190615ce5565b831115614d6a5760405162a748d160e21b815260040160405180910390fd5b676765c793fa10079d601b1b614d81600282615ce5565b614d8b8486615cc6565b6140d19190615aea565b600080614da76002633b9aca00615ce5565b90506000614db58483615aea565b905081811015614dd8576040516307af724160e11b815260040160405180910390fd5b614de6633b9aca0082615ce5565b949350505050565b6001600160801b038083166000908152601085016020526040902060048101549091429116101561501d576000808080614e2988888861479d565b92965090945092509050614e466001600160801b03831687614aff565b600d89018054601090614e6a908490600160801b90046001600160801b0316615a5f565b82546101009290920a6001600160801b038181021990931691831602179091556002870154614e9b92501682614079565b614ea59083615808565b600c89018054600090614ec29084906001600160801b0316615808565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060008560050160109054906101000a90046001600160801b031684614f0b9190615a5f565b6004870154909150600160801b90046001600160801b0316614f8b576005860180546001600160801b0319166001600160801b038981169182179092558a5460408051918252928b166020820152918201527f1ffcce3f36329128f865c47cacfc17ad27e65f7039d7aacd9d6350644c465a919060600160405180910390a15b6005860180546001600160801b03908116600160801b8783168102919091179092556001600160801b03198782168302164282161760048901558a54600d8c01547fda58df82953130c96b08dcda8a76478b2a4e0c16cddf3e59ac1ccf39d7b027639391928c92614ffe9204168b614079565b8460405161500f9493929190615ac3565b60405180910390a150505050505b50505050565b60006114a36001600160801b03848116908416615288565b6000821580615048575081155b1561505557506000610989565b816150696002670de0b6b3a7640000615ce5565b61507590600019615d87565b61507f9190615ce5565b83111561509e5760405162a748d160e21b815260040160405180910390fd5b670de0b6b3a7640000614d81600282615ce5565b6000816150d2576040516308693c7b60e31b815260040160405180910390fd5b60006150df600284615ce5565b9050670de0b6b3a76400006150f682600019615d87565b6151009190615ce5565b84111561511f5760405162a748d160e21b815260040160405180910390fd5b8281615133670de0b6b3a764000087615cc6565b61513d9190615aea565b614de69190615ce5565b6001600160801b0380821660009081526010840160205260408120600c85015491929091161561521357600c84015460048201546002830154614de6926001600160801b03908116926148f8926151a99290811691600160801b900416614079565b6004880154600b89015461296c916001600160801b03600160801b918290048116926148f8926151dc9291041683615a5f565b60048901546151f4906001600160801b031642615a5f565b60058d015461296c9190600160801b90046001600160801b0316615d9e565b5092915050565b6000610989826001600160801b0316614cc5565b600054610100900460ff166149e65760405162461bcd60e51b8152600401610d9190615cf9565b600054610100900460ff1661527c5760405162461bcd60e51b8152600401610d9190615cf9565b6097805460ff19169055565b6000816152a8576040516308693c7b60e31b815260040160405180910390fd5b60006152b5600284615ce5565b9050676765c793fa10079d601b1b6152cf82600019615d87565b6152d99190615ce5565b8411156152f85760405162a748d160e21b815260040160405180910390fd5b8281615133676765c793fa10079d601b1b87615cc6565b60006020828403121561532157600080fd5b81356001600160e01b0319811681146114a357600080fd5b60006020828403121561534b57600080fd5b5035919050565b6001600160a01b038116811461212057600080fd5b803561537281615352565b919050565b6000806040838503121561538a57600080fd5b82359150602083013561539c81615352565b809150509250929050565b6001600160801b038116811461212057600080fd5b8035615372816153a7565b600080604083850312156153da57600080fd5b82356153e5816153a7565b946020939093013593505050565b6000806040838503121561540657600080fd5b82359150602083013561539c816153a7565b60008060006040848603121561542d57600080fd5b833567ffffffffffffffff8082111561544557600080fd5b818601915086601f83011261545957600080fd5b81358181111561546857600080fd5b87602082850101111561547a57600080fd5b60209283019550935050840135615490816153a7565b809150509250925092565b600061020082840312156154ae57600080fd5b50919050565b600080604083850312156154c757600080fd5b82356153e581615352565b6000806000606084860312156154e757600080fd5b8335925060208401356154f9816153a7565b9150604084013561549081615352565b600080600080600060a0868803121561552157600080fd5b853561552c816153a7565b9450602086013593506040860135615543816153a7565b92506060860135615553816153a7565b91506080860135615563816153a7565b809150509295509295909350565b6000806000806080858703121561558757600080fd5b843593506020850135615599816153a7565b925060408501356155a9816153a7565b915060608501356155b9816153a7565b939692955090935050565b8035801515811461537257600080fd5b600080604083850312156155e757600080fd5b823591506155f7602084016155c4565b90509250929050565b60006020828403121561561257600080fd5b81356114a381615352565b60006020828403121561562f57600080fd5b81356114a3816153a7565b6000806040838503121561564d57600080fd5b823561565881615352565b9150602083013561539c816153a7565b600080600080600060a0868803121561568057600080fd5b853594506020860135615692816153a7565b935060408601356156a2816153a7565b925060608601356156b2816153a7565b9150608086013561556381615352565b6001600160801b03948516815292841660208401529083166040830152909116606082015260800190565b600080600080600060a0868803121561570557600080fd5b8535615710816153a7565b945060208601359350604086013561572781615352565b9250606086013561555381615352565b60006020828403121561574957600080fd5b5051919050565b6001600160a01b0393841681526001600160801b03929092166020830152909116604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6000602082840312156157b857600080fd5b81516114a3816153a7565b600080604083850312156157d657600080fd5b82516157e1816153a7565b602084015190925061539c816153a7565b634e487b7160e01b600052601160045260246000fd5b60006001600160801b0380831681851680830382111561582a5761582a6157f2565b01949350505050565b9283526001600160a01b039190911660208301526001600160801b0316604082015260600190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006020828403121561589c57600080fd5b815160ff811681146114a357600080fd5b6000602082840312156158bf57600080fd5b6114a3826155c4565b8135815261020081016158dd60208401615367565b6001600160a01b031660208301526158f760408401615367565b6001600160a01b03166040830152615911606084016153bc565b6001600160801b0316606083015261592b608084016153bc565b6001600160801b0316608083015261594560a084016153bc565b6001600160801b031660a083015261595f60c084016153bc565b6001600160801b031660c083015261597960e084016153bc565b6001600160801b031660e08301526101006159958482016153bc565b6001600160801b0316908301526101206159b08482016153bc565b6001600160801b0316908301526101406159cb8482016153bc565b6001600160801b0316908301526101606159e68482016153bc565b6001600160801b031690830152610180615a018482016153bc565b6001600160801b0316908301526101a0615a1c8482016153bc565b6001600160801b0316908301526101c0615a378482016153bc565b6001600160801b0316908301526101e0615a528482016155c4565b1515920191909152919050565b60006001600160801b0383811690831681811015615a7f57615a7f6157f2565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160801b0380841680615ab757615ab7615a87565b92169190910692915050565b9384526001600160801b039283166020850152908216604084015216606082015260800190565b60008219821115615afd57615afd6157f2565b500190565b60005b83811015615b1d578181015183820152602001615b05565b8381111561501d5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615b66816017850160208801615b02565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615b97816028840160208801615b02565b01602801949350505050565b6020815260008251806020840152615bc2816040850160208701615b02565b601f01601f19169190910160400192915050565b600181815b80851115615c11578160001904821115615bf757615bf76157f2565b80851615615c0457918102915b93841c9390800290615bdb565b509250929050565b600082615c2857506001610989565b81615c3557506000610989565b8160018114615c4b5760028114615c5557615c71565b6001915050610989565b60ff841115615c6657615c666157f2565b50506001821b610989565b5060208310610133831016604e8410600b8410161715615c94575081810a610989565b615c9e8383615bd6565b8060001904821115615cb257615cb26157f2565b029392505050565b60006114a38383615c19565b6000816000190483118215151615615ce057615ce06157f2565b500290565b600082615cf457615cf4615a87565b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081615d7f57615d7f6157f2565b506000190190565b600082821015615d9957615d996157f2565b500390565b60006001600160801b0380831681851681830481118215151615615dc457615dc46157f2565b0294935050505056fe71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb12344277e405079ec07749d374ba0b5862a4e45a6a05ac889dbb4a991c6f9354d27160668f6d81898b09bdae61c61d2c7d23fe33a52ae9b38e5b92f00ced3806ba2646970667358221220306be898b2c1eb91cd9390e9302219603ccf20cc4e7a9868384625687266a86564736f6c63430008090033",
  "libraries": {
    "PoolLogic": "0xD2B8552104cf999e0EEad79800F0ff08CD4ED5FD"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allow(address,bytes32)": {
        "params": {
          "borrowerAddress": "The address to allow",
          "poolHash": "The identifier of the pool*"
        }
      },
      "borrow(address,uint128)": {
        "params": {
          "loanAmount": "The total amount of the loan*",
          "to": "The address to which the borrowed funds should be sent."
        }
      },
      "claimProtocolFees(bytes32,uint128,address)": {
        "params": {
          "amount": "The amount of tokens claimed",
          "poolHash": "The identifier of the pool",
          "to": "The address receiving the fees*"
        }
      },
      "closePool(bytes32,address)": {
        "params": {
          "poolHash": "The identifier of the pool*"
        }
      },
      "collectFees(bytes32)": {
        "params": {
          "poolHash": "The identifier of the pool*"
        }
      },
      "collectFeesForTick(bytes32,uint128)": {
        "params": {
          "poolHash": "The identifier of the pool*"
        }
      },
      "createNewPool((bytes32,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))": {
        "params": {
          "params": "The parameters of the new pool*"
        }
      },
      "deposit(uint128,bytes32,address,address,uint128)": {
        "params": {
          "normalizedAmount": "The amount of the given asset to deposit",
          "poolHash": "The identifier of the pool",
          "rate": "The rate at which to bid for a bond",
          "sender": "The lender address who calls the deposit function on the Position",
          "underlyingToken": "Contract' address of the token to be deposited"
        },
        "returns": {
          "adjustedAmount": "Deposited amount adjusted with current liquidity index",
          "bondsIssuanceIndex": "The identifier of the borrow group to which the deposit has been allocated*"
        }
      },
      "disallow(address,bytes32)": {
        "params": {
          "borrowerAddress": "The address to disallow",
          "poolHash": "The identifier of the pool*"
        }
      },
      "estimateLoanRate(uint128,bytes32)": {
        "params": {
          "normalizedBorrowedAmount": "The amount to be borrowed from the pool",
          "poolHash": "The identifier of the pool"
        },
        "returns": {
          "estimatedRate": "The estimated loan rate for the current state of the pool*"
        }
      },
      "getAmountRepartition(bytes32,uint128,uint128,uint128)": {
        "params": {
          "adjustedAmount": "Adjusted amount of tokens currently on third party yield provider",
          "bondsIssuanceIndex": "The identifier of the borrow group",
          "poolHash": "The identifier of the pool",
          "rate": "Tick's rate"
        },
        "returns": {
          "bondsQuantity": "Quantity of bonds held",
          "normalizedDepositedAmount": "Amount of deposit currently on third party yield provider*"
        }
      },
      "getDefaultTimestamp(bytes32)": {
        "returns": {
          "defaultTimestamp": "The timestamp at which the pool was defaulted*"
        }
      },
      "getPoolAggregates(bytes32)": {
        "params": {
          "poolHash": "The identifier of the pool"
        },
        "returns": {
          "adjustedPendingDeposits": "Amount of tokens deposited after bond issuance and currently on third party yield provider*",
          "weightedAverageLendingRate": "The average deposit bidding rate in the order book"
        }
      },
      "getPoolFeeRates(bytes32)": {
        "returns": {
          "establishmentFeeRate": "Amount of fees paid to the protocol at borrow time",
          "repaymentFeeRate": "Amount of fees paid to the protocol at repay time*"
        }
      },
      "getPoolMaturity(bytes32)": {
        "params": {
          "poolHash": "The identifier of the pool"
        },
        "returns": {
          "poolCurrentMaturity": "The pool's current maturity*"
        }
      },
      "getPoolParameters(bytes32)": {
        "params": {
          "poolHash": "The identifier of the pool"
        },
        "returns": {
          "cooldownPeriod": "Period after a loan during which a borrower cannot take another loan",
          "lateRepayFeePerBondRate": "Penalty a borrower has to pay when it repays late",
          "liquidityRewardsActivationThreshold": "Minimum amount of liqudity rewards a borrower has to deposit to active the pool*",
          "liquidityRewardsDistributionRate": "Rate at which liquidity rewards are distributed to lenders",
          "loanDuration": "Duration of a loan in the pool",
          "maxBorrowableAmount": "Maximum amount of tokens that can be borrowed from the pool",
          "maxRate": "Maximum rate of deposits accepted in the pool",
          "minRate": "Minimum rate of deposits accepted in the pool",
          "rateSpacing": "Difference between two rates in the pool",
          "repaymentPeriod": "Period after a loan end during which a borrower can repay without penalty",
          "underlyingToken": "Address of the underlying token of the pool"
        }
      },
      "getPoolState(bytes32)": {
        "params": {
          "poolHash": "The identifier of the pool"
        },
        "returns": {
          "active": "Signals if a pool is active and ready to accept deposits",
          "bondsIssuedQuantity": "Amount of bonds issued, to be repaid at maturity",
          "closed": "Signals if a pool was closed",
          "currentBondsIssuanceIndex": "Current borrow period identifier of the pool*",
          "currentMaturity": "End timestamp of current loan",
          "defaulted": "Signals if a pool was defaulted",
          "lowerInterestRate": "Minimum rate at which a deposit was made",
          "nextLoanMinStart": "Cool down period, minimum timestamp after which a new loan can be taken",
          "normalizedAvailableDeposits": "Actual amount of tokens available to be borrowed",
          "normalizedBorrowedAmount": "Actual amount of tokens that were borrowed",
          "remainingAdjustedLiquidityRewardsReserve": "Remaining liquidity rewards to be distributed to lenders",
          "yieldProviderLiquidityRatio": "Last recorded yield provider liquidity ratio"
        }
      },
      "getRepayAmounts(bytes32,bool)": {
        "params": {
          "poolHash": "The identifier of the pool"
        },
        "returns": {
          "normalizedRepayAmount": "Total repay amount*"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTickAmounts(bytes32,uint128)": {
        "params": {
          "poolHash": "The identifier of the pool",
          "rate": "The tick rate from which to get data"
        },
        "returns": {
          "accruedFees": "The total fees claimable in the current tick, either from yield provider interests or liquidity rewards accrual*",
          "adjustedPendingAmount": "Amount of deposit in tick deposited with the underlying yield provider that were deposited after bond issuance",
          "adjustedRemainingAmount": "Amount of tokens in tick deposited with the underlying yield provider that were deposited before bond issuance",
          "adjustedTotalAmount": "Total amount of deposit in the tick, excluding the pending amounts",
          "atlendisLiquidityRatio": "The liquidity ratio of the given tick",
          "bondsQuantity": "The quantity of bonds within the tick"
        }
      },
      "getTickLastUpdate(string,uint128)": {
        "params": {
          "pool": "The identifier of the pool pool",
          "rate": "The tick rate from which to get data"
        },
        "returns": {
          "lastFeeDistributionTimestamp": "Timestamp of the last fee's distribution to the tick*"
        }
      },
      "getTickLiquidityRatio(bytes32,uint128)": {
        "params": {
          "poolHash": "The identifier of the pool",
          "rate": "The tick rate from which to extract the liquidity ratio"
        },
        "returns": {
          "liquidityRatio": "The liquidity ratio of the given tick*"
        }
      },
      "getWithdrawAmounts(bytes32,uint128,uint128,uint128)": {
        "details": "This method is meant to be used exclusively with the withdraw() method Under certain circumstances, this method can return incorrect values, that would otherwise be rejected by the checks made in the withdraw() method",
        "params": {
          "adjustedAmount": "The amount of tokens in the position, adjusted to the deposit liquidity ratio",
          "bondsIssuanceIndex": "An index determining deposit timing",
          "poolHash": "The identifier of the pool",
          "rate": "The rate the position is bidding for"
        },
        "returns": {
          "adjustedAmountToWithdraw": "The amount of tokens to withdraw, adjuste for borrow pool use",
          "bondsMaturity": "The maturity of bonds remaining within the position after withdraw*",
          "depositedAmountToWithdraw": "The amount of tokens to withdraw, adjuste for position use",
          "remainingBondsQuantity": "The quantity of bonds remaining within the position"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isEarlyRepay(bytes32)": {
        "returns": {
          "earlyRepay": "Flag that signifies whether the early repay feature is activated or not*"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setDefault(bytes32)": {
        "params": {
          "poolHash": "The identifier of the pool to default*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "topUpLiquidityRewards(uint128)": {
        "params": {
          "amount": "Amount of tokens that will be add up to the pool's liquidity rewards reserve*"
        }
      },
      "updateRate(uint128,bytes32,uint128,uint128,uint128)": {
        "params": {
          "adjustedAmount": "The adjusted balance of tokens of the given position",
          "newRate": "The new rate of the position",
          "oldBondsIssuanceIndex": "The identifier of the borrow group from the given position",
          "oldRate": "The current rate of the position",
          "poolHash": "The identifier of the pool"
        },
        "returns": {
          "newAdjustedAmount": "The updated amount of tokens of the position adjusted by the new tick's global liquidity ratio",
          "newBondsIssuanceIndex": "The new borrow group id to which the updated position is linked*"
        }
      },
      "withdraw(bytes32,uint128,uint128,uint128,address)": {
        "params": {
          "adjustedAmountToWithdraw": "The actual amount of tokens to withdraw from the position",
          "bondsIssuanceIndex": "An index determining deposit timing",
          "owner": "The address to which the withdrawns funds are sent",
          "poolHash": "The identifier of the pool",
          "rate": "The rate the position is bidding for"
        },
        "returns": {
          "normalizedDepositedAmountToWithdraw": "Actual amount of tokens withdrawn and sent to the lender*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Borrow(bytes32,uint128,uint128)": {
        "notice": "Emitted after a successful borrow"
      },
      "BorrowerAllowed(address,bytes32)": {
        "notice": "Emitted after a borrower address was allowed to borrow from a pool"
      },
      "BorrowerDisallowed(address,bytes32)": {
        "notice": "Emitted after a borrower address was disallowed to borrow from a pool"
      },
      "ClaimProtocolFees(bytes32,uint128,address)": {
        "notice": "Emitted after governance claims the fees associated with a pool"
      },
      "CollectFeesForTick(bytes32,uint128,uint128,uint128)": {
        "notice": "Emitted when liquidity rewards are distributed to a tick"
      },
      "Default(bytes32,uint128)": {
        "notice": "Emitted when a pool defaults on its loan repayment"
      },
      "EarlyRepay(bytes32,uint128,uint128,uint128,uint128)": {
        "notice": "Emitted after a successful early repay"
      },
      "FurtherBorrow(bytes32,uint128,uint128)": {
        "notice": "Emitted after a successful further borrow"
      },
      "LateRepay(bytes32,uint128,uint128,uint128,uint128,uint128)": {
        "notice": "Emitted after a successful repay, made after the repayment period Includes a late repay fee"
      },
      "PoolActivated(bytes32)": {
        "notice": "Emitted when a pool is active, i.e. after the borrower deposits enough tokens in its pool liquidity rewards reserve as agreed before the pool creation"
      },
      "PoolClosed(bytes32,uint128)": {
        "notice": "Emitted after pool is closed"
      },
      "PoolCreated((bytes32,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))": {
        "notice": "Emitted after a pool was creted*"
      },
      "Repay(bytes32,uint128,uint128,uint128,uint128)": {
        "notice": "Emitted after a successful repay"
      },
      "SetEstablishmentFeeRate(uint128,bytes32)": {
        "notice": "Emitted after governance sets the establishment fee for a pool*"
      },
      "SetLiquidityRewardsDistributionRate(uint128,bytes32)": {
        "notice": "Emitted after governance sets the liquidity rewards distribution rate for a pool*"
      },
      "SetMaxBorrowableAmount(uint128,bytes32)": {
        "notice": "Emitted after governance sets the maximum borrowable amount for a pool*"
      },
      "SetRepaymentFeeRate(uint128,bytes32)": {
        "notice": "Emitted after governance sets the repayment fee for a pool*"
      },
      "TickBorrow(bytes32,uint128,uint128,uint128,uint128,uint128)": {
        "notice": "Emitted when a borrow successfully impacts a tick"
      },
      "TickInitialized(bytes32,uint128,uint128)": {
        "notice": "Emitted when a tick is initialized, i.e. when its first deposited in"
      },
      "TickLoanDeposit(bytes32,uint128,uint128)": {
        "notice": "Emitted after a deposit on a tick that was done during a loan"
      },
      "TickNoLoanDeposit(bytes32,uint128,uint128,uint128)": {
        "notice": "Emitted after a deposit on a tick that was done without an active loan"
      },
      "TickPendingDeposit(bytes32,uint128,uint128,bool)": {
        "notice": "Emitted when pending amounts are merged with the rest of the pool during a repay"
      },
      "TickRepay(bytes32,uint128,uint128,uint128)": {
        "notice": "Emitted when funds from a tick are repaid by the borrower"
      },
      "TickWithdrawPending(bytes32,uint128,uint128)": {
        "notice": "Emitted when a withdraw is done outside of a loan on the tick"
      },
      "TickWithdrawRemaining(bytes32,uint128,uint128,uint128,uint128)": {
        "notice": "Emitted when a withdraw is done during a loan on the tick"
      },
      "TopUpLiquidityRewards(bytes32,uint128)": {
        "notice": "Emitted after a borrower successfully deposits tokens in its pool liquidity rewards reserve"
      }
    },
    "kind": "user",
    "methods": {
      "allow(address,bytes32)": {
        "notice": "Allow an address to interact with a borrower pool"
      },
      "borrow(address,uint128)": {
        "notice": "Called by the borrower to sell bonds to the order book. The affected ticks get updated according the amount of bonds sold."
      },
      "claimProtocolFees(bytes32,uint128,address)": {
        "notice": "Withdraws protocol fees to a target address"
      },
      "closePool(bytes32,address)": {
        "notice": "Flags the pool as closed"
      },
      "collectFees(bytes32)": {
        "notice": "Collect yield provider fees as well as liquidity rewards for the whole pool Iterates over all pool initialized ticks"
      },
      "collectFeesForTick(bytes32,uint128)": {
        "notice": "Collect yield provider fees as well as liquidity rewards for the target tick"
      },
      "createNewPool((bytes32,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))": {
        "notice": "Creates a new pool"
      },
      "deposit(uint128,bytes32,address,address,uint128)": {
        "notice": "Gets called within the Position.deposit() function and enables a lender to deposit assets into a given pool's order book. The lender specifies a rate (price) at which it is willing to lend out its assets (bid on the zero coupon bond). The full amount will initially be deposited on the underlying yield provider until the borrower sells bonds at the specified rate."
      },
      "disallow(address,bytes32)": {
        "notice": "Remove borrower pool interaction rights from an address"
      },
      "estimateLoanRate(uint128,bytes32)": {
        "notice": "Estimates the lending rate corresponding to the input amount, depending on the current state of the pool"
      },
      "freezePool()": {
        "notice": "Stops all actions on all pools*"
      },
      "getAmountRepartition(bytes32,uint128,uint128,uint128)": {
        "notice": "Returns the token amount's repartition between bond quantity and normalized deposited amount currently placed on third party yield provider"
      },
      "getDefaultTimestamp(bytes32)": {
        "notice": "Returns the state of a pool"
      },
      "getPoolAggregates(bytes32)": {
        "notice": "Returns the current state of the pool's parameters"
      },
      "getPoolFeeRates(bytes32)": {
        "notice": "Returns the fee rates of a pool"
      },
      "getPoolMaturity(bytes32)": {
        "notice": "Returns the current maturity of the pool"
      },
      "getPoolParameters(bytes32)": {
        "notice": "Returns the parameters of a pool"
      },
      "getPoolState(bytes32)": {
        "notice": "Returns the state of a pool"
      },
      "getRepayAmounts(bytes32,bool)": {
        "notice": "Returns the total amount a borrower has to repay to a pool. Includes borrowed amount, late repay fees and protocol fees"
      },
      "getTickAmounts(bytes32,uint128)": {
        "notice": "Returns the repartition between bonds and deposits of the given tick."
      },
      "getTickLastUpdate(string,uint128)": {
        "notice": "Returns the timestamp of the last fee distribution to the tick"
      },
      "getTickLiquidityRatio(bytes32,uint128)": {
        "notice": "Returns the liquidity ratio of a given tick in a pool's order book. The liquidity ratio is an accounting construct to deduce the accrued interest over time."
      },
      "getWithdrawAmounts(bytes32,uint128,uint128,uint128)": {
        "notice": "Gets called within the Position.withdraw() function and enables a lender to evaluate the exact amount of tokens it is allowed to withdraw"
      },
      "isEarlyRepay(bytes32)": {
        "notice": "Returns the state of a pool"
      },
      "repay()": {
        "notice": "Repays a currently outstanding bonds of the given pool.*"
      },
      "setDefault(bytes32)": {
        "notice": "Flags the pool as defaulted"
      },
      "setEstablishmentFeeRate(uint128,bytes32)": {
        "notice": "Set the pool establishment protocol fee rate*"
      },
      "setLiquidityRewardsDistributionRate(uint128,bytes32)": {
        "notice": "Set the pool liquidity rewards distribution rate*"
      },
      "setMaxBorrowableAmount(uint128,bytes32)": {
        "notice": "Set the maximum amount of tokens that can be borrowed in the target pool*"
      },
      "setRepaymentFeeRate(uint128,bytes32)": {
        "notice": "Set the pool repayment protocol fee rate*"
      },
      "topUpLiquidityRewards(uint128)": {
        "notice": "Called by the borrower to top up liquidity rewards' reserve that is distributed to liquidity providers at the pre-defined distribution rate."
      },
      "unfreezePool()": {
        "notice": "Cancel a freeze, makes actions available again on all pools*"
      },
      "updateRate(uint128,bytes32,uint128,uint128,uint128)": {
        "notice": "Gets called within Position.updateRate() and updates the order book ticks affected by the position updating its rate. This is only possible as long as there are no bonds in the position, i.e the full position currently lies with the yield provider"
      },
      "withdraw(bytes32,uint128,uint128,uint128,address)": {
        "notice": "Gets called within the Position.withdraw() function and enables a lender to withdraw assets that are deposited with the underlying yield provider"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 408,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 411,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2862,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3109,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 327,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 496,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 585,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5105,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "borrowerAuthorizedPools",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 5110,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "pools",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_struct(Pool)10835_storage)"
      },
      {
        "astId": 5114,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "protocolFees",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_bytes32,t_uint128)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ILendingPool)7567": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(Pool)10835_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Types.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)10835_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_bytes32,t_uint128)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_uint128,t_uint128)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_uint256,t_struct(Tick)10760_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Types.Tick)",
        "numberOfBytes": "32",
        "value": "t_struct(Tick)10760_storage"
      },
      "t_struct(Pool)10835_storage": {
        "encoding": "inplace",
        "label": "struct Types.Pool",
        "members": [
          {
            "astId": 10826,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "parameters",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(PoolParameters)10796_storage"
          },
          {
            "astId": 10829,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "state",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(PoolState)10823_storage"
          },
          {
            "astId": 10834,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "ticks",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_struct(Tick)10760_storage)"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(PoolParameters)10796_storage": {
        "encoding": "inplace",
        "label": "struct Types.PoolParameters",
        "members": [
          {
            "astId": 10762,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "POOL_HASH",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 10764,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "UNDERLYING_TOKEN",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10766,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "TOKEN_DECIMALS",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 10769,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "YIELD_PROVIDER",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(ILendingPool)7567"
          },
          {
            "astId": 10771,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "MIN_RATE",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 10773,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "MAX_RATE",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 10775,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "RATE_SPACING",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 10777,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "MAX_BORROWABLE_AMOUNT",
            "offset": 16,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 10779,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "LOAN_DURATION",
            "offset": 0,
            "slot": "5",
            "type": "t_uint128"
          },
          {
            "astId": 10781,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "LIQUIDITY_REWARDS_DISTRIBUTION_RATE",
            "offset": 16,
            "slot": "5",
            "type": "t_uint128"
          },
          {
            "astId": 10783,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "COOLDOWN_PERIOD",
            "offset": 0,
            "slot": "6",
            "type": "t_uint128"
          },
          {
            "astId": 10785,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "REPAYMENT_PERIOD",
            "offset": 16,
            "slot": "6",
            "type": "t_uint128"
          },
          {
            "astId": 10787,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "LATE_REPAY_FEE_PER_BOND_RATE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint128"
          },
          {
            "astId": 10789,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "ESTABLISHMENT_FEE_RATE",
            "offset": 16,
            "slot": "7",
            "type": "t_uint128"
          },
          {
            "astId": 10791,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "REPAYMENT_FEE_RATE",
            "offset": 0,
            "slot": "8",
            "type": "t_uint128"
          },
          {
            "astId": 10793,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD",
            "offset": 16,
            "slot": "8",
            "type": "t_uint128"
          },
          {
            "astId": 10795,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "EARLY_REPAY",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(PoolState)10823_storage": {
        "encoding": "inplace",
        "label": "struct Types.PoolState",
        "members": [
          {
            "astId": 10798,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10800,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "defaulted",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10802,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "closed",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10804,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "currentMaturity",
            "offset": 3,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 10806,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "bondsIssuedQuantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 10808,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "normalizedBorrowedAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 10810,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "normalizedAvailableDeposits",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 10812,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "lowerInterestRate",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 10814,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "nextLoanMinStart",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 10816,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "remainingAdjustedLiquidityRewardsReserve",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 10818,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "yieldProviderLiquidityRatio",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 10820,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "currentBondsIssuanceIndex",
            "offset": 16,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 10822,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "defaultTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tick)10760_storage": {
        "encoding": "inplace",
        "label": "struct Types.Tick",
        "members": [
          {
            "astId": 10739,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "bondsIssuanceIndexMultiplier",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint128,t_uint128)"
          },
          {
            "astId": 10741,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "bondsQuantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 10743,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "adjustedTotalAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 10745,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "adjustedRemainingAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 10747,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "adjustedWithdrawnAmount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 10749,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "adjustedPendingAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 10751,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "normalizedLoanedAmount",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 10753,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "lastFeeDistributionTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 10755,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "atlendisLiquidityRatio",
            "offset": 16,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 10757,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "yieldProviderLiquidityRatio",
            "offset": 0,
            "slot": "5",
            "type": "t_uint128"
          },
          {
            "astId": 10759,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "accruedFees",
            "offset": 16,
            "slot": "5",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}