{
  "address": "0x091B55a0F85EeDb42a3a0dB8F726effFC1d8Ff80",
  "abi": [
    {
      "inputs": [],
      "name": "POS_MGMT_ONLY_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POS_POOL_DEFAULTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POS_POSITION_DOES_NOT_EXIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POS_POSITION_ONLY_IN_BONDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POS_TIMELOCK",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POS_ZERO_AMOUNT",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "tokenId",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "bondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "tokenId",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "UpdateRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "tokenId",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "remainingBonds",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "name": "_positions",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "adjustedBalance",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuanceIndex",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "remainingBonds",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsMaturity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "creationTimestamp",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "tokenId",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "tokenId",
          "type": "uint128"
        }
      ],
      "name": "getPositionRepartition",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "bondsQuantity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "normalizedDepositedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "contract IBorrowerPools",
          "name": "_pools",
          "type": "address"
        },
        {
          "internalType": "contract IPositionDescriptor",
          "name": "_positionDescriptor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract IBorrowerPools",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "tokenId",
          "type": "uint128"
        }
      ],
      "name": "position",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "adjustedBalance",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "remainingBonds",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsMaturity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionDescriptor",
      "outputs": [
        {
          "internalType": "contract IPositionDescriptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "tokenId",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "newRate",
          "type": "uint128"
        }
      ],
      "name": "updateRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "tokenId",
          "type": "uint128"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a7f6854944f1f9a23d2cbb966fbe293d7cee52b7b77c8ee891e7c3f66bf306e",
  "receipt": {
    "to": null,
    "from": "0xB194467578492D7E928300e38ea8eE0Cf8E2D457",
    "contractAddress": "0x091B55a0F85EeDb42a3a0dB8F726effFC1d8Ff80",
    "transactionIndex": 2,
    "gasUsed": "2491924",
    "logsBloom": "0x
    "blockHash": "0x5e00b27a551755ca251a9b65e0fb7de0e3d47f109a7592dcbacecdbe3fed23e9",
    "transactionHash": "0x3a7f6854944f1f9a23d2cbb966fbe293d7cee52b7b77c8ee891e7c3f66bf306e",
    "logs": [],
    "blockNumber": 31667635,
    "cumulativeGasUsed": "2721997",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "32ef18cba6c37a11ddc3b18d884f9a5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"POS_MGMT_ONLY_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POS_POOL_DEFAULTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POS_POSITION_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POS_POSITION_ONLY_IN_BONDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POS_TIMELOCK\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POS_ZERO_AMOUNT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"bondsIssuanceIndex\",\"type\":\"uint128\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"UpdateRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"remainingBonds\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"_positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"adjustedBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuanceIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"remainingBonds\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsMaturity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"creationTimestamp\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"}],\"name\":\"getPositionRepartition\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"bondsQuantity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"normalizedDepositedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IBorrowerPools\",\"name\":\"_pools\",\"type\":\"address\"},{\"internalType\":\"contract IPositionDescriptor\",\"name\":\"_positionDescriptor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract IBorrowerPools\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"}],\"name\":\"position\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"adjustedBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"remainingBonds\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsMaturity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuanceIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionDescriptor\",\"outputs\":[{\"internalType\":\"contract IPositionDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newRate\",\"type\":\"uint128\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"deposit(address,uint128,uint128,bytes32,address)\":{\"params\":{\"amount\":\"The amount of tokens to be deposited\",\"poolHash\":\"The identifier of the pool\",\"rate\":\"The rate at which to bid for a bonds\",\"to\":\"The address for which the position is created\",\"underlyingToken\":\"The contract address of the token to be deposited*\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getPositionRepartition(uint128)\":{\"params\":{\"tokenId\":\"The tokenId of the position\"},\"returns\":{\"bondsQuantity\":\"Quantity of bond held, represents funds borrowed\",\"normalizedDepositedAmount\":\"Amount of deposit placed on yield provider*\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"position(uint128)\":{\"params\":{\"tokenId\":\"The tokenId of the position\"},\"returns\":{\"adjustedBalance\":\"Adjusted balance of the position original deposit\",\"bondsIssuanceIndex\":\"Borrow period the deposit was made in*\",\"bondsMaturity\":\"Maturity of the position's remaining bonds\",\"poolHash\":\"The identifier of the pool\",\"rate\":\"Position bidding rate\",\"remainingBonds\":\"Quantity of bonds remaining in the position after a partial withdraw\",\"underlyingToken\":\"Address of the tokens the position contains\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"The tokenId of the position\"},\"returns\":{\"_0\":\"encoded svg*\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"updateRate(uint128,uint128)\":{\"params\":{\"newRate\":\"The new rate at which to bid for bonds*\",\"tokenId\":\"The tokenId of the position\"}},\"withdraw(uint128)\":{\"params\":{\"tokenId\":\"The tokenId of the position*\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint128,uint128,uint128,bytes32,uint128)\":{\"notice\":\"Emitted when #deposit is called and is a success\"},\"UpdateRate(address,uint128,uint128,uint128,bytes32)\":{\"notice\":\"Emitted when #updateRate is called and is a success\"},\"Withdraw(address,uint128,uint128,uint128,uint128,bytes32)\":{\"notice\":\"Emitted when #withdraw is called and is a success\"}},\"kind\":\"user\",\"methods\":{\"deposit(address,uint128,uint128,bytes32,address)\":{\"notice\":\"Deposits tokens into the yield provider and places a bid at the indicated rate within the respective pool's order book. A new position is created within the positions map that keeps track of this position's composition. An ERC721 NFT is minted for the user as a representation of the position.\"},\"getPositionRepartition(uint128)\":{\"notice\":\"Returns the balance on yield provider and the quantity of bond held\"},\"position(uint128)\":{\"notice\":\"Emitted when #withdraw is called and is a success\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the encoded svg data\"},\"updateRate(uint128,uint128)\":{\"notice\":\"Allows a user to update the rate at which to bid for bonds. A rate is only upgradable as long as the full amount of deposits are currently allocated with the yield provider i.e the position does not hold any bonds.\"},\"withdraw(uint128)\":{\"notice\":\"Withdraws the amount of tokens that are deposited with the yield provider. The bonds portion of the position is not affected.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PositionManager.sol\":\"PositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x805b2b34d4829b892217e5116dc1feb9c67bee2eb7d7b18dac3dbbb91b13e9c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"src/PositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nimport {IBorrowerPools} from \\\"./interfaces/IBorrowerPools.sol\\\";\\nimport {IPoolsController} from \\\"./interfaces/IPoolsController.sol\\\";\\n\\nimport \\\"./interfaces/IBorrowerPools.sol\\\";\\nimport \\\"./interfaces/IPositionDescriptor.sol\\\";\\nimport \\\"./interfaces/IPositionManager.sol\\\";\\nimport \\\"./lib/Errors.sol\\\";\\nimport \\\"./lib/Scaling.sol\\\";\\nimport \\\"./lib/Types.sol\\\";\\n\\ncontract PositionManager is ERC721Upgradeable, IPositionManager {\\n  using Scaling for uint128;\\n\\n  IBorrowerPools public pools;\\n  IPositionDescriptor public positionDescriptor;\\n\\n  // next position id\\n  uint128 private _nextId;\\n\\n  mapping(uint128 => Types.PositionDetails) public _positions;\\n\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    IBorrowerPools _pools,\\n    IPositionDescriptor _positionDescriptor\\n  ) public virtual initializer {\\n    __ERC721_init(_name, _symbol);\\n    pools = _pools;\\n    positionDescriptor = _positionDescriptor;\\n    _nextId = 1;\\n  }\\n\\n  /**\\n   * @notice Emitted when #withdraw is called and is a success\\n   * @param tokenId The tokenId of the position\\n   * @return poolHash The identifier of the pool\\n   * @return adjustedBalance Adjusted balance of the position original deposit\\n   * @return rate Position bidding rate\\n   * @return underlyingToken Address of the tokens the position contains\\n   * @return remainingBonds Quantity of bonds remaining in the position after a partial withdraw\\n   * @return bondsMaturity Maturity of the position's remaining bonds\\n   * @return bondsIssuanceIndex Borrow period the deposit was made in\\n   **/\\n  function position(uint128 tokenId)\\n    public\\n    view\\n    override\\n    returns (\\n      bytes32 poolHash,\\n      uint128 adjustedBalance,\\n      uint128 rate,\\n      address underlyingToken,\\n      uint128 remainingBonds,\\n      uint128 bondsMaturity,\\n      uint128 bondsIssuanceIndex\\n    )\\n  {\\n    Types.PositionDetails memory _position = _positions[tokenId];\\n    return (\\n      _position.poolHash,\\n      _position.adjustedBalance,\\n      _position.rate,\\n      _position.underlyingToken,\\n      _position.remainingBonds,\\n      _position.bondsMaturity,\\n      _position.bondsIssuanceIndex\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the encoded svg data\\n   * @param tokenId The tokenId of the position\\n   * @return encoded svg\\n   **/\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    if (!_exists(tokenId)) {\\n      revert Errors.POS_POSITION_DOES_NOT_EXIST();\\n    }\\n    return IPositionDescriptor(positionDescriptor).tokenURI(this, uint128(tokenId));\\n  }\\n\\n  function revertIfPositionDefaulted(uint256 tokenId) private view {\\n    (, bool defaulted, , , , , , , , , , ) = IPoolsController(address(pools)).getPoolState(\\n      _positions[uint128(tokenId)].poolHash\\n    );\\n    if (defaulted) {\\n      revert Errors.POS_POOL_DEFAULTED();\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override {\\n    revertIfPositionDefaulted(tokenId);\\n    super.transferFrom(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override {\\n    revertIfPositionDefaulted(tokenId);\\n    super.safeTransferFrom(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public override {\\n    revertIfPositionDefaulted(tokenId);\\n    super.safeTransferFrom(from, to, tokenId, _data);\\n  }\\n\\n  /**\\n   * @notice Returns the balance on yield provider and the quantity of bond held\\n   * @param tokenId The tokenId of the position\\n   * @return bondsQuantity Quantity of bond held, represents funds borrowed\\n   * @return normalizedDepositedAmount Amount of deposit placed on yield provider\\n   **/\\n  function getPositionRepartition(uint128 tokenId)\\n    external\\n    view\\n    override\\n    returns (uint128 bondsQuantity, uint128 normalizedDepositedAmount)\\n  {\\n    if (!_exists(tokenId)) {\\n      return (0, 0);\\n    }\\n    uint256 poolCurrentMaturity = pools.getPoolMaturity(_positions[tokenId].poolHash);\\n    if ((_positions[tokenId].bondsMaturity > 0) && (_positions[tokenId].bondsMaturity == poolCurrentMaturity)) {\\n      return (_positions[tokenId].remainingBonds, 0);\\n    }\\n    return\\n      pools.getAmountRepartition(\\n        _positions[tokenId].poolHash,\\n        _positions[tokenId].rate,\\n        _positions[tokenId].adjustedBalance,\\n        _positions[tokenId].bondsIssuanceIndex\\n      );\\n  }\\n\\n  /**\\n   * @notice Deposits tokens into the yield provider and places a bid at the indicated rate within the\\n   * respective pool's order book. A new position is created within the positions map that keeps\\n   * track of this position's composition. An ERC721 NFT is minted for the user as a representation\\n   * of the position.\\n   * @param to The address for which the position is created\\n   * @param amount The amount of tokens to be deposited\\n   * @param rate The rate at which to bid for a bonds\\n   * @param poolHash The identifier of the pool\\n   * @param underlyingToken The contract address of the token to be deposited\\n   **/\\n  function deposit(\\n    address to,\\n    uint128 amount,\\n    uint128 rate,\\n    bytes32 poolHash,\\n    address underlyingToken\\n  ) external override returns (uint128 tokenId) {\\n    if (amount == 0) {\\n      revert Errors.POS_ZERO_AMOUNT();\\n    }\\n\\n    tokenId = _nextId++;\\n\\n    _safeMint(to, tokenId);\\n\\n    uint8 decimals = ERC20Upgradeable(underlyingToken).decimals();\\n\\n    uint128 normalizedAmount = amount.scaleToWad(decimals);\\n\\n    (uint128 adjustedBalance, uint128 bondsIssuanceIndex) = pools.deposit(\\n      rate,\\n      poolHash,\\n      underlyingToken,\\n      _msgSender(),\\n      normalizedAmount\\n    );\\n\\n    _positions[tokenId] = Types.PositionDetails({\\n      adjustedBalance: adjustedBalance,\\n      rate: rate,\\n      poolHash: poolHash,\\n      underlyingToken: underlyingToken,\\n      remainingBonds: 0,\\n      bondsMaturity: 0,\\n      bondsIssuanceIndex: bondsIssuanceIndex,\\n      creationTimestamp: uint128(block.timestamp)\\n    });\\n\\n    emit Deposit(to, tokenId, normalizedAmount, rate, poolHash, bondsIssuanceIndex);\\n  }\\n\\n  /**\\n   * @notice Allows a user to update the rate at which to bid for bonds. A rate is only\\n   * upgradable as long as the full amount of deposits are currently allocated with the\\n   * yield provider i.e the position does not hold any bonds.\\n   * @param tokenId The tokenId of the position\\n   * @param newRate The new rate at which to bid for bonds\\n   **/\\n  function updateRate(uint128 tokenId, uint128 newRate) external override {\\n    if (ownerOf(tokenId) != _msgSender()) {\\n      revert Errors.POS_MGMT_ONLY_OWNER();\\n    }\\n    if (_positions[tokenId].creationTimestamp == block.timestamp) {\\n      revert Errors.POS_TIMELOCK();\\n    }\\n\\n    uint128 oldRate = _positions[tokenId].rate;\\n\\n    (uint128 newAmount, uint128 newBondsIssuanceIndex, uint128 normalizedAmount) = pools.updateRate(\\n      _positions[tokenId].adjustedBalance,\\n      _positions[tokenId].poolHash,\\n      oldRate,\\n      newRate,\\n      _positions[tokenId].bondsIssuanceIndex\\n    );\\n\\n    _positions[tokenId].adjustedBalance = newAmount;\\n    _positions[tokenId].rate = newRate;\\n    _positions[tokenId].bondsIssuanceIndex = newBondsIssuanceIndex;\\n\\n    emit UpdateRate(_msgSender(), tokenId, normalizedAmount, newRate, _positions[tokenId].poolHash);\\n  }\\n\\n  /**\\n   * @notice Withdraws the amount of tokens that are deposited with the yield provider.\\n   * The bonds portion of the position is not affected.\\n   * @param tokenId The tokenId of the position\\n   **/\\n  function withdraw(uint128 tokenId) external override {\\n    if (ownerOf(tokenId) != _msgSender()) {\\n      revert Errors.POS_MGMT_ONLY_OWNER();\\n    }\\n    if (_positions[tokenId].creationTimestamp == block.timestamp) {\\n      revert Errors.POS_TIMELOCK();\\n    }\\n    uint256 poolCurrentMaturity = pools.getPoolMaturity(_positions[tokenId].poolHash);\\n    if (\\n      !((_positions[tokenId].remainingBonds == 0) ||\\n        ((block.timestamp >= _positions[tokenId].bondsMaturity) &&\\n          (_positions[tokenId].bondsMaturity != poolCurrentMaturity)))\\n    ) {\\n      revert Errors.POS_POSITION_ONLY_IN_BONDS();\\n    }\\n\\n    (\\n      uint128 adjustedAmountToWithdraw,\\n      uint128 depositedAmountToWithdraw,\\n      uint128 remainingBondsQuantity,\\n      uint128 bondsMaturity\\n    ) = pools.getWithdrawAmounts(\\n        _positions[tokenId].poolHash,\\n        _positions[tokenId].rate,\\n        _positions[tokenId].adjustedBalance,\\n        _positions[tokenId].bondsIssuanceIndex\\n      );\\n\\n    _positions[tokenId].adjustedBalance -= depositedAmountToWithdraw;\\n    _positions[tokenId].remainingBonds = remainingBondsQuantity;\\n    _positions[tokenId].bondsMaturity = bondsMaturity;\\n\\n    uint128 normalizedWithdrawnDeposit = pools.withdraw(\\n      _positions[tokenId].poolHash,\\n      _positions[tokenId].rate,\\n      adjustedAmountToWithdraw,\\n      _positions[tokenId].bondsIssuanceIndex,\\n      _msgSender()\\n    );\\n\\n    emit Withdraw(\\n      _msgSender(),\\n      tokenId,\\n      normalizedWithdrawnDeposit,\\n      remainingBondsQuantity,\\n      _positions[tokenId].rate,\\n      _positions[tokenId].poolHash\\n    );\\n\\n    if (_positions[tokenId].remainingBonds == 0) {\\n      _burn(tokenId);\\n      delete _positions[tokenId];\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe5220eac67397ac0a0cdcfa46942c39055111e4a179decca6fa11ba25cdcc4e7\",\"license\":\"AGPL-3.0\"},\"src/extensions/AaveILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb617909e55f5405b1d3459acf8aebeb8a705d2f8119ceb4d83f3a1b29bb7edbb\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IBorrowerPools.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/AaveILendingPool.sol\\\";\\nimport \\\"../lib/Types.sol\\\";\\n\\n/**\\n * @title IBorrowerPools\\n * @notice Used by the Position contract to pool lender positions in the borrowers order books\\n *         Used by the borrowers to manage their loans on their pools\\n **/\\ninterface IBorrowerPools {\\n  // EVENTS\\n\\n  /**\\n   * @notice Emitted after a successful borrow\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedBorrowedAmount The actual amount of tokens borrowed\\n   * @param establishmentFees Fees paid to the protocol at borrow time\\n   **/\\n  event Borrow(bytes32 indexed poolHash, uint128 normalizedBorrowedAmount, uint128 establishmentFees);\\n\\n  /**\\n   * @notice Emitted after a successful further borrow\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedBorrowedAmount The actual amount of tokens borrowed\\n   * @param establishmentFees Fees paid to the protocol at borrow time\\n   **/\\n  event FurtherBorrow(bytes32 indexed poolHash, uint128 normalizedBorrowedAmount, uint128 establishmentFees);\\n\\n  /**\\n   * @notice Emitted after a successful repay\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedRepayAmount The actual amount of tokens repaid\\n   * @param repaymentFee The amount of fee paid to the protocol at repay time\\n   * @param normalizedDepositsAfterRepay The actual amount of tokens deposited and available for next loan after repay\\n   * @param nextLoanMinStart The timestamp after which a new loan can be taken\\n   **/\\n  event Repay(\\n    bytes32 indexed poolHash,\\n    uint128 normalizedRepayAmount,\\n    uint128 repaymentFee,\\n    uint128 normalizedDepositsAfterRepay,\\n    uint128 nextLoanMinStart\\n  );\\n\\n  /**\\n   * @notice Emitted after a successful early repay\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedRepayAmount The actual amount of tokens repaid\\n   * @param repaymentFee The amount of fee paid to the protocol at repay time\\n   * @param normalizedDepositsAfterRepay The actual amount of tokens deposited and available for next loan after repay\\n   * @param nextLoanMinStart The timestamp after which a new loan can be taken\\n   **/\\n  event EarlyRepay(\\n    bytes32 indexed poolHash,\\n    uint128 normalizedRepayAmount,\\n    uint128 repaymentFee,\\n    uint128 normalizedDepositsAfterRepay,\\n    uint128 nextLoanMinStart\\n  );\\n\\n  /**\\n   * @notice Emitted after a successful repay, made after the repayment period\\n   * Includes a late repay fee\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedRepayAmount The actual amount of tokens repaid\\n   * @param lateRepayFee The amount of fee paid due to a late repayment\\n   * @param repaymentFee The amount of fee paid to the protocol at repay time\\n   * @param normalizedDepositsAfterRepay The actual amount of tokens deposited and available for next loan after repay\\n   * @param nextLoanMinStart The timestamp after which a new loan can be taken\\n   **/\\n  event LateRepay(\\n    bytes32 indexed poolHash,\\n    uint128 normalizedRepayAmount,\\n    uint128 lateRepayFee,\\n    uint128 repaymentFee,\\n    uint128 normalizedDepositsAfterRepay,\\n    uint128 nextLoanMinStart\\n  );\\n\\n  /**\\n   * @notice Emitted after a borrower successfully deposits tokens in its pool liquidity rewards reserve\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedAmount The actual amount of tokens deposited into the reserve\\n   **/\\n  event TopUpLiquidityRewards(bytes32 poolHash, uint128 normalizedAmount);\\n\\n  // The below events and enums are being used in the PoolLogic library\\n  // The same way that libraries don't have storage, they don't have an event log\\n  // Hence event logs will be saved in the calling contract\\n  // For the contract abi to reflect this and be used by offchain libraries,\\n  // we define these events and enums in the contract itself as well\\n\\n  /**\\n   * @notice Emitted when a tick is initialized, i.e. when its first deposited in\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   **/\\n  event TickInitialized(bytes32 poolHash, uint128 rate, uint128 atlendisLiquidityRatio);\\n\\n  /**\\n   * @notice Emitted after a deposit on a tick that was done during a loan\\n   * @param poolHash The identifier of the pool\\n   * @param rate The position bidding rate\\n   * @param adjustedPendingDeposit The amount of tokens deposited during a loan, adjusted to the current liquidity index\\n   **/\\n  event TickLoanDeposit(bytes32 poolHash, uint128 rate, uint128 adjustedPendingDeposit);\\n\\n  /**\\n   * @notice Emitted after a deposit on a tick that was done without an active loan\\n   * @param poolHash The identifier of the pool\\n   * @param rate The position bidding rate\\n   * @param adjustedAvailableDeposit The amount of tokens available to the borrower for its next loan\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   **/\\n  event TickNoLoanDeposit(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAvailableDeposit,\\n    uint128 atlendisLiquidityRatio\\n  );\\n\\n  /**\\n   * @notice Emitted when a borrow successfully impacts a tick\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedRemainingAmountReduction The amount of tokens left to borrow from other ticks\\n   * @param loanedAmount The amount borrowed from the tick\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   * @param unborrowedRatio Proportion of ticks funds that were not borrowed\\n   **/\\n  event TickBorrow(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedRemainingAmountReduction,\\n    uint128 loanedAmount,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 unborrowedRatio\\n  );\\n\\n  /**\\n   * @notice Emitted when a withdraw is done outside of a loan on the tick\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedAmountToWithdraw The amount of tokens to withdraw, adjusted to the tick liquidity index\\n   **/\\n  event TickWithdrawPending(bytes32 poolHash, uint128 rate, uint128 adjustedAmountToWithdraw);\\n\\n  /**\\n   * @notice Emitted when a withdraw is done during a loan on the tick\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedAmountToWithdraw The amount of tokens to withdraw, adjusted to the tick liquidity index\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   * @param accruedFeesToWithdraw The amount of fees the position has a right to claim\\n   **/\\n  event TickWithdrawRemaining(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 accruedFeesToWithdraw\\n  );\\n\\n  /**\\n   * @notice Emitted when pending amounts are merged with the rest of the pool during a repay\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedPendingAmount The amount of pending funds deposited with available funds\\n   **/\\n  event TickPendingDeposit(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedPendingAmount,\\n    bool poolBondIssuanceIndexIncremented\\n  );\\n\\n  /**\\n   * @notice Emitted when funds from a tick are repaid by the borrower\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedRemainingAmount The total amount of tokens available to the borrower for\\n   * its next loan, adjusted to the tick current liquidity index\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   **/\\n  event TickRepay(bytes32 poolHash, uint128 rate, uint128 adjustedRemainingAmount, uint128 atlendisLiquidityRatio);\\n\\n  /**\\n   * @notice Emitted when liquidity rewards are distributed to a tick\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param remainingLiquidityRewards the amount of liquidityRewards added to the tick\\n   * @param addedAccruedFees Increase in accrued fees for that tick\\n   **/\\n  event CollectFeesForTick(bytes32 poolHash, uint128 rate, uint128 remainingLiquidityRewards, uint128 addedAccruedFees);\\n\\n  // VIEW METHODS\\n\\n  /**\\n   * @notice Returns the liquidity ratio of a given tick in a pool's order book.\\n   * The liquidity ratio is an accounting construct to deduce the accrued interest over time.\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick rate from which to extract the liquidity ratio\\n   * @return liquidityRatio The liquidity ratio of the given tick\\n   **/\\n  function getTickLiquidityRatio(bytes32 poolHash, uint128 rate) external view returns (uint128 liquidityRatio);\\n\\n  /**\\n   * @notice Returns the repartition between bonds and deposits of the given tick.\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick rate from which to get data\\n   * @return adjustedTotalAmount Total amount of deposit in the tick\\n   * @return adjustedRemainingAmount Amount of tokens in tick deposited with the\\n   * underlying yield provider that were deposited before bond issuance\\n   * @return bondsQuantity The quantity of bonds within the tick\\n   * @return adjustedPendingAmount Amount of deposit in tick deposited with the\\n   * underlying yield provider that were deposited after bond issuance\\n   * @return atlendisLiquidityRatio The liquidity ratio of the given tick\\n   * @return accruedFees The total fees claimable in the current tick, either from\\n   * yield provider interests or liquidity rewards accrual\\n   **/\\n  function getTickAmounts(bytes32 poolHash, uint128 rate)\\n    external\\n    view\\n    returns (\\n      uint128 adjustedTotalAmount,\\n      uint128 adjustedRemainingAmount,\\n      uint128 bondsQuantity,\\n      uint128 adjustedPendingAmount,\\n      uint128 atlendisLiquidityRatio,\\n      uint128 accruedFees\\n    );\\n\\n  /**\\n   * @notice Returns the timestamp of the last fee distribution to the tick\\n   * @param poolHash The identifier of the pool\\n   * @param rate The tick rate from which to get data\\n   * @return lastFeeDistributionTimestamp Timestamp of the last fee's distribution to the tick\\n   **/\\n  function getTickLastUpdate(string calldata poolHash, uint128 rate)\\n    external\\n    view\\n    returns (uint128 lastFeeDistributionTimestamp);\\n\\n  /**\\n   * @notice Returns the current state of the pool's parameters\\n   * @param poolHash The identifier of the pool\\n   * @return weightedAverageLendingRate The average deposit bidding rate in the order book\\n   * @return adjustedPendingDeposits Amount of tokens deposited after bond\\n   * issuance and currently on third party yield provider\\n   **/\\n  function getPoolAggregates(bytes32 poolHash)\\n    external\\n    view\\n    returns (uint128 weightedAverageLendingRate, uint128 adjustedPendingDeposits);\\n\\n  /**\\n   * @notice Returns the current maturity of the pool\\n   * @param poolHash The identifier of the pool\\n   * @return poolCurrentMaturity The pool's current maturity\\n   **/\\n  function getPoolMaturity(bytes32 poolHash) external view returns (uint128 poolCurrentMaturity);\\n\\n  /**\\n   * @notice Estimates the lending rate corresponding to the input amount,\\n   * depending on the current state of the pool\\n   * @param normalizedBorrowedAmount The amount to be borrowed from the pool\\n   * @param poolHash The identifier of the pool\\n   * @return estimatedRate The estimated loan rate for the current state of the pool\\n   **/\\n  function estimateLoanRate(uint128 normalizedBorrowedAmount, bytes32 poolHash)\\n    external\\n    view\\n    returns (uint128 estimatedRate);\\n\\n  /**\\n   * @notice Returns the token amount's repartition between bond quantity and normalized\\n   * deposited amount currently placed on third party yield provider\\n   * @param poolHash The identifier of the pool\\n   * @param rate Tick's rate\\n   * @param adjustedAmount Adjusted amount of tokens currently on third party yield provider\\n   * @param bondsIssuanceIndex The identifier of the borrow group\\n   * @return bondsQuantity Quantity of bonds held\\n   * @return normalizedDepositedAmount Amount of deposit currently on third party yield provider\\n   **/\\n  function getAmountRepartition(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  ) external view returns (uint128 bondsQuantity, uint128 normalizedDepositedAmount);\\n\\n  /**\\n   * @notice Returns the total amount a borrower has to repay to a pool. Includes borrowed\\n   * amount, late repay fees and protocol fees\\n   * @param poolHash The identifier of the pool\\n   * @param earlyRepay indicates if this is an early repay\\n   * @return normalizedRepayAmount Total repay amount\\n   * @return lateRepayFee Normalized amount to be paid to each bond in case of late repayment\\n   * @return repaymentFee Normalized fee amount paid to the protocol\\n   **/\\n  function getRepayAmounts(bytes32 poolHash, bool earlyRepay)\\n    external\\n    view\\n    returns (\\n      uint128 normalizedRepayAmount,\\n      uint128 lateRepayFee,\\n      uint128 repaymentFee\\n    );\\n\\n  // LENDER METHODS\\n\\n  /**\\n   * @notice Gets called within the Position.deposit() function and enables a lender to deposit assets\\n   * into a given borrower's order book. The lender specifies a rate (price) at which it is willing to\\n   * lend out its assets (bid on the zero coupon bond). The full amount will initially be deposited\\n   * on the underlying yield provider until the borrower sells bonds at the specified rate.\\n   * @param normalizedAmount The amount of the given asset to deposit\\n   * @param rate The rate at which to bid for a bond\\n   * @param poolHash The identifier of the pool\\n   * @param underlyingToken Contract' address of the token to be deposited\\n   * @param sender The lender address who calls the deposit function on the Position\\n   * @return adjustedAmount Deposited amount adjusted with current liquidity index\\n   * @return bondsIssuanceIndex The identifier of the borrow group to which the deposit has been allocated\\n   **/\\n  function deposit(\\n    uint128 rate,\\n    bytes32 poolHash,\\n    address underlyingToken,\\n    address sender,\\n    uint128 normalizedAmount\\n  ) external returns (uint128 adjustedAmount, uint128 bondsIssuanceIndex);\\n\\n  /**\\n   * @notice Gets called within the Position.withdraw() function and enables a lender to\\n   * evaluate the exact amount of tokens it is allowed to withdraw\\n   * @dev This method is meant to be used exclusively with the withdraw() method\\n   * Under certain circumstances, this method can return incorrect values, that would otherwise\\n   * be rejected by the checks made in the withdraw() method\\n   * @param poolHash The identifier of the pool\\n   * @param rate The rate the position is bidding for\\n   * @param adjustedAmount The amount of tokens in the position, adjusted to the deposit liquidity ratio\\n   * @param bondsIssuanceIndex An index determining deposit timing\\n   * @return adjustedAmountToWithdraw The amount of tokens to withdraw, adjuste for borrow pool use\\n   * @return depositedAmountToWithdraw The amount of tokens to withdraw, adjuste for position use\\n   * @return remainingBondsQuantity The quantity of bonds remaining within the position\\n   * @return bondsMaturity The maturity of bonds remaining within the position after withdraw\\n   **/\\n  function getWithdrawAmounts(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  )\\n    external\\n    view\\n    returns (\\n      uint128 adjustedAmountToWithdraw,\\n      uint128 depositedAmountToWithdraw,\\n      uint128 remainingBondsQuantity,\\n      uint128 bondsMaturity\\n    );\\n\\n  /**\\n   * @notice Gets called within the Position.withdraw() function and enables a lender to\\n   * withdraw assets that are deposited with the underlying yield provider\\n   * @param poolHash The identifier of the pool\\n   * @param rate The rate the position is bidding for\\n   * @param adjustedAmountToWithdraw The actual amount of tokens to withdraw from the position\\n   * @param bondsIssuanceIndex An index determining deposit timing\\n   * @param owner The address to which the withdrawns funds are sent\\n   * @return normalizedDepositedAmountToWithdraw Actual amount of tokens withdrawn and sent to the lender\\n   **/\\n  function withdraw(\\n    bytes32 poolHash,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 bondsIssuanceIndex,\\n    address owner\\n  ) external returns (uint128 normalizedDepositedAmountToWithdraw);\\n\\n  /**\\n   * @notice Gets called within Position.updateRate() and updates the order book ticks affected by the position\\n   * updating its rate. This is only possible as long as there are no bonds in the position, i.e the full\\n   * position currently lies with the yield provider\\n   * @param adjustedAmount The adjusted balance of tokens of the given position\\n   * @param poolHash The identifier of the pool\\n   * @param oldRate The current rate of the position\\n   * @param newRate The new rate of the position\\n   * @param oldBondsIssuanceIndex The identifier of the borrow group from the given position\\n   * @return newAdjustedAmount The updated amount of tokens of the position adjusted by the\\n   * new tick's global liquidity ratio\\n   * @return newBondsIssuanceIndex The new borrow group id to which the updated position is linked\\n   **/\\n  function updateRate(\\n    uint128 adjustedAmount,\\n    bytes32 poolHash,\\n    uint128 oldRate,\\n    uint128 newRate,\\n    uint128 oldBondsIssuanceIndex\\n  )\\n    external\\n    returns (\\n      uint128 newAdjustedAmount,\\n      uint128 newBondsIssuanceIndex,\\n      uint128 normalizedAmount\\n    );\\n\\n  // BORROWER METHODS\\n\\n  /**\\n   * @notice Called by the borrower to sell bonds to the order book.\\n   * The affected ticks get updated according the amount of bonds sold.\\n   * @param to The address to which the borrowed funds should be sent.\\n   * @param loanAmount The total amount of the loan\\n   **/\\n  function borrow(address to, uint128 loanAmount) external;\\n\\n  /**\\n   * @notice Repays a currently outstanding bonds of the given borrower.\\n   **/\\n  function repay() external;\\n\\n  /**\\n   * @notice Called by the borrower to top up liquidity rewards' reserve that\\n   * is distributed to liquidity providers at the pre-defined distribution rate.\\n   * @param normalizedAmount Amount of tokens  that will be add up to the borrower's liquidity rewards reserve\\n   **/\\n  function topUpLiquidityRewards(uint128 normalizedAmount) external;\\n\\n  // FEE COLLECTION\\n\\n  /**\\n   * @notice Collect yield provider fees as well as liquidity rewards for the target tick\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function collectFeesForTick(bytes32 poolHash, uint128 rate) external;\\n\\n  /**\\n   * @notice Collect yield provider fees as well as liquidity rewards for the whole pool\\n   * Iterates over all pool initialized ticks\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function collectFees(bytes32 poolHash) external;\\n}\\n\",\"keccak256\":\"0x1f069071f0835cad025275055ad902fcfb4ed53419f3e3de2e4bd0fc020469b3\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IPoolsController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib/Types.sol\\\";\\n\\n/**\\n * @title IPoolsController\\n * @notice Management of the pools\\n **/\\ninterface IPoolsController {\\n  // EVENTS\\n\\n  /**\\n   * @notice Emitted after a pool was creted\\n   **/\\n  event PoolCreated(PoolCreationParams params);\\n\\n  /**\\n   * @notice Emitted after a borrower address was allowed to borrow from a pool\\n   * @param borrowerAddress The address to allow\\n   * @param poolHash The identifier of the pool\\n   **/\\n  event BorrowerAllowed(address borrowerAddress, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after a borrower address was disallowed to borrow from a pool\\n   * @param borrowerAddress The address to disallow\\n   * @param poolHash The identifier of the pool\\n   **/\\n  event BorrowerDisallowed(address borrowerAddress, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted when a pool is active, i.e. after the borrower deposits enough tokens\\n   * in its pool liquidity rewards reserve as agreed before the pool creation\\n   * @param poolHash The identifier of the pool\\n   **/\\n  event PoolActivated(bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after pool is closed\\n   * @param poolHash The identifier of the pool\\n   * @param collectedLiquidityRewards The amount of liquidity rewards to have been collected at closing time\\n   **/\\n  event PoolClosed(bytes32 poolHash, uint128 collectedLiquidityRewards);\\n\\n  /**\\n   * @notice Emitted when a pool defaults on its loan repayment\\n   * @param poolHash The identifier of the pool\\n   * @param distributedLiquidityRewards The remaining liquidity rewards distributed to\\n   * bond holders\\n   **/\\n  event Default(bytes32 poolHash, uint128 distributedLiquidityRewards);\\n\\n  /**\\n   * @notice Emitted after governance sets the maximum borrowable amount for a pool\\n   **/\\n  event SetMaxBorrowableAmount(uint128 maxTokenDeposit, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after governance sets the liquidity rewards distribution rate for a pool\\n   **/\\n  event SetLiquidityRewardsDistributionRate(uint128 distributionRate, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after governance sets the establishment fee for a pool\\n   **/\\n  event SetEstablishmentFeeRate(uint128 establishmentRate, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after governance sets the repayment fee for a pool\\n   **/\\n  event SetRepaymentFeeRate(uint128 repaymentFeeRate, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted after governance claims the fees associated with a pool\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedAmount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  event ClaimProtocolFees(bytes32 poolHash, uint128 normalizedAmount, address to);\\n\\n  // VIEW METHODS\\n\\n  /**\\n   * @notice Returns the parameters of a pool\\n   * @param poolHash The identifier of the pool\\n   * @return underlyingToken Address of the underlying token of the pool\\n   * @return minRate Minimum rate of deposits accepted in the pool\\n   * @return maxRate Maximum rate of deposits accepted in the pool\\n   * @return rateSpacing Difference between two rates in the pool\\n   * @return maxBorrowableAmount Maximum amount of tokens that can be borrowed from the pool\\n   * @return loanDuration Duration of a loan in the pool\\n   * @return liquidityRewardsDistributionRate Rate at which liquidity rewards are distributed to lenders\\n   * @return cooldownPeriod Period after a loan during which a borrower cannot take another loan\\n   * @return repaymentPeriod Period after a loan end during which a borrower can repay without penalty\\n   * @return lateRepayFeePerBondRate Penalty a borrower has to pay when it repays late\\n   * @return liquidityRewardsActivationThreshold Minimum amount of liqudity rewards a borrower has to\\n   * deposit to active the pool\\n   **/\\n  function getPoolParameters(bytes32 poolHash)\\n    external\\n    view\\n    returns (\\n      address underlyingToken,\\n      uint128 minRate,\\n      uint128 maxRate,\\n      uint128 rateSpacing,\\n      uint128 maxBorrowableAmount,\\n      uint128 loanDuration,\\n      uint128 liquidityRewardsDistributionRate,\\n      uint128 cooldownPeriod,\\n      uint128 repaymentPeriod,\\n      uint128 lateRepayFeePerBondRate,\\n      uint128 liquidityRewardsActivationThreshold\\n    );\\n\\n  /**\\n   * @notice Returns the fee rates of a pool\\n   * @return establishmentFeeRate Amount of fees paid to the protocol at borrow time\\n   * @return repaymentFeeRate Amount of fees paid to the protocol at repay time\\n   **/\\n  function getPoolFeeRates(bytes32 poolHash)\\n    external\\n    view\\n    returns (uint128 establishmentFeeRate, uint128 repaymentFeeRate);\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @param poolHash The identifier of the pool\\n   * @return active Signals if a pool is active and ready to accept deposits\\n   * @return defaulted Signals if a pool was defaulted\\n   * @return closed Signals if a pool was closed\\n   * @return currentMaturity End timestamp of current loan\\n   * @return bondsIssuedQuantity Amount of bonds issued, to be repaid at maturity\\n   * @return normalizedBorrowedAmount Actual amount of tokens that were borrowed\\n   * @return normalizedAvailableDeposits Actual amount of tokens available to be borrowed\\n   * @return lowerInterestRate Minimum rate at which a deposit was made\\n   * @return nextLoanMinStart Cool down period, minimum timestamp after which a new loan can be taken\\n   * @return remainingAdjustedLiquidityRewardsReserve Remaining liquidity rewards to be distributed to lenders\\n   * @return yieldProviderLiquidityRatio Last recorded yield provider liquidity ratio\\n   * @return currentBondsIssuanceIndex Current borrow period identifier of the pool\\n   **/\\n  function getPoolState(bytes32 poolHash)\\n    external\\n    view\\n    returns (\\n      bool active,\\n      bool defaulted,\\n      bool closed,\\n      uint128 currentMaturity,\\n      uint128 bondsIssuedQuantity,\\n      uint128 normalizedBorrowedAmount,\\n      uint128 normalizedAvailableDeposits,\\n      uint128 lowerInterestRate,\\n      uint128 nextLoanMinStart,\\n      uint128 remainingAdjustedLiquidityRewardsReserve,\\n      uint128 yieldProviderLiquidityRatio,\\n      uint128 currentBondsIssuanceIndex\\n    );\\n\\n  /**\\n   * @notice Signals whether the early repay feature is activated or not\\n   * @return earlyRepay Flag that signifies whether the early repay feature is activated or not\\n   **/\\n  function isEarlyRepay(bytes32 poolHash) external view returns (bool earlyRepay);\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @return defaultTimestamp The timestamp at which the pool was defaulted\\n   **/\\n  function getDefaultTimestamp(bytes32 poolHash) external view returns (uint128 defaultTimestamp);\\n\\n  // GOVERNANCE METHODS\\n\\n  /**\\n   * @notice Parameters used for a pool creation\\n   * @param poolHash The identifier of the pool\\n   * @param underlyingToken Address of the pool underlying token\\n   * @param yieldProvider Yield provider of the pool\\n   * @param minRate Minimum bidding rate for the pool\\n   * @param maxRate Maximum bidding rate for the pool\\n   * @param rateSpacing Difference between two tick rates in the pool\\n   * @param maxBorrowableAmount Maximum amount of tokens a borrower can get from a pool\\n   * @param loanDuration Duration of a loan i.e. maturity of the issued bonds\\n   * @param distributionRate Rate at which the liquidity rewards are distributed to unmatched positions\\n   * @param cooldownPeriod Period of time after a repay during which the borrow cannot take a loan\\n   * @param repaymentPeriod Period after the end of a loan during which the borrower can repay without penalty\\n   * @param lateRepayFeePerBondRate Additional fees applied when a borrower repays its loan after the repayment period ends\\n   * @param establishmentFeeRate Fees paid to Atlendis at borrow time\\n   * @param repaymentFeeRate Fees paid to Atlendis at repay time\\n   * @param liquidityRewardsActivationThreshold Amount of tokens the borrower has to lock into the liquidity\\n   * @param earlyRepay Is early repay activated\\n   * rewards reserve to activate the pool\\n   **/\\n  struct PoolCreationParams {\\n    bytes32 poolHash;\\n    address underlyingToken;\\n    ILendingPool yieldProvider;\\n    uint128 minRate;\\n    uint128 maxRate;\\n    uint128 rateSpacing;\\n    uint128 maxBorrowableAmount;\\n    uint128 loanDuration;\\n    uint128 distributionRate;\\n    uint128 cooldownPeriod;\\n    uint128 repaymentPeriod;\\n    uint128 lateRepayFeePerBondRate;\\n    uint128 establishmentFeeRate;\\n    uint128 repaymentFeeRate;\\n    uint128 liquidityRewardsActivationThreshold;\\n    bool earlyRepay;\\n  }\\n\\n  /**\\n   * @notice Creates a new pool\\n   * @param params A struct defining the pool creation parameters\\n   **/\\n  function createNewPool(PoolCreationParams calldata params) external;\\n\\n  /**\\n   * @notice Allow an address to interact with a borrower pool\\n   * @param borrowerAddress The address to allow\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function allow(address borrowerAddress, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Remove pool interaction rights from an address\\n   * @param borrowerAddress The address to disallow\\n   * @param poolHash The identifier of the borrower pool\\n   **/\\n  function disallow(address borrowerAddress, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Flags the pool as closed\\n   * @param poolHash The identifier of the pool to be closed\\n   * @param to An address to which the remaining liquidity rewards will be sent\\n   **/\\n  function closePool(bytes32 poolHash, address to) external;\\n\\n  /**\\n   * @notice Flags the pool as defaulted\\n   * @param poolHash The identifier of the pool to default\\n   **/\\n  function setDefault(bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Set the maximum amount of tokens that can be borrowed in the target pool\\n   **/\\n  function setMaxBorrowableAmount(uint128 maxTokenDeposit, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Set the pool liquidity rewards distribution rate\\n   **/\\n  function setLiquidityRewardsDistributionRate(uint128 distributionRate, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Set the pool establishment protocol fee rate\\n   **/\\n  function setEstablishmentFeeRate(uint128 establishmentFeeRate, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Set the pool repayment protocol fee rate\\n   **/\\n  function setRepaymentFeeRate(uint128 repaymentFeeRate, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Withdraws protocol fees to a target address\\n   * @param poolHash The identifier of the pool\\n   * @param normalizedAmount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  function claimProtocolFees(\\n    bytes32 poolHash,\\n    uint128 normalizedAmount,\\n    address to\\n  ) external;\\n\\n  /**\\n   * @notice Stops all actions on all pools\\n   **/\\n  function freezePool() external;\\n\\n  /**\\n   * @notice Cancel a freeze, makes actions available again on all pools\\n   **/\\n  function unfreezePool() external;\\n}\\n\",\"keccak256\":\"0x5138647793c0816f5db907ad78913dfc625978933d44e8fd79cdf04715f84219\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IPositionDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPositionManager.sol\\\";\\n\\n/**\\n * @title IPositionDescriptor\\n * @notice Generates the SVG artwork for lenders positions\\n **/\\ninterface IPositionDescriptor {\\n  /**\\n   * @notice Emitted after the string identifier of a pool has been set\\n   * @param poolIdentifier The string identifier of the pool\\n   * @param poolHash The hash identifier of the pool\\n   **/\\n  event SetPoolIdentifier(string poolIdentifier, bytes32 poolHash);\\n\\n  /**\\n   * @notice Get the pool identifier corresponding to the input pool hash\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function getPoolIdentifier(bytes32 poolHash) external view returns (string memory);\\n\\n  /**\\n   * @notice Set the pool string identifier corresponding to the input pool hash\\n   * @param poolIdentifier The string identifier to associate with the corresponding pool hash\\n   * @param poolHash The identifier of the pool\\n   **/\\n  function setPoolIdentifier(string calldata poolIdentifier, bytes32 poolHash) external;\\n\\n  /**\\n   * @notice Returns the encoded svg for positions artwork\\n   * @param position The address of the position manager contract\\n   * @param tokenId The tokenId of the position\\n   **/\\n  function tokenURI(IPositionManager position, uint128 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x697687ce76bd310d824d3c8b8292245ab38215dd0e449bf1d56a5d019e90edfd\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBorrowerPools.sol\\\";\\n\\n/**\\n * @title IPositionManager\\n * @notice Contains methods that can be called by lenders to create and manage their position\\n **/\\ninterface IPositionManager {\\n  /**\\n   * @notice Emitted when #deposit is called and is a success\\n   * @param lender The address of the lender depositing token on the protocol\\n   * @param tokenId The tokenId of the position\\n   * @param amount The amount of deposited token\\n   * @param rate The position bidding rate\\n   * @param poolHash The identifier of the pool\\n   * @param bondsIssuanceIndex The borrow period assigned to the position\\n   **/\\n  event Deposit(\\n    address indexed lender,\\n    uint128 tokenId,\\n    uint128 amount,\\n    uint128 rate,\\n    bytes32 poolHash,\\n    uint128 bondsIssuanceIndex\\n  );\\n\\n  /**\\n   * @notice Emitted when #updateRate is called and is a success\\n   * @param lender The address of the lender updating their position\\n   * @param tokenId The tokenId of the position\\n   * @param amount The amount of deposited token plus their accrued interests\\n   * @param rate The new rate required by lender to lend their deposited token\\n   * @param poolHash The identifier of the pool\\n   **/\\n  event UpdateRate(address indexed lender, uint128 tokenId, uint128 amount, uint128 rate, bytes32 poolHash);\\n\\n  /**\\n   * @notice Emitted when #withdraw is called and is a success\\n   * @param lender The address of the withdrawing lender\\n   * @param tokenId The tokenId of the position\\n   * @param amount The amount of tokens withdrawn\\n   * @param rate The position bidding rate\\n   * @param poolHash The identifier of the pool\\n   **/\\n  event Withdraw(\\n    address indexed lender,\\n    uint128 tokenId,\\n    uint128 amount,\\n    uint128 remainingBonds,\\n    uint128 rate,\\n    bytes32 poolHash\\n  );\\n\\n  /**\\n   * @notice Emitted when #withdraw is called and is a success\\n   * @param tokenId The tokenId of the position\\n   * @return poolHash The identifier of the pool\\n   * @return adjustedBalance Adjusted balance of the position original deposit\\n   * @return rate Position bidding rate\\n   * @return underlyingToken Address of the tokens the position contains\\n   * @return remainingBonds Quantity of bonds remaining in the position after a partial withdraw\\n   * @return bondsMaturity Maturity of the position's remaining bonds\\n   * @return bondsIssuanceIndex Borrow period the deposit was made in\\n   **/\\n  function position(uint128 tokenId)\\n    external\\n    view\\n    returns (\\n      bytes32 poolHash,\\n      uint128 adjustedBalance,\\n      uint128 rate,\\n      address underlyingToken,\\n      uint128 remainingBonds,\\n      uint128 bondsMaturity,\\n      uint128 bondsIssuanceIndex\\n    );\\n\\n  /**\\n   * @notice Returns the balance on yield provider and the quantity of bond held\\n   * @param tokenId The tokenId of the position\\n   * @return bondsQuantity Quantity of bond held, represents funds borrowed\\n   * @return normalizedDepositedAmount Amount of deposit placed on yield provider\\n   **/\\n  function getPositionRepartition(uint128 tokenId)\\n    external\\n    view\\n    returns (uint128 bondsQuantity, uint128 normalizedDepositedAmount);\\n\\n  /**\\n   * @notice Deposits tokens into the yield provider and places a bid at the indicated rate within the\\n   * respective borrower's order book. A new position is created within the positions map that keeps\\n   * track of this position's composition. An ERC721 NFT is minted for the user as a representation\\n   * of the position.\\n   * @param to The address for which the position is created\\n   * @param amount The amount of tokens to be deposited\\n   * @param rate The rate at which to bid for a bonds\\n   * @param poolHash The identifier of the pool\\n   * @param underlyingToken The contract address of the token to be deposited\\n   **/\\n  function deposit(\\n    address to,\\n    uint128 amount,\\n    uint128 rate,\\n    bytes32 poolHash,\\n    address underlyingToken\\n  ) external returns (uint128 tokenId);\\n\\n  /**\\n   * @notice Allows a user to update the rate at which to bid for bonds. A rate is only\\n   * upgradable as long as the full amount of deposits are currently allocated with the\\n   * yield provider i.e the position does not hold any bonds.\\n   * @param tokenId The tokenId of the position\\n   * @param newRate The new rate at which to bid for bonds\\n   **/\\n  function updateRate(uint128 tokenId, uint128 newRate) external;\\n\\n  /**\\n   * @notice Withdraws the amount of tokens that are deposited with the yield provider.\\n   * The bonds portion of the position is not affected.\\n   * @param tokenId The tokenId of the position\\n   **/\\n  function withdraw(uint128 tokenId) external;\\n}\\n\",\"keccak256\":\"0x675f3faa8bc78c9593f12af677bf548a865f4938126b557be1454b1c0ba885c1\",\"license\":\"AGPL-3.0\"},\"src/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n  // *** Contract Specific Errors ***\\n  // BorrowerPools\\n  error BP_BORROW_MAX_BORROWABLE_AMOUNT_EXCEEDED(); // \\\"Amount borrowed is too big, exceeding borrowable capacity\\\";\\n  error BP_REPAY_NO_ACTIVE_LOAN(); // \\\"No active loan to be repaid, action cannot be performed\\\";\\n  error BP_BORROW_UNSUFFICIENT_BORROWABLE_AMOUNT_WITHIN_BRACKETS(); // \\\"Amount provided is greater than available amount within min rate and max rate brackets\\\";\\n  error BP_REPAY_AT_MATURITY_ONLY(); // \\\"Maturity has not been reached yet, action cannot be performed\\\";\\n  error BP_BORROW_COOLDOWN_PERIOD_NOT_OVER(); // \\\"Cooldown period after a repayment is not over\\\";\\n  error BP_MULTIPLE_BORROW_AFTER_MATURITY(); // \\\"Cannot borrow again from pool after loan maturity\\\";\\n  error BP_POOL_NOT_ACTIVE(); // \\\"Pool not active\\\"\\n  error BP_POOL_DEFAULTED(); // \\\"Pool defaulted\\\"\\n  error BP_LOAN_ONGOING(); // \\\"There's a loan ongoing, cannot update rate\\\"\\n  error BP_BORROW_OUT_OF_BOUND_AMOUNT(); // \\\"Amount provided is greater than available amount, action cannot be performed\\\";\\n  error BP_POOL_CLOSED(); // \\\"Pool closed\\\";\\n  error BP_OUT_OF_BOUND_MIN_RATE(); // \\\"Rate provided is lower than minimum rate of the pool\\\";\\n  error BP_OUT_OF_BOUND_MAX_RATE(); // \\\"Rate provided is greater than maximum rate of the pool\\\";\\n  error BP_UNMATCHED_TOKEN(); // \\\"Token/Asset provided does not match the underlying token of the pool\\\";\\n  error BP_RATE_SPACING(); // \\\"Decimals of rate provided do not comply with rate spacing of the pool\\\";\\n  error BP_BOND_ISSUANCE_ID_TOO_HIGH(); // \\\"Bond issuance id is too high\\\";\\n  error BP_NO_DEPOSIT_TO_WITHDRAW(); // \\\"Deposited amount non-borrowed equals to zero\\\";\\n  error BP_TARGET_BOND_ISSUANCE_INDEX_EMPTY(); // \\\"Target bond issuance index has no amount to withdraw\\\";\\n  error BP_EARLY_REPAY_NOT_ACTIVATED(); // \\\"The early repay feature is not activated for this pool\\\";\\n\\n  // PoolController\\n  error PC_POOL_NOT_ACTIVE(); // \\\"Pool not active\\\"\\n  error PC_POOL_DEFAULTED(); // \\\"Pool defaulted\\\"\\n  error PC_POOL_ALREADY_SET_FOR_BORROWER(); // \\\"Targeted borrower is already set for another pool\\\";\\n  error PC_POOL_TOKEN_NOT_SUPPORTED(); // \\\"Underlying token is not supported by the yield provider\\\";\\n  error PC_DISALLOW_UNMATCHED_BORROWER(); // \\\"Revoking the wrong borrower as the provided borrower does not match the provided address\\\";\\n  error PC_RATE_SPACING_COMPLIANCE(); // \\\"Provided rate must be compliant with rate spacing\\\";\\n  error PC_NO_ONGOING_LOAN(); // \\\"Cannot default a pool that has no ongoing loan\\\";\\n  error PC_NOT_ENOUGH_PROTOCOL_FEES(); // \\\"Not enough registered protocol fees to withdraw\\\";\\n  error PC_POOL_ALREADY_CLOSED(); // \\\"Pool already closed\\\";\\n  error PC_ZERO_POOL(); // \\\"Cannot make actions on the zero pool\\\";\\n  error PC_ZERO_ADDRESS(); // \\\"Cannot make actions on the zero address\\\";\\n  error PC_REPAYMENT_PERIOD_ONGOING(); // \\\"Cannot default pool while repayment period in ongoing\\\"\\n  error PC_ESTABLISHMENT_FEES_TOO_HIGH(); // \\\"Cannot set establishment fee over 100% of loan amount\\\"\\n\\n  // PositionManager\\n  error POS_MGMT_ONLY_OWNER(); // \\\"Only the owner of the position token can manage it (update rate, withdraw)\\\";\\n  error POS_POSITION_ONLY_IN_BONDS(); // \\\"Cannot withdraw a position that's only in bonds\\\";\\n  error POS_ZERO_AMOUNT(); // \\\"Cannot deposit zero amount\\\";\\n  error POS_TIMELOCK(); // \\\"Cannot withdraw or update rate in the same block as deposit\\\";\\n  error POS_POSITION_DOES_NOT_EXIST(); // \\\"Position does not exist\\\";\\n  error POS_POOL_DEFAULTED(); // \\\"Pool defaulted\\\";\\n\\n  // PositionDescriptor\\n  error POD_BAD_INPUT(); // \\\"Input pool identifier does not correspond to input pool hash\\\";\\n\\n  //*** Library Specific Errors ***\\n  // WadRayMath\\n  error MATH_MULTIPLICATION_OVERFLOW(); // \\\"The multiplication would result in a overflow\\\";\\n  error MATH_ADDITION_OVERFLOW(); // \\\"The addition would result in a overflow\\\";\\n  error MATH_DIVISION_BY_ZERO(); // \\\"The division would result in a divzion by zero\\\";\\n}\\n\",\"keccak256\":\"0x960795a70d31c058b388a40bc040737d006dca12cde37cafe4972c25e850ac5f\",\"license\":\"AGPL-3.0\"},\"src/lib/Scaling.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Scaling library\\n * @author Atlendis\\n * @dev Scale an arbitrary number to or from WAD precision\\n **/\\nlibrary Scaling {\\n  uint256 internal constant WAD = 1e18;\\n\\n  /**\\n   * @notice Scales an input amount to wad precision\\n   **/\\n  function scaleToWad(uint128 a, uint256 precision) internal pure returns (uint128) {\\n    return uint128((uint256(a) * WAD) / 10**precision);\\n  }\\n\\n  /**\\n   * @notice Scales an input amount from wad to target precision\\n   **/\\n  function scaleFromWad(uint128 a, uint256 precision) internal pure returns (uint128) {\\n    return uint128((uint256(a) * 10**precision) / WAD);\\n  }\\n}\\n\",\"keccak256\":\"0x6e71c9cffacb1c38cb7badef347ca94c739b1aa576066963293111adc5d3ecac\",\"license\":\"AGPL-3.0\"},\"src/lib/Types.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"../extensions/AaveILendingPool.sol\\\";\\n\\nlibrary Types {\\n  struct PositionDetails {\\n    uint128 adjustedBalance;\\n    uint128 rate;\\n    bytes32 poolHash;\\n    address underlyingToken;\\n    uint128 bondsIssuanceIndex;\\n    uint128 remainingBonds;\\n    uint128 bondsMaturity;\\n    uint128 creationTimestamp;\\n  }\\n\\n  struct Tick {\\n    mapping(uint128 => uint128) bondsIssuanceIndexMultiplier;\\n    uint128 bondsQuantity;\\n    uint128 adjustedTotalAmount;\\n    uint128 adjustedRemainingAmount;\\n    uint128 adjustedWithdrawnAmount;\\n    uint128 adjustedPendingAmount;\\n    uint128 normalizedLoanedAmount;\\n    uint128 lastFeeDistributionTimestamp;\\n    uint128 atlendisLiquidityRatio;\\n    uint128 yieldProviderLiquidityRatio;\\n    uint128 accruedFees;\\n  }\\n\\n  struct PoolParameters {\\n    bytes32 POOL_HASH;\\n    address UNDERLYING_TOKEN;\\n    uint8 TOKEN_DECIMALS;\\n    ILendingPool YIELD_PROVIDER;\\n    uint128 MIN_RATE;\\n    uint128 MAX_RATE;\\n    uint128 RATE_SPACING;\\n    uint128 MAX_BORROWABLE_AMOUNT;\\n    uint128 LOAN_DURATION;\\n    uint128 LIQUIDITY_REWARDS_DISTRIBUTION_RATE;\\n    uint128 COOLDOWN_PERIOD;\\n    uint128 REPAYMENT_PERIOD;\\n    uint128 LATE_REPAY_FEE_PER_BOND_RATE;\\n    uint128 ESTABLISHMENT_FEE_RATE;\\n    uint128 REPAYMENT_FEE_RATE;\\n    uint128 LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD;\\n    bool EARLY_REPAY;\\n  }\\n\\n  struct PoolState {\\n    bool active;\\n    bool defaulted;\\n    bool closed;\\n    uint128 currentMaturity;\\n    uint128 bondsIssuedQuantity;\\n    uint128 normalizedBorrowedAmount;\\n    uint128 normalizedAvailableDeposits;\\n    uint128 lowerInterestRate;\\n    uint128 nextLoanMinStart;\\n    uint128 remainingAdjustedLiquidityRewardsReserve;\\n    uint128 yieldProviderLiquidityRatio;\\n    uint128 currentBondsIssuanceIndex;\\n    uint128 defaultTimestamp;\\n  }\\n\\n  struct Pool {\\n    PoolParameters parameters;\\n    PoolState state;\\n    mapping(uint256 => Tick) ticks;\\n  }\\n}\\n\",\"keccak256\":\"0x844c38abf924e0a1c03a91d04e70811af799980f77952534153a60e14d77c918\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "deposit(address,uint128,uint128,bytes32,address)": {
        "params": {
          "amount": "The amount of tokens to be deposited",
          "poolHash": "The identifier of the pool",
          "rate": "The rate at which to bid for a bonds",
          "to": "The address for which the position is created",
          "underlyingToken": "The contract address of the token to be deposited*"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getPositionRepartition(uint128)": {
        "params": {
          "tokenId": "The tokenId of the position"
        },
        "returns": {
          "bondsQuantity": "Quantity of bond held, represents funds borrowed",
          "normalizedDepositedAmount": "Amount of deposit placed on yield provider*"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "position(uint128)": {
        "params": {
          "tokenId": "The tokenId of the position"
        },
        "returns": {
          "adjustedBalance": "Adjusted balance of the position original deposit",
          "bondsIssuanceIndex": "Borrow period the deposit was made in*",
          "bondsMaturity": "Maturity of the position's remaining bonds",
          "poolHash": "The identifier of the pool",
          "rate": "Position bidding rate",
          "remainingBonds": "Quantity of bonds remaining in the position after a partial withdraw",
          "underlyingToken": "Address of the tokens the position contains"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "The tokenId of the position"
        },
        "returns": {
          "_0": "encoded svg*"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "updateRate(uint128,uint128)": {
        "params": {
          "newRate": "The new rate at which to bid for bonds*",
          "tokenId": "The tokenId of the position"
        }
      },
      "withdraw(uint128)": {
        "params": {
          "tokenId": "The tokenId of the position*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,uint128,uint128,uint128,bytes32,uint128)": {
        "notice": "Emitted when #deposit is called and is a success"
      },
      "UpdateRate(address,uint128,uint128,uint128,bytes32)": {
        "notice": "Emitted when #updateRate is called and is a success"
      },
      "Withdraw(address,uint128,uint128,uint128,uint128,bytes32)": {
        "notice": "Emitted when #withdraw is called and is a success"
      }
    },
    "kind": "user",
    "methods": {
      "deposit(address,uint128,uint128,bytes32,address)": {
        "notice": "Deposits tokens into the yield provider and places a bid at the indicated rate within the respective pool's order book. A new position is created within the positions map that keeps track of this position's composition. An ERC721 NFT is minted for the user as a representation of the position."
      },
      "getPositionRepartition(uint128)": {
        "notice": "Returns the balance on yield provider and the quantity of bond held"
      },
      "position(uint128)": {
        "notice": "Emitted when #withdraw is called and is a success"
      },
      "tokenURI(uint256)": {
        "notice": "Returns the encoded svg data"
      },
      "updateRate(uint128,uint128)": {
        "notice": "Allows a user to update the rate at which to bid for bonds. A rate is only upgradable as long as the full amount of deposits are currently allocated with the yield provider i.e the position does not hold any bonds."
      },
      "withdraw(uint128)": {
        "notice": "Withdraws the amount of tokens that are deposited with the yield provider. The bonds portion of the position is not affected."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 408,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 411,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2862,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3109,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1555,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1557,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1561,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1565,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1569,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1575,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2416,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 6752,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "pools",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IBorrowerPools)7881"
      },
      {
        "astId": 6755,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "positionDescriptor",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IPositionDescriptor)8206"
      },
      {
        "astId": 6757,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "_nextId",
        "offset": 0,
        "slot": "153",
        "type": "t_uint128"
      },
      {
        "astId": 6762,
        "contract": "src/PositionManager.sol:PositionManager",
        "label": "_positions",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint128,t_struct(PositionDetails)10607_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBorrowerPools)7881": {
        "encoding": "inplace",
        "label": "contract IBorrowerPools",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionDescriptor)8206": {
        "encoding": "inplace",
        "label": "contract IPositionDescriptor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint128,t_struct(PositionDetails)10607_storage)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => struct Types.PositionDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(PositionDetails)10607_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PositionDetails)10607_storage": {
        "encoding": "inplace",
        "label": "struct Types.PositionDetails",
        "members": [
          {
            "astId": 10592,
            "contract": "src/PositionManager.sol:PositionManager",
            "label": "adjustedBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 10594,
            "contract": "src/PositionManager.sol:PositionManager",
            "label": "rate",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 10596,
            "contract": "src/PositionManager.sol:PositionManager",
            "label": "poolHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 10598,
            "contract": "src/PositionManager.sol:PositionManager",
            "label": "underlyingToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 10600,
            "contract": "src/PositionManager.sol:PositionManager",
            "label": "bondsIssuanceIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 10602,
            "contract": "src/PositionManager.sol:PositionManager",
            "label": "remainingBonds",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 10604,
            "contract": "src/PositionManager.sol:PositionManager",
            "label": "bondsMaturity",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 10606,
            "contract": "src/PositionManager.sol:PositionManager",
            "label": "creationTimestamp",
            "offset": 16,
            "slot": "4",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}