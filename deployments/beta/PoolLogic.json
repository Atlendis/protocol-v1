{
  "address": "0x1c0f073176625F7B8fa90D17e22ef6033d80223d",
  "abi": [
    {
      "inputs": [],
      "name": "MATH_ADDITION_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MATH_DIVISION_BY_ZERO",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MATH_MULTIPLICATION_OVERFLOW",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "borrower",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "remainingLiquidityRewards",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "addedAccruedFees",
          "type": "uint128"
        }
      ],
      "name": "CollectFeesForTick",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolHash",
          "type": "bytes32"
        }
      ],
      "name": "PoolActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "borrower",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedRemainingAmountReduction",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "loanedAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "unborrowedRatio",
          "type": "uint128"
        }
      ],
      "name": "TickBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "borrower",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        }
      ],
      "name": "TickInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "borrower",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedPendingDeposit",
          "type": "uint128"
        }
      ],
      "name": "TickLoanDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "borrower",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedPendingDeposit",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        }
      ],
      "name": "TickNoLoanDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "borrower",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedPendingAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "poolBondIssuanceIndexIncremented",
          "type": "bool"
        }
      ],
      "name": "TickPendingDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "borrower",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newAdjustedRemainingAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        }
      ],
      "name": "TickRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "borrower",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedAmountToWithdraw",
          "type": "uint128"
        }
      ],
      "name": "TickWithdrawPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "borrower",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedAmountToWithdraw",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "accruedFeesToWithdraw",
          "type": "uint128"
        }
      ],
      "name": "TickWithdrawRemaining",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "borrower",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "addedLiquidityRewards",
          "type": "uint128"
        }
      ],
      "name": "TopUpLiquidityRewards",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x678f21b913af637869b00e6cb61db99e36118b429917b30c97a27c4e57113e60",
  "receipt": {
    "to": null,
    "from": "0xB194467578492D7E928300e38ea8eE0Cf8E2D457",
    "contractAddress": "0x1c0f073176625F7B8fa90D17e22ef6033d80223d",
    "transactionIndex": 0,
    "gasUsed": "2427547",
    "logsBloom": "0x
    "blockHash": "0xf86a705b5b509e151a2d93dd61bdba51e3ab23dcedd33bbea604ff6119cb4c02",
    "transactionHash": "0x678f21b913af637869b00e6cb61db99e36118b429917b30c97a27c4e57113e60",
    "logs": [],
    "blockNumber": 31667625,
    "cumulativeGasUsed": "2427547",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "32ef18cba6c37a11ddc3b18d884f9a5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MATH_ADDITION_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MATH_DIVISION_BY_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MATH_MULTIPLICATION_OVERFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"borrower\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"remainingLiquidityRewards\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"addedAccruedFees\",\"type\":\"uint128\"}],\"name\":\"CollectFeesForTick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolHash\",\"type\":\"bytes32\"}],\"name\":\"PoolActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"borrower\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedRemainingAmountReduction\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"loanedAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"unborrowedRatio\",\"type\":\"uint128\"}],\"name\":\"TickBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"borrower\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"}],\"name\":\"TickInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"borrower\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedPendingDeposit\",\"type\":\"uint128\"}],\"name\":\"TickLoanDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"borrower\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedPendingDeposit\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"}],\"name\":\"TickNoLoanDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"borrower\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedPendingAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"poolBondIssuanceIndexIncremented\",\"type\":\"bool\"}],\"name\":\"TickPendingDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"borrower\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newAdjustedRemainingAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"}],\"name\":\"TickRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"borrower\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedAmountToWithdraw\",\"type\":\"uint128\"}],\"name\":\"TickWithdrawPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"borrower\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedAmountToWithdraw\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"accruedFeesToWithdraw\",\"type\":\"uint128\"}],\"name\":\"TickWithdrawRemaining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"borrower\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"addedLiquidityRewards\",\"type\":\"uint128\"}],\"name\":\"TopUpLiquidityRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBondsToTick(Types.Pool storage,uint128,uint128,uint128)\":{\"details\":\"Makes all the state changes necessary to add bonds to a tick Updates tick data and conversion data*\"},\"computeAmountRepartitionForTick(Types.Pool storage,uint128,uint128,uint128)\":{\"details\":\"Computes how the position is split between deposit and bonds*\"},\"depositToTick(Types.Pool storage,uint128,uint128)\":{\"details\":\"Deposit to a target tick Updates tick data*\"},\"distributeLiquidityRewards(Types.Pool storage)\":{\"details\":\"Distributes remaining liquidity rewards reserve to lenders Called in case of pool default*\"},\"getBondsIssuanceParametersForTick(Types.Pool storage,uint128,uint128)\":{\"details\":\"Computes the quantity of bonds purchased, and the equivalent adjusted deposit amount used for the issuance*\"},\"getRepayValue(Types.Pool storage,bool)\":{\"details\":\"The return value includes only notional and accrued interest, it does not include any fees due for repay by the borrrower*\"},\"peekAccruedFeesShare(Types.Pool storage,uint128,uint128,uint128)\":{\"details\":\"Get share of accumulated fees from estimated current tick state*\"},\"repayForTick(Types.Pool storage,uint128,uint128)\":{\"details\":\"Updates tick data after a repayment*\"},\"topUpLiquidityRewards(Types.Pool storage,uint128)\":{\"details\":\"Top up liquidity rewards for later distribution*\"},\"withdrawDepositedAmountForTick(Types.Pool storage,uint128,uint128,uint128)\":{\"details\":\"Updates tick data after a withdrawal consisting of only amount deposited to yield provider*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/PoolLogic.sol\":\"PoolLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"src/extensions/AaveILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb617909e55f5405b1d3459acf8aebeb8a705d2f8119ceb4d83f3a1b29bb7edbb\",\"license\":\"AGPL-3.0\"},\"src/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n  // *** Contract Specific Errors ***\\n  // BorrowerPools\\n  error BP_BORROW_MAX_BORROWABLE_AMOUNT_EXCEEDED(); // \\\"Amount borrowed is too big, exceeding borrowable capacity\\\";\\n  error BP_REPAY_NO_ACTIVE_LOAN(); // \\\"No active loan to be repaid, action cannot be performed\\\";\\n  error BP_BORROW_UNSUFFICIENT_BORROWABLE_AMOUNT_WITHIN_BRACKETS(); // \\\"Amount provided is greater than available amount within min rate and max rate brackets\\\";\\n  error BP_REPAY_AT_MATURITY_ONLY(); // \\\"Maturity has not been reached yet, action cannot be performed\\\";\\n  error BP_BORROW_COOLDOWN_PERIOD_NOT_OVER(); // \\\"Cooldown period after a repayment is not over\\\";\\n  error BP_MULTIPLE_BORROW_AFTER_MATURITY(); // \\\"Cannot borrow again from pool after loan maturity\\\";\\n  error BP_POOL_NOT_ACTIVE(); // \\\"Pool not active\\\"\\n  error BP_POOL_DEFAULTED(); // \\\"Pool defaulted\\\"\\n  error BP_LOAN_ONGOING(); // \\\"There's a loan ongoing, cannot update rate\\\"\\n  error BP_BORROW_OUT_OF_BOUND_AMOUNT(); // \\\"Amount provided is greater than available amount, action cannot be performed\\\";\\n  error BP_POOL_CLOSED(); // \\\"Pool closed\\\";\\n  error BP_OUT_OF_BOUND_MIN_RATE(); // \\\"Rate provided is lower than minimum rate of the pool\\\";\\n  error BP_OUT_OF_BOUND_MAX_RATE(); // \\\"Rate provided is greater than maximum rate of the pool\\\";\\n  error BP_UNMATCHED_TOKEN(); // \\\"Token/Asset provided does not match the underlying token of the pool\\\";\\n  error BP_RATE_SPACING(); // \\\"Decimals of rate provided do not comply with rate spacing of the pool\\\";\\n  error BP_BOND_ISSUANCE_ID_TOO_HIGH(); // \\\"Bond issuance id is too high\\\";\\n  error BP_NO_DEPOSIT_TO_WITHDRAW(); // \\\"Deposited amount non-borrowed equals to zero\\\";\\n  error BP_TARGET_BOND_ISSUANCE_INDEX_EMPTY(); // \\\"Target bond issuance index has no amount to withdraw\\\";\\n  error BP_EARLY_REPAY_NOT_ACTIVATED(); // \\\"The early repay feature is not activated for this pool\\\";\\n\\n  // PoolController\\n  error PC_POOL_NOT_ACTIVE(); // \\\"Pool not active\\\"\\n  error PC_POOL_DEFAULTED(); // \\\"Pool defaulted\\\"\\n  error PC_POOL_ALREADY_SET_FOR_BORROWER(); // \\\"Targeted borrower is already set for another pool\\\";\\n  error PC_POOL_TOKEN_NOT_SUPPORTED(); // \\\"Underlying token is not supported by the yield provider\\\";\\n  error PC_DISALLOW_UNMATCHED_BORROWER(); // \\\"Revoking the wrong borrower as the provided borrower does not match the provided address\\\";\\n  error PC_RATE_SPACING_COMPLIANCE(); // \\\"Provided rate must be compliant with rate spacing\\\";\\n  error PC_NO_ONGOING_LOAN(); // \\\"Cannot default a pool that has no ongoing loan\\\";\\n  error PC_NOT_ENOUGH_PROTOCOL_FEES(); // \\\"Not enough registered protocol fees to withdraw\\\";\\n  error PC_POOL_ALREADY_CLOSED(); // \\\"Pool already closed\\\";\\n  error PC_ZERO_POOL(); // \\\"Cannot make actions on the zero pool\\\";\\n  error PC_ZERO_ADDRESS(); // \\\"Cannot make actions on the zero address\\\";\\n  error PC_REPAYMENT_PERIOD_ONGOING(); // \\\"Cannot default pool while repayment period in ongoing\\\"\\n  error PC_ESTABLISHMENT_FEES_TOO_HIGH(); // \\\"Cannot set establishment fee over 100% of loan amount\\\"\\n\\n  // PositionManager\\n  error POS_MGMT_ONLY_OWNER(); // \\\"Only the owner of the position token can manage it (update rate, withdraw)\\\";\\n  error POS_POSITION_ONLY_IN_BONDS(); // \\\"Cannot withdraw a position that's only in bonds\\\";\\n  error POS_ZERO_AMOUNT(); // \\\"Cannot deposit zero amount\\\";\\n  error POS_TIMELOCK(); // \\\"Cannot withdraw or update rate in the same block as deposit\\\";\\n  error POS_POSITION_DOES_NOT_EXIST(); // \\\"Position does not exist\\\";\\n  error POS_POOL_DEFAULTED(); // \\\"Pool defaulted\\\";\\n\\n  // PositionDescriptor\\n  error POD_BAD_INPUT(); // \\\"Input pool identifier does not correspond to input pool hash\\\";\\n\\n  //*** Library Specific Errors ***\\n  // WadRayMath\\n  error MATH_MULTIPLICATION_OVERFLOW(); // \\\"The multiplication would result in a overflow\\\";\\n  error MATH_ADDITION_OVERFLOW(); // \\\"The addition would result in a overflow\\\";\\n  error MATH_DIVISION_BY_ZERO(); // \\\"The division would result in a divzion by zero\\\";\\n}\\n\",\"keccak256\":\"0x960795a70d31c058b388a40bc040737d006dca12cde37cafe4972c25e850ac5f\",\"license\":\"AGPL-3.0\"},\"src/lib/PoolLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {Rounding} from \\\"./Rounding.sol\\\";\\nimport {Scaling} from \\\"./Scaling.sol\\\";\\nimport {Uint128WadRayMath} from \\\"./Uint128WadRayMath.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"../extensions/AaveILendingPool.sol\\\";\\n\\nlibrary PoolLogic {\\n  event PoolActivated(bytes32 poolHash);\\n  enum BalanceUpdateType {\\n    INCREASE,\\n    DECREASE\\n  }\\n  event TickInitialized(bytes32 borrower, uint128 rate, uint128 atlendisLiquidityRatio);\\n  event TickLoanDeposit(bytes32 borrower, uint128 rate, uint128 adjustedPendingDeposit);\\n  event TickNoLoanDeposit(\\n    bytes32 borrower,\\n    uint128 rate,\\n    uint128 adjustedPendingDeposit,\\n    uint128 atlendisLiquidityRatio\\n  );\\n  event TickBorrow(\\n    bytes32 borrower,\\n    uint128 rate,\\n    uint128 adjustedRemainingAmountReduction,\\n    uint128 loanedAmount,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 unborrowedRatio\\n  );\\n  event TickWithdrawPending(bytes32 borrower, uint128 rate, uint128 adjustedAmountToWithdraw);\\n  event TickWithdrawRemaining(\\n    bytes32 borrower,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 accruedFeesToWithdraw\\n  );\\n  event TickPendingDeposit(\\n    bytes32 borrower,\\n    uint128 rate,\\n    uint128 adjustedPendingAmount,\\n    bool poolBondIssuanceIndexIncremented\\n  );\\n  event TopUpLiquidityRewards(bytes32 borrower, uint128 addedLiquidityRewards);\\n  event TickRepay(bytes32 borrower, uint128 rate, uint128 newAdjustedRemainingAmount, uint128 atlendisLiquidityRatio);\\n  event CollectFeesForTick(bytes32 borrower, uint128 rate, uint128 remainingLiquidityRewards, uint128 addedAccruedFees);\\n\\n  using PoolLogic for Types.Pool;\\n  using Uint128WadRayMath for uint128;\\n  using Rounding for uint128;\\n  using Scaling for uint128;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  uint256 public constant SECONDS_PER_YEAR = 365 days;\\n  uint256 public constant WAD = 1e18;\\n  uint256 public constant RAY = 1e27;\\n\\n  /**\\n   * @dev Getter for the multiplier allowing a conversion between pending and deposited\\n   * amounts for the target bonds issuance index\\n   **/\\n  function getBondIssuanceMultiplierForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 bondsIssuanceIndex\\n  ) internal view returns (uint128 returnBondsIssuanceMultiplier) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    returnBondsIssuanceMultiplier = tick.bondsIssuanceIndexMultiplier[bondsIssuanceIndex];\\n    if (returnBondsIssuanceMultiplier == 0) {\\n      returnBondsIssuanceMultiplier = uint128(RAY);\\n    }\\n  }\\n\\n  /**\\n   * @dev Get share of accumulated fees from stored current tick state\\n   **/\\n  function getAccruedFeesShare(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmount\\n  ) internal view returns (uint128 accruedFeesShare) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    accruedFeesShare = tick.accruedFees.wadMul(adjustedAmount).wadDiv(tick.adjustedRemainingAmount);\\n  }\\n\\n  /**\\n   * @dev Get share of accumulated fees from estimated current tick state\\n   **/\\n  function peekAccruedFeesShare(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 accruedFees\\n  ) public view returns (uint128 accruedFeesShare) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    if (tick.adjustedRemainingAmount == 0) {\\n      return 0;\\n    }\\n    accruedFeesShare = accruedFees.wadMul(adjustedAmount).wadDiv(tick.adjustedRemainingAmount);\\n  }\\n\\n  function getLateRepayFeePerBond(Types.Pool storage pool) public view returns (uint128 lateRepayFeePerBond) {\\n    uint256 lateRepaymentTimestamp = pool.state.currentMaturity + pool.parameters.REPAYMENT_PERIOD;\\n    if (block.timestamp > lateRepaymentTimestamp) {\\n      uint256 referenceTimestamp = pool.state.defaultTimestamp > 0 ? pool.state.defaultTimestamp : block.timestamp;\\n      lateRepayFeePerBond = uint128(\\n        uint256(referenceTimestamp - lateRepaymentTimestamp) * uint256(pool.parameters.LATE_REPAY_FEE_PER_BOND_RATE)\\n      );\\n    }\\n  }\\n\\n  function getRepaymentFees(Types.Pool storage pool, uint128 normalizedRepayAmount)\\n    public\\n    view\\n    returns (uint128 repaymentFees)\\n  {\\n    repaymentFees = (normalizedRepayAmount - pool.state.normalizedBorrowedAmount).wadMul(\\n      pool.parameters.REPAYMENT_FEE_RATE\\n    );\\n  }\\n\\n  /**\\n   * @dev The return value includes only notional and accrued interest,\\n   * it does not include any fees due for repay by the borrrower\\n   **/\\n  function getRepayValue(Types.Pool storage pool, bool earlyRepay) public view returns (uint128 repayValue) {\\n    if (pool.state.currentMaturity == 0) {\\n      return 0;\\n    }\\n    if (!earlyRepay) {\\n      // Note: Despite being in the context of a none early repay we prevent underflow in case of wrong user input\\n      // and allow querying expected bonds quantity if loan is repaid at maturity\\n      if (block.timestamp <= pool.state.currentMaturity) {\\n        return pool.state.bondsIssuedQuantity;\\n      }\\n    }\\n    for (\\n      uint128 rate = pool.state.lowerInterestRate;\\n      rate <= pool.parameters.MAX_RATE;\\n      rate += pool.parameters.RATE_SPACING\\n    ) {\\n      Types.Tick storage tick = pool.ticks[rate];\\n      repayValue += getTimeValue(pool, tick.bondsQuantity, rate);\\n    }\\n  }\\n\\n  function getTimeValue(\\n    Types.Pool storage pool,\\n    uint128 bondsQuantity,\\n    uint128 rate\\n  ) public view returns (uint128) {\\n    if (block.timestamp <= pool.state.currentMaturity) {\\n      return bondsQuantity.wadMul(getTickBondPrice(rate, uint128(pool.state.currentMaturity - block.timestamp)));\\n    }\\n    uint256 referenceTimestamp = uint128(block.timestamp);\\n    if (pool.state.defaultTimestamp > 0) {\\n      referenceTimestamp = pool.state.defaultTimestamp;\\n    }\\n    return bondsQuantity.wadDiv(getTickBondPrice(rate, uint128(referenceTimestamp - pool.state.currentMaturity)));\\n  }\\n\\n  /**\\n   * @dev Deposit to a target tick\\n   * Updates tick data\\n   **/\\n  function depositToTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 normalizedAmount\\n  ) public returns (uint128 adjustedAmount, uint128 returnBondsIssuanceIndex) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    pool.collectFees(rate);\\n\\n    // if there is an ongoing loan, the deposited amount goes to the pending\\n    // quantity and will be considered for next loan\\n    if (pool.state.currentMaturity > 0) {\\n      adjustedAmount = normalizedAmount.wadRayDiv(tick.yieldProviderLiquidityRatio);\\n      tick.adjustedPendingAmount += adjustedAmount;\\n      returnBondsIssuanceIndex = pool.state.currentBondsIssuanceIndex + 1;\\n      emit TickLoanDeposit(pool.parameters.POOL_HASH, rate, adjustedAmount);\\n    }\\n    // if there is no ongoing loan, the deposited amount goes to total and remaining\\n    // amount and can be borrowed instantaneously\\n    else {\\n      adjustedAmount = normalizedAmount.wadRayDiv(tick.atlendisLiquidityRatio);\\n      tick.adjustedTotalAmount += adjustedAmount;\\n      tick.adjustedRemainingAmount += adjustedAmount;\\n      returnBondsIssuanceIndex = pool.state.currentBondsIssuanceIndex;\\n      pool.state.normalizedAvailableDeposits += normalizedAmount;\\n\\n      // return amount adapted to bond index\\n      adjustedAmount = adjustedAmount.wadRayDiv(\\n        pool.getBondIssuanceMultiplierForTick(rate, pool.state.currentBondsIssuanceIndex)\\n      );\\n      emit TickNoLoanDeposit(pool.parameters.POOL_HASH, rate, adjustedAmount, tick.atlendisLiquidityRatio);\\n    }\\n    if ((pool.state.lowerInterestRate == 0) || (rate < pool.state.lowerInterestRate)) {\\n      pool.state.lowerInterestRate = rate;\\n    }\\n  }\\n\\n  /**\\n   * @dev Computes the quantity of bonds purchased, and the equivalent adjusted deposit amount used for the issuance\\n   **/\\n  function getBondsIssuanceParametersForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 normalizedRemainingAmount\\n  ) public returns (uint128 bondsPurchasedQuantity, uint128 normalizedUsedAmount) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio) >= normalizedRemainingAmount) {\\n      normalizedUsedAmount = normalizedRemainingAmount;\\n    } else if (\\n      tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio) + tick.accruedFees >=\\n      normalizedRemainingAmount\\n    ) {\\n      normalizedUsedAmount = normalizedRemainingAmount;\\n      tick.accruedFees -=\\n        normalizedRemainingAmount -\\n        tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio);\\n    } else {\\n      normalizedUsedAmount = tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio) + tick.accruedFees;\\n      tick.accruedFees = 0;\\n    }\\n    uint128 bondsPurchasePrice = getTickBondPrice(\\n      rate,\\n      pool.state.currentMaturity == 0\\n        ? pool.parameters.LOAN_DURATION\\n        : pool.state.currentMaturity - uint128(block.timestamp)\\n    );\\n    bondsPurchasedQuantity = normalizedUsedAmount.wadDiv(bondsPurchasePrice);\\n  }\\n\\n  /**\\n   * @dev Makes all the state changes necessary to add bonds to a tick\\n   * Updates tick data and conversion data\\n   **/\\n  function addBondsToTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 bondsIssuedQuantity,\\n    uint128 normalizedUsedAmountForPurchase\\n  ) public {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    // update global state for tick and pool\\n    tick.bondsQuantity += bondsIssuedQuantity;\\n    uint128 adjustedAmountForPurchase = normalizedUsedAmountForPurchase.wadRayDiv(tick.atlendisLiquidityRatio);\\n    if (adjustedAmountForPurchase > tick.adjustedRemainingAmount) {\\n      adjustedAmountForPurchase = tick.adjustedRemainingAmount;\\n    }\\n    tick.adjustedRemainingAmount -= adjustedAmountForPurchase;\\n    tick.normalizedLoanedAmount += normalizedUsedAmountForPurchase;\\n    // emit event with tick updates\\n    uint128 unborrowedRatio = tick.adjustedRemainingAmount.wadDiv(tick.adjustedTotalAmount);\\n    emit TickBorrow(\\n      pool.parameters.POOL_HASH,\\n      rate,\\n      adjustedAmountForPurchase,\\n      normalizedUsedAmountForPurchase,\\n      tick.atlendisLiquidityRatio,\\n      unborrowedRatio\\n    );\\n    pool.state.bondsIssuedQuantity += bondsIssuedQuantity;\\n    pool.state.normalizedAvailableDeposits -= normalizedUsedAmountForPurchase;\\n  }\\n\\n  /**\\n   * @dev Computes how the position is split between deposit and bonds\\n   **/\\n  function computeAmountRepartitionForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  ) public view returns (uint128 bondsQuantity, uint128 adjustedDepositedAmount) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (bondsIssuanceIndex > pool.state.currentBondsIssuanceIndex) {\\n      return (0, adjustedAmount);\\n    }\\n\\n    adjustedAmount = adjustedAmount.wadRayMul(pool.getBondIssuanceMultiplierForTick(rate, bondsIssuanceIndex));\\n    uint128 adjustedAmountUsedForBondsIssuance;\\n    if (tick.adjustedTotalAmount > 0) {\\n      adjustedAmountUsedForBondsIssuance = adjustedAmount\\n        .wadMul(tick.adjustedTotalAmount - tick.adjustedRemainingAmount)\\n        .wadDiv(tick.adjustedTotalAmount + tick.adjustedWithdrawnAmount);\\n    }\\n\\n    if (tick.adjustedTotalAmount > tick.adjustedRemainingAmount) {\\n      bondsQuantity = tick.bondsQuantity.wadMul(adjustedAmountUsedForBondsIssuance).wadDiv(\\n        tick.adjustedTotalAmount - tick.adjustedRemainingAmount\\n      );\\n    }\\n    adjustedDepositedAmount = (adjustedAmount - adjustedAmountUsedForBondsIssuance);\\n  }\\n\\n  /**\\n   * @dev Updates tick data after a withdrawal consisting of only amount deposited to yield provider\\n   **/\\n  function withdrawDepositedAmountForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 bondsIssuanceIndex\\n  ) public returns (uint128 normalizedAmountToWithdraw) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    pool.collectFees(rate);\\n\\n    if (bondsIssuanceIndex <= pool.state.currentBondsIssuanceIndex) {\\n      uint128 feesShareToWithdraw = pool.getAccruedFeesShare(rate, adjustedAmountToWithdraw);\\n      tick.accruedFees -= feesShareToWithdraw;\\n      tick.adjustedTotalAmount -= adjustedAmountToWithdraw;\\n      tick.adjustedRemainingAmount -= adjustedAmountToWithdraw;\\n\\n      normalizedAmountToWithdraw =\\n        adjustedAmountToWithdraw.wadRayMul(tick.atlendisLiquidityRatio) +\\n        feesShareToWithdraw;\\n      pool.state.normalizedAvailableDeposits -= normalizedAmountToWithdraw.round();\\n\\n      // register withdrawn amount from partially matched positions\\n      // to maintain the proportion of bonds in each subsequent position the same\\n      if (tick.bondsQuantity > 0) {\\n        tick.adjustedWithdrawnAmount += adjustedAmountToWithdraw;\\n      }\\n      emit TickWithdrawRemaining(\\n        pool.parameters.POOL_HASH,\\n        rate,\\n        adjustedAmountToWithdraw,\\n        tick.atlendisLiquidityRatio,\\n        feesShareToWithdraw\\n      );\\n    } else {\\n      tick.adjustedPendingAmount -= adjustedAmountToWithdraw;\\n      normalizedAmountToWithdraw = adjustedAmountToWithdraw.wadRayMul(tick.yieldProviderLiquidityRatio);\\n      emit TickWithdrawPending(pool.parameters.POOL_HASH, rate, adjustedAmountToWithdraw);\\n    }\\n\\n    // update lowerInterestRate if necessary\\n    if ((rate == pool.state.lowerInterestRate) && tick.adjustedTotalAmount == 0) {\\n      uint128 nextRate = rate + pool.parameters.RATE_SPACING;\\n      while (nextRate <= pool.parameters.MAX_RATE && pool.ticks[nextRate].adjustedTotalAmount == 0) {\\n        nextRate += pool.parameters.RATE_SPACING;\\n      }\\n      if (nextRate >= pool.parameters.MAX_RATE) {\\n        pool.state.lowerInterestRate = 0;\\n      } else {\\n        pool.state.lowerInterestRate = nextRate;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates tick data after a repayment\\n   **/\\n  function repayForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 lateRepayFeePerBond\\n  ) public returns (uint128 normalizedRepayAmountForTick, uint128 lateRepayFeeForTick) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.bondsQuantity > 0) {\\n      normalizedRepayAmountForTick = getTimeValue(pool, tick.bondsQuantity, rate);\\n      lateRepayFeeForTick = lateRepayFeePerBond.wadMul(normalizedRepayAmountForTick);\\n      uint128 bondPaidInterests = normalizedRepayAmountForTick - tick.normalizedLoanedAmount;\\n      // update liquidity ratio with interests from bonds, yield provider and liquidity rewards\\n      tick.atlendisLiquidityRatio += (tick.accruedFees + bondPaidInterests + lateRepayFeeForTick)\\n        .wadDiv(tick.adjustedTotalAmount)\\n        .wadToRay();\\n\\n      // update tick amounts\\n      tick.bondsQuantity = 0;\\n      tick.adjustedWithdrawnAmount = 0;\\n      tick.normalizedLoanedAmount = 0;\\n      tick.accruedFees = 0;\\n      tick.adjustedRemainingAmount = tick.adjustedTotalAmount;\\n      emit TickRepay(pool.parameters.POOL_HASH, rate, tick.adjustedTotalAmount, tick.atlendisLiquidityRatio);\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates tick data after a repayment\\n   **/\\n  function includePendingDepositsForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    bool bondsIssuanceIndexAlreadyIncremented\\n  ) internal returns (bool pendingDepositsExist) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.adjustedPendingAmount > 0) {\\n      if (!bondsIssuanceIndexAlreadyIncremented) {\\n        pool.state.currentBondsIssuanceIndex += 1;\\n      }\\n      // include pending deposit amount into tick excluding them from bonds interest from current issuance\\n      tick.bondsIssuanceIndexMultiplier[pool.state.currentBondsIssuanceIndex] = pool\\n        .state\\n        .yieldProviderLiquidityRatio\\n        .rayDiv(tick.atlendisLiquidityRatio);\\n      uint128 adjustedPendingAmount = tick.adjustedPendingAmount.wadRayMul(\\n        tick.bondsIssuanceIndexMultiplier[pool.state.currentBondsIssuanceIndex]\\n      );\\n\\n      // update global pool state\\n      pool.state.normalizedAvailableDeposits += tick.adjustedPendingAmount.wadRayMul(\\n        pool.state.yieldProviderLiquidityRatio\\n      );\\n\\n      // update tick amounts\\n      tick.adjustedTotalAmount += adjustedPendingAmount;\\n      tick.adjustedRemainingAmount = tick.adjustedTotalAmount;\\n      tick.adjustedPendingAmount = 0;\\n      emit TickPendingDeposit(\\n        pool.parameters.POOL_HASH,\\n        rate,\\n        adjustedPendingAmount,\\n        !bondsIssuanceIndexAlreadyIncremented\\n      );\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Top up liquidity rewards for later distribution\\n   **/\\n  function topUpLiquidityRewards(Types.Pool storage pool, uint128 normalizedAmount)\\n    public\\n    returns (uint128 yieldProviderLiquidityRatio)\\n  {\\n    yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome(address(pool.parameters.UNDERLYING_TOKEN))\\n    );\\n    pool.state.remainingAdjustedLiquidityRewardsReserve += normalizedAmount.wadRayDiv(yieldProviderLiquidityRatio);\\n  }\\n\\n  /**\\n   * @dev Distributes remaining liquidity rewards reserve to lenders\\n   * Called in case of pool default\\n   **/\\n  function distributeLiquidityRewards(Types.Pool storage pool) public returns (uint128 distributedLiquidityRewards) {\\n    uint128 currentInterestRate = pool.state.lowerInterestRate;\\n\\n    uint128 yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome(address(pool.parameters.UNDERLYING_TOKEN))\\n    );\\n\\n    distributedLiquidityRewards = pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(\\n      yieldProviderLiquidityRatio\\n    );\\n    pool.state.normalizedAvailableDeposits += distributedLiquidityRewards;\\n    pool.state.remainingAdjustedLiquidityRewardsReserve = 0;\\n\\n    while (pool.ticks[currentInterestRate].bondsQuantity > 0 && currentInterestRate <= pool.parameters.MAX_RATE) {\\n      pool.ticks[currentInterestRate].accruedFees += distributedLiquidityRewards\\n        .wadMul(pool.ticks[currentInterestRate].bondsQuantity)\\n        .wadDiv(pool.state.bondsIssuedQuantity);\\n      currentInterestRate += pool.parameters.RATE_SPACING;\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates tick data to reflect all fees accrued since last call\\n   * Accrued fees are composed of the yield provider liquidity ratio increase\\n   * and liquidity rewards paid by the borrower\\n   **/\\n  function collectFeesForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 yieldProviderLiquidityRatio\\n  ) internal {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    if (tick.lastFeeDistributionTimestamp < block.timestamp) {\\n      (\\n        uint128 updatedAtlendisLiquidityRatio,\\n        uint128 updatedAccruedFees,\\n        uint128 liquidityRewardsIncrease,\\n        uint128 yieldProviderLiquidityRatioIncrease\\n      ) = pool.peekFeesForTick(rate, yieldProviderLiquidityRatio);\\n\\n      // update global deposited amount\\n      pool.state.remainingAdjustedLiquidityRewardsReserve -= liquidityRewardsIncrease.wadRayDiv(\\n        yieldProviderLiquidityRatio\\n      );\\n      pool.state.normalizedAvailableDeposits +=\\n        liquidityRewardsIncrease +\\n        tick.adjustedRemainingAmount.wadRayMul(yieldProviderLiquidityRatioIncrease);\\n\\n      // update tick data\\n      uint128 accruedFeesIncrease = updatedAccruedFees - tick.accruedFees;\\n      if (tick.atlendisLiquidityRatio == 0) {\\n        tick.yieldProviderLiquidityRatio = yieldProviderLiquidityRatio;\\n        emit TickInitialized(pool.parameters.POOL_HASH, rate, yieldProviderLiquidityRatio);\\n      }\\n      tick.atlendisLiquidityRatio = updatedAtlendisLiquidityRatio;\\n      tick.accruedFees = updatedAccruedFees;\\n\\n      // update checkpoint data\\n      tick.lastFeeDistributionTimestamp = uint128(block.timestamp);\\n\\n      emit CollectFeesForTick(\\n        pool.parameters.POOL_HASH,\\n        rate,\\n        pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(yieldProviderLiquidityRatio),\\n        accruedFeesIncrease\\n      );\\n    }\\n  }\\n\\n  function collectFees(Types.Pool storage pool, uint128 rate) internal {\\n    uint128 yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome(address(pool.parameters.UNDERLYING_TOKEN))\\n    );\\n    pool.collectFeesForTick(rate, yieldProviderLiquidityRatio);\\n    pool.ticks[rate].yieldProviderLiquidityRatio = yieldProviderLiquidityRatio;\\n  }\\n\\n  function collectFees(Types.Pool storage pool) internal {\\n    uint128 yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome(address(pool.parameters.UNDERLYING_TOKEN))\\n    );\\n    for (\\n      uint128 currentInterestRate = pool.state.lowerInterestRate;\\n      currentInterestRate <= pool.parameters.MAX_RATE;\\n      currentInterestRate += pool.parameters.RATE_SPACING\\n    ) {\\n      pool.collectFeesForTick(currentInterestRate, yieldProviderLiquidityRatio);\\n    }\\n    pool.state.yieldProviderLiquidityRatio = yieldProviderLiquidityRatio;\\n  }\\n\\n  /**\\n   * @dev Peek updated liquidity ratio and accrued fess for the target tick\\n   * Used to compute a position balance without updating storage\\n   **/\\n  function peekFeesForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 yieldProviderLiquidityRatio\\n  )\\n    internal\\n    view\\n    returns (\\n      uint128 updatedAtlendisLiquidityRatio,\\n      uint128 updatedAccruedFees,\\n      uint128 liquidityRewardsIncrease,\\n      uint128 yieldProviderLiquidityRatioIncrease\\n    )\\n  {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.atlendisLiquidityRatio == 0) {\\n      return (yieldProviderLiquidityRatio, 0, 0, 0);\\n    }\\n\\n    updatedAtlendisLiquidityRatio = tick.atlendisLiquidityRatio;\\n    updatedAccruedFees = tick.accruedFees;\\n\\n    uint128 referenceLiquidityRatio;\\n    if (pool.state.yieldProviderLiquidityRatio > tick.yieldProviderLiquidityRatio) {\\n      referenceLiquidityRatio = pool.state.yieldProviderLiquidityRatio;\\n    } else {\\n      referenceLiquidityRatio = tick.yieldProviderLiquidityRatio;\\n    }\\n    yieldProviderLiquidityRatioIncrease = yieldProviderLiquidityRatio - referenceLiquidityRatio;\\n\\n    // get additional fees from liquidity rewards\\n    liquidityRewardsIncrease = pool.getLiquidityRewardsIncrease(rate);\\n    uint128 currentNormalizedRemainingLiquidityRewards = pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(\\n      yieldProviderLiquidityRatio\\n    );\\n    if (liquidityRewardsIncrease > currentNormalizedRemainingLiquidityRewards) {\\n      liquidityRewardsIncrease = currentNormalizedRemainingLiquidityRewards;\\n    }\\n    // if no ongoing loan, all deposited amount gets the yield provider\\n    // and liquidity rewards so the global liquidity ratio is updated\\n    if (pool.state.currentMaturity == 0) {\\n      updatedAtlendisLiquidityRatio += yieldProviderLiquidityRatioIncrease;\\n      if (tick.adjustedRemainingAmount > 0) {\\n        updatedAtlendisLiquidityRatio += liquidityRewardsIncrease.wadToRay().wadDiv(tick.adjustedRemainingAmount);\\n      }\\n    }\\n    // if ongoing loan, accruing fees components are added, liquidity ratio will be updated at repay time\\n    else {\\n      updatedAccruedFees +=\\n        tick.adjustedRemainingAmount.wadRayMul(yieldProviderLiquidityRatioIncrease) +\\n        liquidityRewardsIncrease;\\n    }\\n  }\\n\\n  /**\\n   * @dev Computes liquidity rewards amount to be paid to lenders since last fee collection\\n   * Liquidity rewards are paid to the unborrowed amount, and distributed to all ticks depending\\n   * on their normalized amounts\\n   **/\\n  function getLiquidityRewardsIncrease(Types.Pool storage pool, uint128 rate)\\n    internal\\n    view\\n    returns (uint128 liquidityRewardsIncrease)\\n  {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    if (pool.state.normalizedAvailableDeposits > 0) {\\n      liquidityRewardsIncrease = (pool.parameters.LIQUIDITY_REWARDS_DISTRIBUTION_RATE *\\n        (uint128(block.timestamp) - tick.lastFeeDistributionTimestamp))\\n        .wadMul(pool.parameters.MAX_BORROWABLE_AMOUNT - pool.state.normalizedBorrowedAmount)\\n        .wadDiv(pool.parameters.MAX_BORROWABLE_AMOUNT)\\n        .wadMul(tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio))\\n        .wadDiv(pool.state.normalizedAvailableDeposits);\\n    }\\n  }\\n\\n  function getTickBondPrice(uint128 rate, uint128 loanDuration) internal pure returns (uint128 price) {\\n    price = uint128(WAD).wadDiv(uint128(WAD + (uint256(rate) * uint256(loanDuration)) / uint256(SECONDS_PER_YEAR)));\\n  }\\n\\n  function depositToYieldProvider(\\n    Types.Pool storage pool,\\n    address from,\\n    uint128 normalizedAmount\\n  ) public {\\n    IERC20Upgradeable underlyingToken = IERC20Upgradeable(pool.parameters.UNDERLYING_TOKEN);\\n    uint128 scaledAmount = normalizedAmount.scaleFromWad(pool.parameters.TOKEN_DECIMALS);\\n    ILendingPool yieldProvider = pool.parameters.YIELD_PROVIDER;\\n    underlyingToken.safeIncreaseAllowance(address(yieldProvider), scaledAmount);\\n    underlyingToken.safeTransferFrom(from, address(this), scaledAmount);\\n    yieldProvider.deposit(pool.parameters.UNDERLYING_TOKEN, scaledAmount, address(this), 0);\\n  }\\n}\\n\",\"keccak256\":\"0x78896ab212e10c211245d7c4feec6fefd8e8baad8e033003f92563670c6d9464\",\"license\":\"AGPL-3.0\"},\"src/lib/Rounding.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Rounding library\\n * @author Atlendis\\n * @dev Rounding utilities to mitigate precision loss when doing wad ray math operations\\n **/\\nlibrary Rounding {\\n  using Rounding for uint128;\\n\\n  uint128 internal constant PRECISION = 1e3;\\n\\n  /**\\n   * @notice rounds the input number with the default precision\\n   **/\\n  function round(uint128 amount) internal pure returns (uint128) {\\n    return (amount / PRECISION) * PRECISION;\\n  }\\n}\\n\",\"keccak256\":\"0x9fa18d911c29545de2bc2164be48281a91cbb2633aeb1219044c24191fc9e991\",\"license\":\"AGPL-3.0\"},\"src/lib/Scaling.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Scaling library\\n * @author Atlendis\\n * @dev Scale an arbitrary number to or from WAD precision\\n **/\\nlibrary Scaling {\\n  uint256 internal constant WAD = 1e18;\\n\\n  /**\\n   * @notice Scales an input amount to wad precision\\n   **/\\n  function scaleToWad(uint128 a, uint256 precision) internal pure returns (uint128) {\\n    return uint128((uint256(a) * WAD) / 10**precision);\\n  }\\n\\n  /**\\n   * @notice Scales an input amount from wad to target precision\\n   **/\\n  function scaleFromWad(uint128 a, uint256 precision) internal pure returns (uint128) {\\n    return uint128((uint256(a) * 10**precision) / WAD);\\n  }\\n}\\n\",\"keccak256\":\"0x6e71c9cffacb1c38cb7badef347ca94c739b1aa576066963293111adc5d3ecac\",\"license\":\"AGPL-3.0\"},\"src/lib/Types.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"../extensions/AaveILendingPool.sol\\\";\\n\\nlibrary Types {\\n  struct PositionDetails {\\n    uint128 adjustedBalance;\\n    uint128 rate;\\n    bytes32 poolHash;\\n    address underlyingToken;\\n    uint128 bondsIssuanceIndex;\\n    uint128 remainingBonds;\\n    uint128 bondsMaturity;\\n    uint128 creationTimestamp;\\n  }\\n\\n  struct Tick {\\n    mapping(uint128 => uint128) bondsIssuanceIndexMultiplier;\\n    uint128 bondsQuantity;\\n    uint128 adjustedTotalAmount;\\n    uint128 adjustedRemainingAmount;\\n    uint128 adjustedWithdrawnAmount;\\n    uint128 adjustedPendingAmount;\\n    uint128 normalizedLoanedAmount;\\n    uint128 lastFeeDistributionTimestamp;\\n    uint128 atlendisLiquidityRatio;\\n    uint128 yieldProviderLiquidityRatio;\\n    uint128 accruedFees;\\n  }\\n\\n  struct PoolParameters {\\n    bytes32 POOL_HASH;\\n    address UNDERLYING_TOKEN;\\n    uint8 TOKEN_DECIMALS;\\n    ILendingPool YIELD_PROVIDER;\\n    uint128 MIN_RATE;\\n    uint128 MAX_RATE;\\n    uint128 RATE_SPACING;\\n    uint128 MAX_BORROWABLE_AMOUNT;\\n    uint128 LOAN_DURATION;\\n    uint128 LIQUIDITY_REWARDS_DISTRIBUTION_RATE;\\n    uint128 COOLDOWN_PERIOD;\\n    uint128 REPAYMENT_PERIOD;\\n    uint128 LATE_REPAY_FEE_PER_BOND_RATE;\\n    uint128 ESTABLISHMENT_FEE_RATE;\\n    uint128 REPAYMENT_FEE_RATE;\\n    uint128 LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD;\\n    bool EARLY_REPAY;\\n  }\\n\\n  struct PoolState {\\n    bool active;\\n    bool defaulted;\\n    bool closed;\\n    uint128 currentMaturity;\\n    uint128 bondsIssuedQuantity;\\n    uint128 normalizedBorrowedAmount;\\n    uint128 normalizedAvailableDeposits;\\n    uint128 lowerInterestRate;\\n    uint128 nextLoanMinStart;\\n    uint128 remainingAdjustedLiquidityRewardsReserve;\\n    uint128 yieldProviderLiquidityRatio;\\n    uint128 currentBondsIssuanceIndex;\\n    uint128 defaultTimestamp;\\n  }\\n\\n  struct Pool {\\n    PoolParameters parameters;\\n    PoolState state;\\n    mapping(uint256 => Tick) ticks;\\n  }\\n}\\n\",\"keccak256\":\"0x844c38abf924e0a1c03a91d04e70811af799980f77952534153a60e14d77c918\",\"license\":\"AGPL-3.0\"},\"src/lib/Uint128WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./WadRayMath.sol\\\";\\n\\n/**\\n * @title Uint128WadRayMath library\\n **/\\nlibrary Uint128WadRayMath {\\n  using WadRayMath for uint256;\\n\\n  /**\\n   * @dev Multiplies a wad to a ray, making back and forth conversions\\n   * @param a Wad\\n   * @param b Ray\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadRayMul(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadToRay().rayMul(uint256(b)).rayToWad());\\n  }\\n\\n  /**\\n   * @dev Divides a wad to a ray, making back and forth conversions\\n   * @param a Wad\\n   * @param b Ray\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadRayDiv(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadToRay().rayDiv(uint256(b)).rayToWad());\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).rayDiv(uint256(b)));\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadMul(uint256(b)));\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadDiv(uint256(b)));\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint128 a) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadToRay());\\n  }\\n}\\n\",\"keccak256\":\"0x16b72e9697bdf075947d8a060f38dad7cf800cf9b84faa9df1fa080b2d7f2078\",\"license\":\"AGPL-3.0\"},\"src/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    if (a > (type(uint256).max - halfWAD) / b) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (b == 0) {\\n      revert Errors.MATH_DIVISION_BY_ZERO();\\n    }\\n    uint256 halfB = b / 2;\\n\\n    if (a > (type(uint256).max - halfB) / WAD) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    if (a > (type(uint256).max - halfRAY) / b) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (b == 0) {\\n      revert Errors.MATH_DIVISION_BY_ZERO();\\n    }\\n    uint256 halfB = b / 2;\\n\\n    if (a > (type(uint256).max - halfB) / RAY) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    if (result < halfRatio) {\\n      revert Errors.MATH_ADDITION_OVERFLOW();\\n    }\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    if (result / WAD_RAY_RATIO != a) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xb9ff60d087061905349f37583ed712f057c165912c9cdbc454e927191774689d\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x612af361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c80636a146024116100ac57806398bc050e1161007b57806398bc050e1461027b578063ca8701f31461029b578063d393d8c8146102bb578063e6a69ab8146102db578063ec733dc8146102e657600080fd5b80636a146024146102265780636ef48f571461023557806374e6363414610255578063839a9c291461026857600080fd5b8063552033c4116100e8578063552033c4146101bd5780635953c226146101de5780635ccb5f2f146101f15780636839a2611461020457600080fd5b80631aceb8a31461011a57806339a594321461014a5780633d29c2091461018a5780634de6e9151461019d575b600080fd5b61012d6101283660046126a4565b610306565b6040516001600160801b0390911681526020015b60405180910390f35b81801561015657600080fd5b5061016a6101653660046126a4565b6103d5565b604080516001600160801b03938416815292909116602083015201610141565b61016a6101983660046126e0565b6106eb565b8180156101a957600080fd5b5061016a6101b83660046126a4565b61086e565b6101d06b033b2e3c9fd0803ce800000081565b604051908152602001610141565b61012d6101ec3660046126e0565b610a25565b61012d6101ff36600461272d565b610a85565b81801561021057600080fd5b5061022461021f366004612759565b610ac3565b005b6101d0670de0b6b3a764000081565b81801561024157600080fd5b5061012d6102503660046126e0565b610bc1565b61012d61026336600461278c565b611011565b61012d6102763660046127b6565b6110b0565b81801561028757600080fd5b5061016a6102963660046126a4565b6111a1565b8180156102a757600080fd5b506102246102b63660046126e0565b611392565b8180156102c757600080fd5b5061012d6102d636600461272d565b611604565b6101d06301e1338081565b8180156102f257600080fd5b5061012d61030136600461278c565b6116ef565b600a830154600090630100000090046001600160801b0316421161036a57600a8401546103639061035390849061034e904290630100000090046001600160801b03166127fc565b6118f8565b6001600160801b03851690611943565b90506103ce565b600f8401546001600160801b034281169116156103915750600f8401546001600160801b03165b600a8501546103ca906103ba90859061034e90630100000090046001600160801b0316856127fc565b6001600160801b0386169061195b565b9150505b9392505050565b6001600160801b0382166000908152601084016020526040812081906103fb8686611973565b600a860154630100000090046001600160801b0316156104df576005810154610430906001600160801b038681169116611a3f565b60038201805491945084916000906104529084906001600160801b0316612813565b82546101009290920a6001600160801b03818102199093169183160217909155600e88015461048b9250600160801b9004166001612813565b8654604080519182526001600160801b0380891660208401528616908201529092507ffa5f404ac72fd80d5f4403eba8b4e69dc15162096b3a6fe3bb7b5432a1ff6ae99060600160405180910390a1610688565b6004810154610501906001600160801b0386811691600160801b900416611a3f565b9250828160010160108282829054906101000a90046001600160801b03166105299190612813565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550828160020160008282829054906101000a90046001600160801b03166105739190612813565b82546101009290920a6001600160801b03818102199093169183160217909155600e880154600c89018054600160801b90920483169550879350916000916105bd91859116612813565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506106236106138688600a0160040160109054906101000a90046001600160801b031689611a6e9092919063ffffffff16565b6001600160801b03851690611a3f565b86546004830154604080519283526001600160801b03898116602085015284811684830152600160801b9092049091166060830152519194507fb308eae98b23d37898b9d67fb4bf4505d0931d5d8fae9422b77896e6aeeed1b7919081900360800190a15b600c860154600160801b90046001600160801b031615806106c05750600c8601546001600160801b03600160801b9091048116908616105b156106e257600c860180546001600160801b03808816600160801b0291161790555b50935093915050565b6001600160801b0380841660009081526010860160205260408120600e87015491928392600160801b90048116908516111561072e576000859250925050610865565b61074c61073c888887611a6e565b6001600160801b03871690611aba565b6001820154909550600090600160801b90046001600160801b0316156107e957600282015460018301546107e69161079b916001600160801b03600160801b9283900481169290910416612813565b600284015460018501546107d7916107c7916001600160801b0391821691600160801b9091041661283e565b6001600160801b038a1690611943565b6001600160801b03169061195b565b90505b600282015460018301546001600160801b03918216600160801b909104909116111561085657600282015460018301546108539161083b916001600160801b0391821691600160801b9091041661283e565b60018401546107d7906001600160801b031684611943565b93505b610860818761283e565b925050505b94509492505050565b6001600160801b038083166000908152601085016020526040812060018101549192839216156106e25760018101546108b29087906001600160801b031687610306565b92506108c76001600160801b03851684611943565b60038201549092506000906108ec90600160801b90046001600160801b03168561283e565b905061094861093a8360010160109054906101000a90046001600160801b031685848660050160109054906101000a90046001600160801b03166109309190612813565b6107d79190612813565b6001600160801b0316611ae4565b60048301805460109061096c908490600160801b90046001600160801b0316612813565b82546101009290920a6001600160801b038181021990931691831602179091556001840180546001600160801b031916908190556003850180548316905560058501805483169055600160801b908190048216600286018190558a546004870154604080519283528c8616602084015282019290925291900490911660608201527f953574bd5eeec5d4da4e0a829621256ad4c1a350acc2e9cb55e592c5578346d3915060800160405180910390a15050935093915050565b6001600160801b038084166000908152601086016020526040812060028101549192909116610a58576000915050610a7d565b6002810154610a79906001600160801b03908116906107d790861687611943565b9150505b949350505050565b6008820154600b8301546000916103ce916001600160801b0391821691610ab491600160801b9004168561283e565b6001600160801b031690611943565b60018301546001600160a01b03811690600090610af4906001600160801b03851690600160a01b900460ff16611af8565b60028601549091506001600160a01b0390811690610b1e908416826001600160801b038516611b2b565b610b3c6001600160a01b03841686306001600160801b038616611c25565b600186015460405163e8eda9df60e01b81526001600160a01b0391821660048201526001600160801b0384166024820152306044820152600060648201529082169063e8eda9df90608401600060405180830381600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b50505050505050505050565b6001600160801b03831660009081526010850160205260408120610be58686611973565b600e8601546001600160801b03600160801b909104811690841611610e45576000610c11878787611c5d565b9050808260050160108282829054906101000a90046001600160801b0316610c39919061283e565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550848260010160108282829054906101000a90046001600160801b0316610c83919061283e565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550848260020160008282829054906101000a90046001600160801b0316610ccd919061283e565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555080610d258360040160109054906101000a90046001600160801b0316876001600160801b0316611aba90919063ffffffff16565b610d2f9190612813565b9250610d43836001600160801b0316611ca0565b600c88018054600090610d609084906001600160801b031661283e565b82546101009290920a6001600160801b03818102199093169183160217909155600184015416159050610dd857848260020160108282829054906101000a90046001600160801b0316610db39190612813565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b86546004830154604080519283526001600160801b03898116602085015288811684830152600160801b909204821660608401529083166080830152517f734f310695946c48014ee6c5b2c87bde095cb335f0ee8ba563b857d9f78dda6f9181900360a00190a150610ee9565b600381018054859190600090610e659084906001600160801b031661283e565b82546101009290920a6001600160801b038181021990931691831602179091556005830154610e9992508682169116611aba565b8654604080519182526001600160801b0380891660208401528716908201529092507fd1f4d0b2dd080e7be08a59618fdbde6a5141d3ac954ef2bc994147c26adc05299060600160405180910390a15b600c8601546001600160801b03868116600160801b90920416148015610f2157506001810154600160801b90046001600160801b0316155b15611008576004860154600090610f41906001600160801b031687612813565b90505b60038701546001600160801b03600160801b909104811690821611801590610f9057506001600160801b038082166000908152601089016020526040902060010154600160801b900416155b15610fb4576004870154610fad906001600160801b031682612813565b9050610f44565b60038701546001600160801b03600160801b909104811690821610610fe957600c870180546001600160801b03169055611006565b600c870180546001600160801b03808416600160801b0291161790555b505b50949350505050565b6006810154600a8201546000918291611044916001600160801b03600160801b9091048116916301000000900416612813565b6001600160801b03169050804211156110aa57600f8301546000906001600160801b03166110725742611081565b600f8401546001600160801b03165b60078501549091506001600160801b031661109c83836127fc565b6110a69190612866565b9250505b50919050565b600a820154600090630100000090046001600160801b03166110d45750600061119b565b8161110857600a830154630100000090046001600160801b031642116111085750600b8201546001600160801b031661119b565b600c830154600160801b90046001600160801b03165b60038401546001600160801b03600160801b909104811690821611611199576001600160801b03808216600090815260108601602052604090206001810154909161116c9187911684610306565b6111769084612813565b600486015490935061119291506001600160801b031682612813565b905061111e565b505b92915050565b6001600160801b03808316600090815260108501602052604081206004810154600282015492938493868216926111e49291821691600160801b90910416611aba565b6001600160801b0316106111fa5783915061131b565b6005810154600482015460028301546001600160801b0380881693600160801b908190048216936112319383169291900416611aba565b61123b9190612813565b6001600160801b0316106112cb5760048101546002820154859350611274916001600160801b0391821691600160801b90910416611aba565b61127e908561283e565b6005820180546010906112a2908490600160801b90046001600160801b031661283e565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061131b565b6005810154600482015460028301546001600160801b03600160801b938490048116936112fd93928216920416611aba565b6113079190612813565b6005820180546001600160801b0316905591505b600a860154600090611371908790630100000090046001600160801b03161561135e57600a89015461034e904290630100000090046001600160801b031661283e565b60058901546001600160801b03166118f8565b90506113866001600160801b0384168261195b565b93505050935093915050565b6001600160801b03808416600090815260108601602052604081206001810180549193869391926113c591859116612813565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600061141e8260040160109054906101000a90046001600160801b0316846001600160801b0316611a3f90919063ffffffff16565b60028301549091506001600160801b03908116908216111561144a575060028101546001600160801b03165b60028201805482919060009061146a9084906001600160801b031661283e565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550828260030160108282829054906101000a90046001600160801b03166114b49190612813565b82546101009290920a6001600160801b0381810219909316918316021790915560018401546002850154600093506114f79290811691600160801b90041661195b565b87546004850154604080519283526001600160801b038a81166020850152868116848301528881166060850152600160801b9092048216608084015290831660a0830152519192507ffe90533f64e0218e653848ea72d743b24cbd3105adac7b6b54c4fe5223190a7f919081900360c00190a1600b8701805486919060009061158a9084906001600160801b0316612813565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508387600a0160020160008282829054906101000a90046001600160801b03166115d7919061283e565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505050505050565b6002820154600183015460405163d15e005360e01b81526001600160a01b039182166004820152600092919091169063d15e00539060240160206040518083038186803b15801561165457600080fd5b505afa158015611668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168c9190612885565b90506116a16001600160801b03831682611a3f565b600d840180546010906116c5908490600160801b90046001600160801b0316612813565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555092915050565b600c8101546002820154600183015460405163d15e005360e01b81526001600160a01b039182166004820152600093600160801b90046001600160801b0316928492169063d15e00539060240160206040518083038186803b15801561175457600080fd5b505afa158015611768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178c9190612885565b600d8501549091506117ae90600160801b90046001600160801b031682611aba565b600c8501805491945084916000906117d09084906001600160801b0316612813565b82546101009290920a6001600160801b03818102199093169183160217909155600d860180549091169055505b6001600160801b0380831660009081526010860160205260409020600101541615801590611843575060038401546001600160801b03600160801b909104811690831611155b156118f157600b8401546001600160801b038381166000908152601087016020526040902060010154611881928216916107d7918782169116611943565b6001600160801b03808416600090815260108088016020526040909120600501805490926118b9918591600160801b90910416612813565b82546101009290920a6001600160801b0381810219909316918316021790915560048601546118ea92501683612813565b91506117fd565b5050919050565b60006103ce6301e133806119186001600160801b03808616908716612866565b61192291906128b4565b61193490670de0b6b3a76400006128c8565b670de0b6b3a76400009061195b565b60006103ce6001600160801b03848116908416611cb9565b60006103ce6001600160801b03848116908416611d44565b6002820154600183015460405163d15e005360e01b81526001600160a01b039182166004820152600092919091169063d15e00539060240160206040518083038186803b1580156119c357600080fd5b505afa1580156119d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fb9190612885565b9050611a08838383611dd9565b6001600160801b039182166000908152601090930160205260409092206005018054919092166001600160801b0319909116179055565b60006103ce611a69836001600160801b0316611a63866001600160801b0316612024565b90612063565b6120ec565b6001600160801b0380831660009081526010850160209081526040808320858516845291829052909120549091169081611ab2576b033b2e3c9fd0803ce800000091505b509392505050565b60006103ce611a69836001600160801b0316611ade866001600160801b0316612024565b9061213d565b600061119b826001600160801b0316612024565b6000670de0b6b3a7640000611b0e83600a6129c4565b611b21906001600160801b038616612866565b6103ce91906128b4565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015611b7757600080fd5b505afa158015611b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf9190612885565b611bb991906128c8565b6040516001600160a01b038516602482015260448101829052909150611c1f90859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526121bc565b50505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611c1f9085906323b872dd60e01b90608401611be8565b6001600160801b038083166000908152601085016020526040812060028101546005820154929391926103ca92918216916107d791600160801b90041686611943565b60006103e8611caf81846129d0565b61119b91906129f6565b6000821580611cc6575081155b15611cd35750600061119b565b81611ce76002670de0b6b3a76400006128b4565b611cf3906000196127fc565b611cfd91906128b4565b831115611d1c5760405162a748d160e21b815260040160405180910390fd5b670de0b6b3a7640000611d306002826128b4565b611d3a8486612866565b611b2191906128c8565b600081611d64576040516308693c7b60e31b815260040160405180910390fd5b6000611d716002846128b4565b9050670de0b6b3a7640000611d88826000196127fc565b611d9291906128b4565b841115611db15760405162a748d160e21b815260040160405180910390fd5b8281611dc5670de0b6b3a764000087612866565b611dcf91906128c8565b610a7d91906128b4565b6001600160801b0380831660009081526010850160205260409020600481015490914291161015611c1f576000808080611e14888888612298565b92965090945092509050611e316001600160801b03831687611a3f565b600d89018054601090611e55908490600160801b90046001600160801b031661283e565b82546101009290920a6001600160801b038181021990931691831602179091556002870154611e8692501682611aba565b611e909083612813565b600c89018054600090611ead9084906001600160801b0316612813565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060008560050160109054906101000a90046001600160801b031684611ef6919061283e565b6004870154909150600160801b90046001600160801b0316611f76576005860180546001600160801b0319166001600160801b038981169182179092558a5460408051918252928b166020820152918201527f1ffcce3f36329128f865c47cacfc17ad27e65f7039d7aacd9d6350644c465a919060600160405180910390a15b6005860180546001600160801b03908116600160801b8783168102919091179092556001600160801b03198782168302164282161760048901558a54600d8c01547fda58df82953130c96b08dcda8a76478b2a4e0c16cddf3e59ac1ccf39d7b027639391928c92611fe99204168b611aba565b604080519384526001600160801b039283166020850152908216908301528316606082015260800160405180910390a1505050505050505050565b600080612035633b9aca0084612866565b905082612046633b9aca00836128b4565b1461119b5760405162a748d160e21b815260040160405180910390fd5b600081612083576040516308693c7b60e31b815260040160405180910390fd5b60006120906002846128b4565b90506b033b2e3c9fd0803ce80000006120ab826000196127fc565b6120b591906128b4565b8411156120d45760405162a748d160e21b815260040160405180910390fd5b8281611dc56b033b2e3c9fd0803ce800000087612866565b6000806120fe6002633b9aca006128b4565b9050600061210c84836128c8565b90508181101561212f576040516307af724160e11b815260040160405180910390fd5b6110a6633b9aca00826128b4565b600082158061214a575081155b156121575750600061119b565b8161216f60026b033b2e3c9fd0803ce80000006128b4565b61217b906000196127fc565b61218591906128b4565b8311156121a45760405162a748d160e21b815260040160405180910390fd5b6b033b2e3c9fd0803ce8000000611d306002826128b4565b6000612211826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124439092919063ffffffff16565b805190915015612293578080602001905181019061222f9190612a25565b6122935760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b505050565b6001600160801b0380831660009081526010850160205260408120600481015491928392839283929091600160801b9004166122e25785600080600094509450945094505061243a565b60048101546005820154600e8a01546001600160801b03600160801b9384900481169850928204831696506000929182169116111561232f5750600e8801546001600160801b031661233f565b5060058101546001600160801b03165b612349818861283e565b92506123558989612452565b600d8a015490945060009061237a90600160801b90046001600160801b031689611aba565b9050806001600160801b0316856001600160801b0316111561239a578094505b600a8a0154630100000090046001600160801b0316612405576123bd8488612813565b60028401549097506001600160801b0316156124005760028301546123f3906001600160801b03908116906107d7908816611ae4565b6123fd9088612813565b96505b612436565b6002830154859061241f906001600160801b031686611aba565b6124299190612813565b6124339087612813565b95505b5050505b93509350935093565b6060610a7d848460008561251e565b6001600160801b0380821660009081526010840160205260408120600c85015491929091161561119957600c84015460048201546002830154610a7d926001600160801b03908116926107d7926124b49290811691600160801b900416611aba565b6004880154600b890154610ab4916001600160801b03600160801b918290048116926107d7926124e7929104168361283e565b60048901546124ff906001600160801b03164261283e565b60058d0154610ab49190600160801b90046001600160801b03166129f6565b60608247101561257f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161228a565b6001600160a01b0385163b6125d65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161228a565b600080866001600160a01b031685876040516125f29190612a6e565b60006040518083038185875af1925050503d806000811461262f576040519150601f19603f3d011682016040523d82523d6000602084013e612634565b606091505b509150915061264482828661264f565b979650505050505050565b6060831561265e5750816103ce565b82511561266e5782518084602001fd5b8160405162461bcd60e51b815260040161228a9190612a8a565b80356001600160801b038116811461269f57600080fd5b919050565b6000806000606084860312156126b957600080fd5b833592506126c960208501612688565b91506126d760408501612688565b90509250925092565b600080600080608085870312156126f657600080fd5b8435935061270660208601612688565b925061271460408601612688565b915061272260608601612688565b905092959194509250565b6000806040838503121561274057600080fd5b8235915061275060208401612688565b90509250929050565b60008060006060848603121561276e57600080fd5b8335925060208401356001600160a01b03811681146126c957600080fd5b60006020828403121561279e57600080fd5b5035919050565b80151581146127b357600080fd5b50565b600080604083850312156127c957600080fd5b8235915060208301356127db816127a5565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b60008282101561280e5761280e6127e6565b500390565b60006001600160801b03808316818516808303821115612835576128356127e6565b01949350505050565b60006001600160801b038381169083168181101561285e5761285e6127e6565b039392505050565b6000816000190483118215151615612880576128806127e6565b500290565b60006020828403121561289757600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b6000826128c3576128c361289e565b500490565b600082198211156128db576128db6127e6565b500190565b600181815b8085111561291b578160001904821115612901576129016127e6565b8085161561290e57918102915b93841c93908002906128e5565b509250929050565b6000826129325750600161119b565b8161293f5750600061119b565b8160018114612955576002811461295f5761297b565b600191505061119b565b60ff841115612970576129706127e6565b50506001821b61119b565b5060208310610133831016604e8410600b841016171561299e575081810a61119b565b6129a883836128e0565b80600019048211156129bc576129bc6127e6565b029392505050565b60006103ce8383612923565b60006001600160801b03808416806129ea576129ea61289e565b92169190910492915050565b60006001600160801b0380831681851681830481118215151615612a1c57612a1c6127e6565b02949350505050565b600060208284031215612a3757600080fd5b81516103ce816127a5565b60005b83811015612a5d578181015183820152602001612a45565b83811115611c1f5750506000910152565b60008251612a80818460208701612a42565b9190910192915050565b6020815260008251806020840152612aa9816040850160208701612a42565b601f01601f1916919091016040019291505056fea26469706673582212200faf2584dd5db41bede07fd7ad11fd10ddb7e1993666063973ac8e91ca35633664736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBondsToTick(Types.Pool storage,uint128,uint128,uint128)": {
        "details": "Makes all the state changes necessary to add bonds to a tick Updates tick data and conversion data*"
      },
      "computeAmountRepartitionForTick(Types.Pool storage,uint128,uint128,uint128)": {
        "details": "Computes how the position is split between deposit and bonds*"
      },
      "depositToTick(Types.Pool storage,uint128,uint128)": {
        "details": "Deposit to a target tick Updates tick data*"
      },
      "distributeLiquidityRewards(Types.Pool storage)": {
        "details": "Distributes remaining liquidity rewards reserve to lenders Called in case of pool default*"
      },
      "getBondsIssuanceParametersForTick(Types.Pool storage,uint128,uint128)": {
        "details": "Computes the quantity of bonds purchased, and the equivalent adjusted deposit amount used for the issuance*"
      },
      "getRepayValue(Types.Pool storage,bool)": {
        "details": "The return value includes only notional and accrued interest, it does not include any fees due for repay by the borrrower*"
      },
      "peekAccruedFeesShare(Types.Pool storage,uint128,uint128,uint128)": {
        "details": "Get share of accumulated fees from estimated current tick state*"
      },
      "repayForTick(Types.Pool storage,uint128,uint128)": {
        "details": "Updates tick data after a repayment*"
      },
      "topUpLiquidityRewards(Types.Pool storage,uint128)": {
        "details": "Top up liquidity rewards for later distribution*"
      },
      "withdrawDepositedAmountForTick(Types.Pool storage,uint128,uint128,uint128)": {
        "details": "Updates tick data after a withdrawal consisting of only amount deposited to yield provider*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}